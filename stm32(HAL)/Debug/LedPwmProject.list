
LedPwmProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006744  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080068e4  080068e4  000168e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006944  08006944  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  08006944  08006944  00016944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800694c  0800694c  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800694c  0800694c  0001694c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006950  08006950  00016950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08006954  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  20000098  080069ec  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ec  080069ec  000202ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c8a4  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c49  00000000  00000000  0002c96c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d38  00000000  00000000  0002e5b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c50  00000000  00000000  0002f2f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016275  00000000  00000000  0002ff40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a3f6  00000000  00000000  000461b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008f7f0  00000000  00000000  000505ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dfd9b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cb8  00000000  00000000  000dfe18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000098 	.word	0x20000098
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080068cc 	.word	0x080068cc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000009c 	.word	0x2000009c
 80001dc:	080068cc 	.word	0x080068cc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_uldivmod>:
 8000b7c:	b953      	cbnz	r3, 8000b94 <__aeabi_uldivmod+0x18>
 8000b7e:	b94a      	cbnz	r2, 8000b94 <__aeabi_uldivmod+0x18>
 8000b80:	2900      	cmp	r1, #0
 8000b82:	bf08      	it	eq
 8000b84:	2800      	cmpeq	r0, #0
 8000b86:	bf1c      	itt	ne
 8000b88:	f04f 31ff 	movne.w	r1, #4294967295
 8000b8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b90:	f000 b972 	b.w	8000e78 <__aeabi_idiv0>
 8000b94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b9c:	f000 f806 	bl	8000bac <__udivmoddi4>
 8000ba0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba8:	b004      	add	sp, #16
 8000baa:	4770      	bx	lr

08000bac <__udivmoddi4>:
 8000bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb0:	9e08      	ldr	r6, [sp, #32]
 8000bb2:	4604      	mov	r4, r0
 8000bb4:	4688      	mov	r8, r1
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d14b      	bne.n	8000c52 <__udivmoddi4+0xa6>
 8000bba:	428a      	cmp	r2, r1
 8000bbc:	4615      	mov	r5, r2
 8000bbe:	d967      	bls.n	8000c90 <__udivmoddi4+0xe4>
 8000bc0:	fab2 f282 	clz	r2, r2
 8000bc4:	b14a      	cbz	r2, 8000bda <__udivmoddi4+0x2e>
 8000bc6:	f1c2 0720 	rsb	r7, r2, #32
 8000bca:	fa01 f302 	lsl.w	r3, r1, r2
 8000bce:	fa20 f707 	lsr.w	r7, r0, r7
 8000bd2:	4095      	lsls	r5, r2
 8000bd4:	ea47 0803 	orr.w	r8, r7, r3
 8000bd8:	4094      	lsls	r4, r2
 8000bda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bde:	0c23      	lsrs	r3, r4, #16
 8000be0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000be4:	fa1f fc85 	uxth.w	ip, r5
 8000be8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bec:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bf0:	fb07 f10c 	mul.w	r1, r7, ip
 8000bf4:	4299      	cmp	r1, r3
 8000bf6:	d909      	bls.n	8000c0c <__udivmoddi4+0x60>
 8000bf8:	18eb      	adds	r3, r5, r3
 8000bfa:	f107 30ff 	add.w	r0, r7, #4294967295
 8000bfe:	f080 811b 	bcs.w	8000e38 <__udivmoddi4+0x28c>
 8000c02:	4299      	cmp	r1, r3
 8000c04:	f240 8118 	bls.w	8000e38 <__udivmoddi4+0x28c>
 8000c08:	3f02      	subs	r7, #2
 8000c0a:	442b      	add	r3, r5
 8000c0c:	1a5b      	subs	r3, r3, r1
 8000c0e:	b2a4      	uxth	r4, r4
 8000c10:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c14:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c1c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c20:	45a4      	cmp	ip, r4
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x8c>
 8000c24:	192c      	adds	r4, r5, r4
 8000c26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c2a:	f080 8107 	bcs.w	8000e3c <__udivmoddi4+0x290>
 8000c2e:	45a4      	cmp	ip, r4
 8000c30:	f240 8104 	bls.w	8000e3c <__udivmoddi4+0x290>
 8000c34:	3802      	subs	r0, #2
 8000c36:	442c      	add	r4, r5
 8000c38:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c3c:	eba4 040c 	sub.w	r4, r4, ip
 8000c40:	2700      	movs	r7, #0
 8000c42:	b11e      	cbz	r6, 8000c4c <__udivmoddi4+0xa0>
 8000c44:	40d4      	lsrs	r4, r2
 8000c46:	2300      	movs	r3, #0
 8000c48:	e9c6 4300 	strd	r4, r3, [r6]
 8000c4c:	4639      	mov	r1, r7
 8000c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c52:	428b      	cmp	r3, r1
 8000c54:	d909      	bls.n	8000c6a <__udivmoddi4+0xbe>
 8000c56:	2e00      	cmp	r6, #0
 8000c58:	f000 80eb 	beq.w	8000e32 <__udivmoddi4+0x286>
 8000c5c:	2700      	movs	r7, #0
 8000c5e:	e9c6 0100 	strd	r0, r1, [r6]
 8000c62:	4638      	mov	r0, r7
 8000c64:	4639      	mov	r1, r7
 8000c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6a:	fab3 f783 	clz	r7, r3
 8000c6e:	2f00      	cmp	r7, #0
 8000c70:	d147      	bne.n	8000d02 <__udivmoddi4+0x156>
 8000c72:	428b      	cmp	r3, r1
 8000c74:	d302      	bcc.n	8000c7c <__udivmoddi4+0xd0>
 8000c76:	4282      	cmp	r2, r0
 8000c78:	f200 80fa 	bhi.w	8000e70 <__udivmoddi4+0x2c4>
 8000c7c:	1a84      	subs	r4, r0, r2
 8000c7e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c82:	2001      	movs	r0, #1
 8000c84:	4698      	mov	r8, r3
 8000c86:	2e00      	cmp	r6, #0
 8000c88:	d0e0      	beq.n	8000c4c <__udivmoddi4+0xa0>
 8000c8a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c8e:	e7dd      	b.n	8000c4c <__udivmoddi4+0xa0>
 8000c90:	b902      	cbnz	r2, 8000c94 <__udivmoddi4+0xe8>
 8000c92:	deff      	udf	#255	; 0xff
 8000c94:	fab2 f282 	clz	r2, r2
 8000c98:	2a00      	cmp	r2, #0
 8000c9a:	f040 808f 	bne.w	8000dbc <__udivmoddi4+0x210>
 8000c9e:	1b49      	subs	r1, r1, r5
 8000ca0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ca4:	fa1f f885 	uxth.w	r8, r5
 8000ca8:	2701      	movs	r7, #1
 8000caa:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cae:	0c23      	lsrs	r3, r4, #16
 8000cb0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cb4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb8:	fb08 f10c 	mul.w	r1, r8, ip
 8000cbc:	4299      	cmp	r1, r3
 8000cbe:	d907      	bls.n	8000cd0 <__udivmoddi4+0x124>
 8000cc0:	18eb      	adds	r3, r5, r3
 8000cc2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cc6:	d202      	bcs.n	8000cce <__udivmoddi4+0x122>
 8000cc8:	4299      	cmp	r1, r3
 8000cca:	f200 80cd 	bhi.w	8000e68 <__udivmoddi4+0x2bc>
 8000cce:	4684      	mov	ip, r0
 8000cd0:	1a59      	subs	r1, r3, r1
 8000cd2:	b2a3      	uxth	r3, r4
 8000cd4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cdc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ce0:	fb08 f800 	mul.w	r8, r8, r0
 8000ce4:	45a0      	cmp	r8, r4
 8000ce6:	d907      	bls.n	8000cf8 <__udivmoddi4+0x14c>
 8000ce8:	192c      	adds	r4, r5, r4
 8000cea:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cee:	d202      	bcs.n	8000cf6 <__udivmoddi4+0x14a>
 8000cf0:	45a0      	cmp	r8, r4
 8000cf2:	f200 80b6 	bhi.w	8000e62 <__udivmoddi4+0x2b6>
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	eba4 0408 	sub.w	r4, r4, r8
 8000cfc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d00:	e79f      	b.n	8000c42 <__udivmoddi4+0x96>
 8000d02:	f1c7 0c20 	rsb	ip, r7, #32
 8000d06:	40bb      	lsls	r3, r7
 8000d08:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d0c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d10:	fa01 f407 	lsl.w	r4, r1, r7
 8000d14:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d18:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d1c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d20:	4325      	orrs	r5, r4
 8000d22:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d26:	0c2c      	lsrs	r4, r5, #16
 8000d28:	fb08 3319 	mls	r3, r8, r9, r3
 8000d2c:	fa1f fa8e 	uxth.w	sl, lr
 8000d30:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d34:	fb09 f40a 	mul.w	r4, r9, sl
 8000d38:	429c      	cmp	r4, r3
 8000d3a:	fa02 f207 	lsl.w	r2, r2, r7
 8000d3e:	fa00 f107 	lsl.w	r1, r0, r7
 8000d42:	d90b      	bls.n	8000d5c <__udivmoddi4+0x1b0>
 8000d44:	eb1e 0303 	adds.w	r3, lr, r3
 8000d48:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d4c:	f080 8087 	bcs.w	8000e5e <__udivmoddi4+0x2b2>
 8000d50:	429c      	cmp	r4, r3
 8000d52:	f240 8084 	bls.w	8000e5e <__udivmoddi4+0x2b2>
 8000d56:	f1a9 0902 	sub.w	r9, r9, #2
 8000d5a:	4473      	add	r3, lr
 8000d5c:	1b1b      	subs	r3, r3, r4
 8000d5e:	b2ad      	uxth	r5, r5
 8000d60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d64:	fb08 3310 	mls	r3, r8, r0, r3
 8000d68:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d6c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d70:	45a2      	cmp	sl, r4
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x1da>
 8000d74:	eb1e 0404 	adds.w	r4, lr, r4
 8000d78:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7c:	d26b      	bcs.n	8000e56 <__udivmoddi4+0x2aa>
 8000d7e:	45a2      	cmp	sl, r4
 8000d80:	d969      	bls.n	8000e56 <__udivmoddi4+0x2aa>
 8000d82:	3802      	subs	r0, #2
 8000d84:	4474      	add	r4, lr
 8000d86:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d8a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d8e:	eba4 040a 	sub.w	r4, r4, sl
 8000d92:	454c      	cmp	r4, r9
 8000d94:	46c2      	mov	sl, r8
 8000d96:	464b      	mov	r3, r9
 8000d98:	d354      	bcc.n	8000e44 <__udivmoddi4+0x298>
 8000d9a:	d051      	beq.n	8000e40 <__udivmoddi4+0x294>
 8000d9c:	2e00      	cmp	r6, #0
 8000d9e:	d069      	beq.n	8000e74 <__udivmoddi4+0x2c8>
 8000da0:	ebb1 050a 	subs.w	r5, r1, sl
 8000da4:	eb64 0403 	sbc.w	r4, r4, r3
 8000da8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dac:	40fd      	lsrs	r5, r7
 8000dae:	40fc      	lsrs	r4, r7
 8000db0:	ea4c 0505 	orr.w	r5, ip, r5
 8000db4:	e9c6 5400 	strd	r5, r4, [r6]
 8000db8:	2700      	movs	r7, #0
 8000dba:	e747      	b.n	8000c4c <__udivmoddi4+0xa0>
 8000dbc:	f1c2 0320 	rsb	r3, r2, #32
 8000dc0:	fa20 f703 	lsr.w	r7, r0, r3
 8000dc4:	4095      	lsls	r5, r2
 8000dc6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dca:	fa21 f303 	lsr.w	r3, r1, r3
 8000dce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dd2:	4338      	orrs	r0, r7
 8000dd4:	0c01      	lsrs	r1, r0, #16
 8000dd6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000dda:	fa1f f885 	uxth.w	r8, r5
 8000dde:	fb0e 3317 	mls	r3, lr, r7, r3
 8000de2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de6:	fb07 f308 	mul.w	r3, r7, r8
 8000dea:	428b      	cmp	r3, r1
 8000dec:	fa04 f402 	lsl.w	r4, r4, r2
 8000df0:	d907      	bls.n	8000e02 <__udivmoddi4+0x256>
 8000df2:	1869      	adds	r1, r5, r1
 8000df4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000df8:	d22f      	bcs.n	8000e5a <__udivmoddi4+0x2ae>
 8000dfa:	428b      	cmp	r3, r1
 8000dfc:	d92d      	bls.n	8000e5a <__udivmoddi4+0x2ae>
 8000dfe:	3f02      	subs	r7, #2
 8000e00:	4429      	add	r1, r5
 8000e02:	1acb      	subs	r3, r1, r3
 8000e04:	b281      	uxth	r1, r0
 8000e06:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e0a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e12:	fb00 f308 	mul.w	r3, r0, r8
 8000e16:	428b      	cmp	r3, r1
 8000e18:	d907      	bls.n	8000e2a <__udivmoddi4+0x27e>
 8000e1a:	1869      	adds	r1, r5, r1
 8000e1c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e20:	d217      	bcs.n	8000e52 <__udivmoddi4+0x2a6>
 8000e22:	428b      	cmp	r3, r1
 8000e24:	d915      	bls.n	8000e52 <__udivmoddi4+0x2a6>
 8000e26:	3802      	subs	r0, #2
 8000e28:	4429      	add	r1, r5
 8000e2a:	1ac9      	subs	r1, r1, r3
 8000e2c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e30:	e73b      	b.n	8000caa <__udivmoddi4+0xfe>
 8000e32:	4637      	mov	r7, r6
 8000e34:	4630      	mov	r0, r6
 8000e36:	e709      	b.n	8000c4c <__udivmoddi4+0xa0>
 8000e38:	4607      	mov	r7, r0
 8000e3a:	e6e7      	b.n	8000c0c <__udivmoddi4+0x60>
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	e6fb      	b.n	8000c38 <__udivmoddi4+0x8c>
 8000e40:	4541      	cmp	r1, r8
 8000e42:	d2ab      	bcs.n	8000d9c <__udivmoddi4+0x1f0>
 8000e44:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e48:	eb69 020e 	sbc.w	r2, r9, lr
 8000e4c:	3801      	subs	r0, #1
 8000e4e:	4613      	mov	r3, r2
 8000e50:	e7a4      	b.n	8000d9c <__udivmoddi4+0x1f0>
 8000e52:	4660      	mov	r0, ip
 8000e54:	e7e9      	b.n	8000e2a <__udivmoddi4+0x27e>
 8000e56:	4618      	mov	r0, r3
 8000e58:	e795      	b.n	8000d86 <__udivmoddi4+0x1da>
 8000e5a:	4667      	mov	r7, ip
 8000e5c:	e7d1      	b.n	8000e02 <__udivmoddi4+0x256>
 8000e5e:	4681      	mov	r9, r0
 8000e60:	e77c      	b.n	8000d5c <__udivmoddi4+0x1b0>
 8000e62:	3802      	subs	r0, #2
 8000e64:	442c      	add	r4, r5
 8000e66:	e747      	b.n	8000cf8 <__udivmoddi4+0x14c>
 8000e68:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e6c:	442b      	add	r3, r5
 8000e6e:	e72f      	b.n	8000cd0 <__udivmoddi4+0x124>
 8000e70:	4638      	mov	r0, r7
 8000e72:	e708      	b.n	8000c86 <__udivmoddi4+0xda>
 8000e74:	4637      	mov	r7, r6
 8000e76:	e6e9      	b.n	8000c4c <__udivmoddi4+0xa0>

08000e78 <__aeabi_idiv0>:
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop

08000e7c <displayNumer>:
const uint16_t ITime = 40; // Stała całkowania
// UWAGA!!! Jednostka stałej PPeriod jest bliżej niezdefiniowana po implementację proszę zajżeć do funkcji calculatePWMValue()
// Natomiast jednostka ITime to ms

// Funkcja wyświetlająca wybraną cyfrę(chodzi o kolejność) na wbudowanym wyświetlaczu
void displayNumer(char numer, char position, _Bool point) {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	71fb      	strb	r3, [r7, #7]
 8000e86:	460b      	mov	r3, r1
 8000e88:	71bb      	strb	r3, [r7, #6]
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	717b      	strb	r3, [r7, #5]
    //Wyświetlanie kropki
	if(point) HAL_GPIO_WritePin(DPx, DPPin, GPIO_PIN_SET);
 8000e8e:	797b      	ldrb	r3, [r7, #5]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d007      	beq.n	8000ea4 <displayNumer+0x28>
 8000e94:	4bbd      	ldr	r3, [pc, #756]	; (800118c <displayNumer+0x310>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2180      	movs	r1, #128	; 0x80
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f002 fe6b 	bl	8003b78 <HAL_GPIO_WritePin>
 8000ea2:	e006      	b.n	8000eb2 <displayNumer+0x36>
	else HAL_GPIO_WritePin(DPx, DPPin, GPIO_PIN_RESET);
 8000ea4:	4bb9      	ldr	r3, [pc, #740]	; (800118c <displayNumer+0x310>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2180      	movs	r1, #128	; 0x80
 8000eaa:	2200      	movs	r2, #0
 8000eac:	4618      	mov	r0, r3
 8000eae:	f002 fe63 	bl	8003b78 <HAL_GPIO_WritePin>

    //Resetowanie wyświetlanego ekranu
    HAL_GPIO_WritePin(GPIOC, positonSelect[0], GPIO_PIN_SET);
 8000eb2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	4619      	mov	r1, r3
 8000eba:	48b5      	ldr	r0, [pc, #724]	; (8001190 <displayNumer+0x314>)
 8000ebc:	f002 fe5c 	bl	8003b78 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, positonSelect[1], GPIO_PIN_SET);
 8000ec0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	48b1      	ldr	r0, [pc, #708]	; (8001190 <displayNumer+0x314>)
 8000eca:	f002 fe55 	bl	8003b78 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, positonSelect[2], GPIO_PIN_SET);
 8000ece:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	48ae      	ldr	r0, [pc, #696]	; (8001190 <displayNumer+0x314>)
 8000ed8:	f002 fe4e 	bl	8003b78 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, positonSelect[3], GPIO_PIN_SET);
 8000edc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	48aa      	ldr	r0, [pc, #680]	; (8001190 <displayNumer+0x314>)
 8000ee6:	f002 fe47 	bl	8003b78 <HAL_GPIO_WritePin>

    //Wybieranie pola w ekranie
    HAL_GPIO_WritePin(GPIOC, positonSelect[position], GPIO_PIN_RESET);
 8000eea:	79bb      	ldrb	r3, [r7, #6]
 8000eec:	4aa9      	ldr	r2, [pc, #676]	; (8001194 <displayNumer+0x318>)
 8000eee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	48a6      	ldr	r0, [pc, #664]	; (8001190 <displayNumer+0x314>)
 8000ef8:	f002 fe3e 	bl	8003b78 <HAL_GPIO_WritePin>

    //Wyświetlanie numeru
	switch(numer) {
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	2b09      	cmp	r3, #9
 8000f00:	f200 8220 	bhi.w	8001344 <displayNumer+0x4c8>
 8000f04:	a201      	add	r2, pc, #4	; (adr r2, 8000f0c <displayNumer+0x90>)
 8000f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f0a:	bf00      	nop
 8000f0c:	08000f35 	.word	0x08000f35
 8000f10:	08000f99 	.word	0x08000f99
 8000f14:	08000ffd 	.word	0x08000ffd
 8000f18:	08001061 	.word	0x08001061
 8000f1c:	080010c5 	.word	0x080010c5
 8000f20:	08001129 	.word	0x08001129
 8000f24:	080011b5 	.word	0x080011b5
 8000f28:	08001219 	.word	0x08001219
 8000f2c:	0800127d 	.word	0x0800127d
 8000f30:	080012e1 	.word	0x080012e1
	case 0:
	  HAL_GPIO_WritePin(Ax, APin, GPIO_PIN_SET);
 8000f34:	4b98      	ldr	r3, [pc, #608]	; (8001198 <displayNumer+0x31c>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2140      	movs	r1, #64	; 0x40
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f002 fe1b 	bl	8003b78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Bx, BPin, GPIO_PIN_SET);
 8000f42:	4b96      	ldr	r3, [pc, #600]	; (800119c <displayNumer+0x320>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	2110      	movs	r1, #16
 8000f48:	2201      	movs	r2, #1
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f002 fe14 	bl	8003b78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Cx, CPin, GPIO_PIN_SET);
 8000f50:	4b93      	ldr	r3, [pc, #588]	; (80011a0 <displayNumer+0x324>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2108      	movs	r1, #8
 8000f56:	2201      	movs	r2, #1
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f002 fe0d 	bl	8003b78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Dx, DPin, GPIO_PIN_SET);
 8000f5e:	4b91      	ldr	r3, [pc, #580]	; (80011a4 <displayNumer+0x328>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	2102      	movs	r1, #2
 8000f64:	2201      	movs	r2, #1
 8000f66:	4618      	mov	r0, r3
 8000f68:	f002 fe06 	bl	8003b78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Ex, EPin, GPIO_PIN_SET);
 8000f6c:	4b8e      	ldr	r3, [pc, #568]	; (80011a8 <displayNumer+0x32c>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2104      	movs	r1, #4
 8000f72:	2201      	movs	r2, #1
 8000f74:	4618      	mov	r0, r3
 8000f76:	f002 fdff 	bl	8003b78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Fx, FPin, GPIO_PIN_SET);
 8000f7a:	4b8c      	ldr	r3, [pc, #560]	; (80011ac <displayNumer+0x330>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2120      	movs	r1, #32
 8000f80:	2201      	movs	r2, #1
 8000f82:	4618      	mov	r0, r3
 8000f84:	f002 fdf8 	bl	8003b78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Gx, GPin, GPIO_PIN_RESET);
 8000f88:	4b89      	ldr	r3, [pc, #548]	; (80011b0 <displayNumer+0x334>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	2200      	movs	r2, #0
 8000f90:	4618      	mov	r0, r3
 8000f92:	f002 fdf1 	bl	8003b78 <HAL_GPIO_WritePin>
	  break;
 8000f96:	e207      	b.n	80013a8 <displayNumer+0x52c>
	case 1:
	  HAL_GPIO_WritePin(Ax, APin, GPIO_PIN_RESET);
 8000f98:	4b7f      	ldr	r3, [pc, #508]	; (8001198 <displayNumer+0x31c>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2140      	movs	r1, #64	; 0x40
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f002 fde9 	bl	8003b78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Bx, BPin, GPIO_PIN_SET);
 8000fa6:	4b7d      	ldr	r3, [pc, #500]	; (800119c <displayNumer+0x320>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	2110      	movs	r1, #16
 8000fac:	2201      	movs	r2, #1
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f002 fde2 	bl	8003b78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Cx, CPin, GPIO_PIN_SET);
 8000fb4:	4b7a      	ldr	r3, [pc, #488]	; (80011a0 <displayNumer+0x324>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2108      	movs	r1, #8
 8000fba:	2201      	movs	r2, #1
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f002 fddb 	bl	8003b78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Dx, DPin, GPIO_PIN_RESET);
 8000fc2:	4b78      	ldr	r3, [pc, #480]	; (80011a4 <displayNumer+0x328>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	2102      	movs	r1, #2
 8000fc8:	2200      	movs	r2, #0
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f002 fdd4 	bl	8003b78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Ex, EPin, GPIO_PIN_RESET);
 8000fd0:	4b75      	ldr	r3, [pc, #468]	; (80011a8 <displayNumer+0x32c>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2104      	movs	r1, #4
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f002 fdcd 	bl	8003b78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Fx, FPin, GPIO_PIN_RESET);
 8000fde:	4b73      	ldr	r3, [pc, #460]	; (80011ac <displayNumer+0x330>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	2120      	movs	r1, #32
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f002 fdc6 	bl	8003b78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Gx, GPin, GPIO_PIN_RESET);
 8000fec:	4b70      	ldr	r3, [pc, #448]	; (80011b0 <displayNumer+0x334>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f002 fdbf 	bl	8003b78 <HAL_GPIO_WritePin>
	  break;
 8000ffa:	e1d5      	b.n	80013a8 <displayNumer+0x52c>
	case 2:
	  HAL_GPIO_WritePin(Ax, APin, GPIO_PIN_SET);
 8000ffc:	4b66      	ldr	r3, [pc, #408]	; (8001198 <displayNumer+0x31c>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2140      	movs	r1, #64	; 0x40
 8001002:	2201      	movs	r2, #1
 8001004:	4618      	mov	r0, r3
 8001006:	f002 fdb7 	bl	8003b78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Bx, BPin, GPIO_PIN_SET);
 800100a:	4b64      	ldr	r3, [pc, #400]	; (800119c <displayNumer+0x320>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2110      	movs	r1, #16
 8001010:	2201      	movs	r2, #1
 8001012:	4618      	mov	r0, r3
 8001014:	f002 fdb0 	bl	8003b78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Cx, CPin, GPIO_PIN_RESET);
 8001018:	4b61      	ldr	r3, [pc, #388]	; (80011a0 <displayNumer+0x324>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2108      	movs	r1, #8
 800101e:	2200      	movs	r2, #0
 8001020:	4618      	mov	r0, r3
 8001022:	f002 fda9 	bl	8003b78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Dx, DPin, GPIO_PIN_SET);
 8001026:	4b5f      	ldr	r3, [pc, #380]	; (80011a4 <displayNumer+0x328>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2102      	movs	r1, #2
 800102c:	2201      	movs	r2, #1
 800102e:	4618      	mov	r0, r3
 8001030:	f002 fda2 	bl	8003b78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Ex, EPin, GPIO_PIN_SET);
 8001034:	4b5c      	ldr	r3, [pc, #368]	; (80011a8 <displayNumer+0x32c>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	2104      	movs	r1, #4
 800103a:	2201      	movs	r2, #1
 800103c:	4618      	mov	r0, r3
 800103e:	f002 fd9b 	bl	8003b78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Fx, FPin, GPIO_PIN_RESET);
 8001042:	4b5a      	ldr	r3, [pc, #360]	; (80011ac <displayNumer+0x330>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2120      	movs	r1, #32
 8001048:	2200      	movs	r2, #0
 800104a:	4618      	mov	r0, r3
 800104c:	f002 fd94 	bl	8003b78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Gx, GPin, GPIO_PIN_SET);
 8001050:	4b57      	ldr	r3, [pc, #348]	; (80011b0 <displayNumer+0x334>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2101      	movs	r1, #1
 8001056:	2201      	movs	r2, #1
 8001058:	4618      	mov	r0, r3
 800105a:	f002 fd8d 	bl	8003b78 <HAL_GPIO_WritePin>
	  break;
 800105e:	e1a3      	b.n	80013a8 <displayNumer+0x52c>
	case 3:
	  HAL_GPIO_WritePin(Ax, APin, GPIO_PIN_SET);
 8001060:	4b4d      	ldr	r3, [pc, #308]	; (8001198 <displayNumer+0x31c>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2140      	movs	r1, #64	; 0x40
 8001066:	2201      	movs	r2, #1
 8001068:	4618      	mov	r0, r3
 800106a:	f002 fd85 	bl	8003b78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Bx, BPin, GPIO_PIN_SET);
 800106e:	4b4b      	ldr	r3, [pc, #300]	; (800119c <displayNumer+0x320>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2110      	movs	r1, #16
 8001074:	2201      	movs	r2, #1
 8001076:	4618      	mov	r0, r3
 8001078:	f002 fd7e 	bl	8003b78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Cx, CPin, GPIO_PIN_SET);
 800107c:	4b48      	ldr	r3, [pc, #288]	; (80011a0 <displayNumer+0x324>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2108      	movs	r1, #8
 8001082:	2201      	movs	r2, #1
 8001084:	4618      	mov	r0, r3
 8001086:	f002 fd77 	bl	8003b78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Dx, DPin, GPIO_PIN_SET);
 800108a:	4b46      	ldr	r3, [pc, #280]	; (80011a4 <displayNumer+0x328>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2102      	movs	r1, #2
 8001090:	2201      	movs	r2, #1
 8001092:	4618      	mov	r0, r3
 8001094:	f002 fd70 	bl	8003b78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Ex, EPin, GPIO_PIN_RESET);
 8001098:	4b43      	ldr	r3, [pc, #268]	; (80011a8 <displayNumer+0x32c>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2104      	movs	r1, #4
 800109e:	2200      	movs	r2, #0
 80010a0:	4618      	mov	r0, r3
 80010a2:	f002 fd69 	bl	8003b78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Fx, FPin, GPIO_PIN_RESET);
 80010a6:	4b41      	ldr	r3, [pc, #260]	; (80011ac <displayNumer+0x330>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	2120      	movs	r1, #32
 80010ac:	2200      	movs	r2, #0
 80010ae:	4618      	mov	r0, r3
 80010b0:	f002 fd62 	bl	8003b78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Gx, GPin, GPIO_PIN_SET);
 80010b4:	4b3e      	ldr	r3, [pc, #248]	; (80011b0 <displayNumer+0x334>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2101      	movs	r1, #1
 80010ba:	2201      	movs	r2, #1
 80010bc:	4618      	mov	r0, r3
 80010be:	f002 fd5b 	bl	8003b78 <HAL_GPIO_WritePin>
	  break;
 80010c2:	e171      	b.n	80013a8 <displayNumer+0x52c>
	case 4:
	  HAL_GPIO_WritePin(Ax, APin, GPIO_PIN_RESET);
 80010c4:	4b34      	ldr	r3, [pc, #208]	; (8001198 <displayNumer+0x31c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2140      	movs	r1, #64	; 0x40
 80010ca:	2200      	movs	r2, #0
 80010cc:	4618      	mov	r0, r3
 80010ce:	f002 fd53 	bl	8003b78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Bx, BPin, GPIO_PIN_SET);
 80010d2:	4b32      	ldr	r3, [pc, #200]	; (800119c <displayNumer+0x320>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2110      	movs	r1, #16
 80010d8:	2201      	movs	r2, #1
 80010da:	4618      	mov	r0, r3
 80010dc:	f002 fd4c 	bl	8003b78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Cx, CPin, GPIO_PIN_SET);
 80010e0:	4b2f      	ldr	r3, [pc, #188]	; (80011a0 <displayNumer+0x324>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2108      	movs	r1, #8
 80010e6:	2201      	movs	r2, #1
 80010e8:	4618      	mov	r0, r3
 80010ea:	f002 fd45 	bl	8003b78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Dx, DPin, GPIO_PIN_RESET);
 80010ee:	4b2d      	ldr	r3, [pc, #180]	; (80011a4 <displayNumer+0x328>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2102      	movs	r1, #2
 80010f4:	2200      	movs	r2, #0
 80010f6:	4618      	mov	r0, r3
 80010f8:	f002 fd3e 	bl	8003b78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Ex, EPin, GPIO_PIN_RESET);
 80010fc:	4b2a      	ldr	r3, [pc, #168]	; (80011a8 <displayNumer+0x32c>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2104      	movs	r1, #4
 8001102:	2200      	movs	r2, #0
 8001104:	4618      	mov	r0, r3
 8001106:	f002 fd37 	bl	8003b78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Fx, FPin, GPIO_PIN_SET);
 800110a:	4b28      	ldr	r3, [pc, #160]	; (80011ac <displayNumer+0x330>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2120      	movs	r1, #32
 8001110:	2201      	movs	r2, #1
 8001112:	4618      	mov	r0, r3
 8001114:	f002 fd30 	bl	8003b78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Gx, GPin, GPIO_PIN_SET);
 8001118:	4b25      	ldr	r3, [pc, #148]	; (80011b0 <displayNumer+0x334>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2101      	movs	r1, #1
 800111e:	2201      	movs	r2, #1
 8001120:	4618      	mov	r0, r3
 8001122:	f002 fd29 	bl	8003b78 <HAL_GPIO_WritePin>
	  break;
 8001126:	e13f      	b.n	80013a8 <displayNumer+0x52c>
	case 5:
	  HAL_GPIO_WritePin(Ax, APin, GPIO_PIN_SET);
 8001128:	4b1b      	ldr	r3, [pc, #108]	; (8001198 <displayNumer+0x31c>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2140      	movs	r1, #64	; 0x40
 800112e:	2201      	movs	r2, #1
 8001130:	4618      	mov	r0, r3
 8001132:	f002 fd21 	bl	8003b78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Bx, BPin, GPIO_PIN_RESET);
 8001136:	4b19      	ldr	r3, [pc, #100]	; (800119c <displayNumer+0x320>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2110      	movs	r1, #16
 800113c:	2200      	movs	r2, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f002 fd1a 	bl	8003b78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Cx, CPin, GPIO_PIN_SET);
 8001144:	4b16      	ldr	r3, [pc, #88]	; (80011a0 <displayNumer+0x324>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2108      	movs	r1, #8
 800114a:	2201      	movs	r2, #1
 800114c:	4618      	mov	r0, r3
 800114e:	f002 fd13 	bl	8003b78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Dx, DPin, GPIO_PIN_SET);
 8001152:	4b14      	ldr	r3, [pc, #80]	; (80011a4 <displayNumer+0x328>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2102      	movs	r1, #2
 8001158:	2201      	movs	r2, #1
 800115a:	4618      	mov	r0, r3
 800115c:	f002 fd0c 	bl	8003b78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Ex, EPin, GPIO_PIN_RESET);
 8001160:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <displayNumer+0x32c>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2104      	movs	r1, #4
 8001166:	2200      	movs	r2, #0
 8001168:	4618      	mov	r0, r3
 800116a:	f002 fd05 	bl	8003b78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Fx, FPin, GPIO_PIN_SET);
 800116e:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <displayNumer+0x330>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2120      	movs	r1, #32
 8001174:	2201      	movs	r2, #1
 8001176:	4618      	mov	r0, r3
 8001178:	f002 fcfe 	bl	8003b78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Gx, GPin, GPIO_PIN_SET);
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <displayNumer+0x334>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2101      	movs	r1, #1
 8001182:	2201      	movs	r2, #1
 8001184:	4618      	mov	r0, r3
 8001186:	f002 fcf7 	bl	8003b78 <HAL_GPIO_WritePin>
	  break;
 800118a:	e10d      	b.n	80013a8 <displayNumer+0x52c>
 800118c:	2000001c 	.word	0x2000001c
 8001190:	40020800 	.word	0x40020800
 8001194:	080068e8 	.word	0x080068e8
 8001198:	20000000 	.word	0x20000000
 800119c:	20000004 	.word	0x20000004
 80011a0:	20000008 	.word	0x20000008
 80011a4:	2000000c 	.word	0x2000000c
 80011a8:	20000010 	.word	0x20000010
 80011ac:	20000014 	.word	0x20000014
 80011b0:	20000018 	.word	0x20000018
	case 6:
	  HAL_GPIO_WritePin(Ax, APin, GPIO_PIN_SET);
 80011b4:	4b7e      	ldr	r3, [pc, #504]	; (80013b0 <displayNumer+0x534>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2140      	movs	r1, #64	; 0x40
 80011ba:	2201      	movs	r2, #1
 80011bc:	4618      	mov	r0, r3
 80011be:	f002 fcdb 	bl	8003b78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Bx, BPin, GPIO_PIN_RESET);
 80011c2:	4b7c      	ldr	r3, [pc, #496]	; (80013b4 <displayNumer+0x538>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	2110      	movs	r1, #16
 80011c8:	2200      	movs	r2, #0
 80011ca:	4618      	mov	r0, r3
 80011cc:	f002 fcd4 	bl	8003b78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Cx, CPin, GPIO_PIN_SET);
 80011d0:	4b79      	ldr	r3, [pc, #484]	; (80013b8 <displayNumer+0x53c>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2108      	movs	r1, #8
 80011d6:	2201      	movs	r2, #1
 80011d8:	4618      	mov	r0, r3
 80011da:	f002 fccd 	bl	8003b78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Dx, DPin, GPIO_PIN_SET);
 80011de:	4b77      	ldr	r3, [pc, #476]	; (80013bc <displayNumer+0x540>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	2102      	movs	r1, #2
 80011e4:	2201      	movs	r2, #1
 80011e6:	4618      	mov	r0, r3
 80011e8:	f002 fcc6 	bl	8003b78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Ex, EPin, GPIO_PIN_SET);
 80011ec:	4b74      	ldr	r3, [pc, #464]	; (80013c0 <displayNumer+0x544>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2104      	movs	r1, #4
 80011f2:	2201      	movs	r2, #1
 80011f4:	4618      	mov	r0, r3
 80011f6:	f002 fcbf 	bl	8003b78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Fx, FPin, GPIO_PIN_SET);
 80011fa:	4b72      	ldr	r3, [pc, #456]	; (80013c4 <displayNumer+0x548>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	2120      	movs	r1, #32
 8001200:	2201      	movs	r2, #1
 8001202:	4618      	mov	r0, r3
 8001204:	f002 fcb8 	bl	8003b78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Gx, GPin, GPIO_PIN_SET);
 8001208:	4b6f      	ldr	r3, [pc, #444]	; (80013c8 <displayNumer+0x54c>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2101      	movs	r1, #1
 800120e:	2201      	movs	r2, #1
 8001210:	4618      	mov	r0, r3
 8001212:	f002 fcb1 	bl	8003b78 <HAL_GPIO_WritePin>
	  break;
 8001216:	e0c7      	b.n	80013a8 <displayNumer+0x52c>
	case 7:
	  HAL_GPIO_WritePin(Ax, APin, GPIO_PIN_SET);
 8001218:	4b65      	ldr	r3, [pc, #404]	; (80013b0 <displayNumer+0x534>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2140      	movs	r1, #64	; 0x40
 800121e:	2201      	movs	r2, #1
 8001220:	4618      	mov	r0, r3
 8001222:	f002 fca9 	bl	8003b78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Bx, BPin, GPIO_PIN_SET);
 8001226:	4b63      	ldr	r3, [pc, #396]	; (80013b4 <displayNumer+0x538>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2110      	movs	r1, #16
 800122c:	2201      	movs	r2, #1
 800122e:	4618      	mov	r0, r3
 8001230:	f002 fca2 	bl	8003b78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Cx, CPin, GPIO_PIN_SET);
 8001234:	4b60      	ldr	r3, [pc, #384]	; (80013b8 <displayNumer+0x53c>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2108      	movs	r1, #8
 800123a:	2201      	movs	r2, #1
 800123c:	4618      	mov	r0, r3
 800123e:	f002 fc9b 	bl	8003b78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Dx, DPin, GPIO_PIN_RESET);
 8001242:	4b5e      	ldr	r3, [pc, #376]	; (80013bc <displayNumer+0x540>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2102      	movs	r1, #2
 8001248:	2200      	movs	r2, #0
 800124a:	4618      	mov	r0, r3
 800124c:	f002 fc94 	bl	8003b78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Ex, EPin, GPIO_PIN_RESET);
 8001250:	4b5b      	ldr	r3, [pc, #364]	; (80013c0 <displayNumer+0x544>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2104      	movs	r1, #4
 8001256:	2200      	movs	r2, #0
 8001258:	4618      	mov	r0, r3
 800125a:	f002 fc8d 	bl	8003b78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Fx, FPin, GPIO_PIN_RESET);
 800125e:	4b59      	ldr	r3, [pc, #356]	; (80013c4 <displayNumer+0x548>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2120      	movs	r1, #32
 8001264:	2200      	movs	r2, #0
 8001266:	4618      	mov	r0, r3
 8001268:	f002 fc86 	bl	8003b78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Gx, GPin, GPIO_PIN_RESET);
 800126c:	4b56      	ldr	r3, [pc, #344]	; (80013c8 <displayNumer+0x54c>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2101      	movs	r1, #1
 8001272:	2200      	movs	r2, #0
 8001274:	4618      	mov	r0, r3
 8001276:	f002 fc7f 	bl	8003b78 <HAL_GPIO_WritePin>
	  break;
 800127a:	e095      	b.n	80013a8 <displayNumer+0x52c>
	case 8:
	  HAL_GPIO_WritePin(Ax, APin, GPIO_PIN_SET);
 800127c:	4b4c      	ldr	r3, [pc, #304]	; (80013b0 <displayNumer+0x534>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2140      	movs	r1, #64	; 0x40
 8001282:	2201      	movs	r2, #1
 8001284:	4618      	mov	r0, r3
 8001286:	f002 fc77 	bl	8003b78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Bx, BPin, GPIO_PIN_SET);
 800128a:	4b4a      	ldr	r3, [pc, #296]	; (80013b4 <displayNumer+0x538>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2110      	movs	r1, #16
 8001290:	2201      	movs	r2, #1
 8001292:	4618      	mov	r0, r3
 8001294:	f002 fc70 	bl	8003b78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Cx, CPin, GPIO_PIN_SET);
 8001298:	4b47      	ldr	r3, [pc, #284]	; (80013b8 <displayNumer+0x53c>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2108      	movs	r1, #8
 800129e:	2201      	movs	r2, #1
 80012a0:	4618      	mov	r0, r3
 80012a2:	f002 fc69 	bl	8003b78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Dx, DPin, GPIO_PIN_SET);
 80012a6:	4b45      	ldr	r3, [pc, #276]	; (80013bc <displayNumer+0x540>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2102      	movs	r1, #2
 80012ac:	2201      	movs	r2, #1
 80012ae:	4618      	mov	r0, r3
 80012b0:	f002 fc62 	bl	8003b78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Ex, EPin, GPIO_PIN_SET);
 80012b4:	4b42      	ldr	r3, [pc, #264]	; (80013c0 <displayNumer+0x544>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2104      	movs	r1, #4
 80012ba:	2201      	movs	r2, #1
 80012bc:	4618      	mov	r0, r3
 80012be:	f002 fc5b 	bl	8003b78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Fx, FPin, GPIO_PIN_SET);
 80012c2:	4b40      	ldr	r3, [pc, #256]	; (80013c4 <displayNumer+0x548>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2120      	movs	r1, #32
 80012c8:	2201      	movs	r2, #1
 80012ca:	4618      	mov	r0, r3
 80012cc:	f002 fc54 	bl	8003b78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Gx, GPin, GPIO_PIN_SET);
 80012d0:	4b3d      	ldr	r3, [pc, #244]	; (80013c8 <displayNumer+0x54c>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2101      	movs	r1, #1
 80012d6:	2201      	movs	r2, #1
 80012d8:	4618      	mov	r0, r3
 80012da:	f002 fc4d 	bl	8003b78 <HAL_GPIO_WritePin>
	  break;
 80012de:	e063      	b.n	80013a8 <displayNumer+0x52c>
	case 9:
	  HAL_GPIO_WritePin(Ax, APin, GPIO_PIN_SET);
 80012e0:	4b33      	ldr	r3, [pc, #204]	; (80013b0 <displayNumer+0x534>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2140      	movs	r1, #64	; 0x40
 80012e6:	2201      	movs	r2, #1
 80012e8:	4618      	mov	r0, r3
 80012ea:	f002 fc45 	bl	8003b78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Bx, BPin, GPIO_PIN_SET);
 80012ee:	4b31      	ldr	r3, [pc, #196]	; (80013b4 <displayNumer+0x538>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2110      	movs	r1, #16
 80012f4:	2201      	movs	r2, #1
 80012f6:	4618      	mov	r0, r3
 80012f8:	f002 fc3e 	bl	8003b78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Cx, CPin, GPIO_PIN_SET);
 80012fc:	4b2e      	ldr	r3, [pc, #184]	; (80013b8 <displayNumer+0x53c>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2108      	movs	r1, #8
 8001302:	2201      	movs	r2, #1
 8001304:	4618      	mov	r0, r3
 8001306:	f002 fc37 	bl	8003b78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Dx, DPin, GPIO_PIN_SET);
 800130a:	4b2c      	ldr	r3, [pc, #176]	; (80013bc <displayNumer+0x540>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2102      	movs	r1, #2
 8001310:	2201      	movs	r2, #1
 8001312:	4618      	mov	r0, r3
 8001314:	f002 fc30 	bl	8003b78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Ex, EPin, GPIO_PIN_RESET);
 8001318:	4b29      	ldr	r3, [pc, #164]	; (80013c0 <displayNumer+0x544>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2104      	movs	r1, #4
 800131e:	2200      	movs	r2, #0
 8001320:	4618      	mov	r0, r3
 8001322:	f002 fc29 	bl	8003b78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Fx, FPin, GPIO_PIN_SET);
 8001326:	4b27      	ldr	r3, [pc, #156]	; (80013c4 <displayNumer+0x548>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2120      	movs	r1, #32
 800132c:	2201      	movs	r2, #1
 800132e:	4618      	mov	r0, r3
 8001330:	f002 fc22 	bl	8003b78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Gx, GPin, GPIO_PIN_SET);
 8001334:	4b24      	ldr	r3, [pc, #144]	; (80013c8 <displayNumer+0x54c>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2101      	movs	r1, #1
 800133a:	2201      	movs	r2, #1
 800133c:	4618      	mov	r0, r3
 800133e:	f002 fc1b 	bl	8003b78 <HAL_GPIO_WritePin>
	  break;
 8001342:	e031      	b.n	80013a8 <displayNumer+0x52c>
	default:
	  HAL_GPIO_WritePin(Ax, APin, GPIO_PIN_SET);
 8001344:	4b1a      	ldr	r3, [pc, #104]	; (80013b0 <displayNumer+0x534>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2140      	movs	r1, #64	; 0x40
 800134a:	2201      	movs	r2, #1
 800134c:	4618      	mov	r0, r3
 800134e:	f002 fc13 	bl	8003b78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Bx, BPin, GPIO_PIN_RESET);
 8001352:	4b18      	ldr	r3, [pc, #96]	; (80013b4 <displayNumer+0x538>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2110      	movs	r1, #16
 8001358:	2200      	movs	r2, #0
 800135a:	4618      	mov	r0, r3
 800135c:	f002 fc0c 	bl	8003b78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Cx, CPin, GPIO_PIN_RESET);
 8001360:	4b15      	ldr	r3, [pc, #84]	; (80013b8 <displayNumer+0x53c>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2108      	movs	r1, #8
 8001366:	2200      	movs	r2, #0
 8001368:	4618      	mov	r0, r3
 800136a:	f002 fc05 	bl	8003b78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Dx, DPin, GPIO_PIN_SET);
 800136e:	4b13      	ldr	r3, [pc, #76]	; (80013bc <displayNumer+0x540>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2102      	movs	r1, #2
 8001374:	2201      	movs	r2, #1
 8001376:	4618      	mov	r0, r3
 8001378:	f002 fbfe 	bl	8003b78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Ex, EPin, GPIO_PIN_SET);
 800137c:	4b10      	ldr	r3, [pc, #64]	; (80013c0 <displayNumer+0x544>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2104      	movs	r1, #4
 8001382:	2201      	movs	r2, #1
 8001384:	4618      	mov	r0, r3
 8001386:	f002 fbf7 	bl	8003b78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Fx, FPin, GPIO_PIN_SET);
 800138a:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <displayNumer+0x548>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2120      	movs	r1, #32
 8001390:	2201      	movs	r2, #1
 8001392:	4618      	mov	r0, r3
 8001394:	f002 fbf0 	bl	8003b78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Gx, GPin, GPIO_PIN_SET);
 8001398:	4b0b      	ldr	r3, [pc, #44]	; (80013c8 <displayNumer+0x54c>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2101      	movs	r1, #1
 800139e:	2201      	movs	r2, #1
 80013a0:	4618      	mov	r0, r3
 80013a2:	f002 fbe9 	bl	8003b78 <HAL_GPIO_WritePin>
	  break;
 80013a6:	bf00      	nop
	}
}
 80013a8:	bf00      	nop
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20000000 	.word	0x20000000
 80013b4:	20000004 	.word	0x20000004
 80013b8:	20000008 	.word	0x20000008
 80013bc:	2000000c 	.word	0x2000000c
 80013c0:	20000010 	.word	0x20000010
 80013c4:	20000014 	.word	0x20000014
 80013c8:	20000018 	.word	0x20000018

080013cc <convertDouble10000>:

// Funkcja pomocnicza do convertDouble dla liczb < 10000 oraz > 1000
void convertDouble10000(double numer) {
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	ed87 0b00 	vstr	d0, [r7]
	numersToDisplay[0] = ((int)(numer) % 10000) / 1000;
 80013d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80013da:	f7ff fba7 	bl	8000b2c <__aeabi_d2iz>
 80013de:	4602      	mov	r2, r0
 80013e0:	4b33      	ldr	r3, [pc, #204]	; (80014b0 <convertDouble10000+0xe4>)
 80013e2:	fb83 1302 	smull	r1, r3, r3, r2
 80013e6:	1319      	asrs	r1, r3, #12
 80013e8:	17d3      	asrs	r3, r2, #31
 80013ea:	1acb      	subs	r3, r1, r3
 80013ec:	f242 7110 	movw	r1, #10000	; 0x2710
 80013f0:	fb01 f303 	mul.w	r3, r1, r3
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	4a2f      	ldr	r2, [pc, #188]	; (80014b4 <convertDouble10000+0xe8>)
 80013f8:	fb82 1203 	smull	r1, r2, r2, r3
 80013fc:	1192      	asrs	r2, r2, #6
 80013fe:	17db      	asrs	r3, r3, #31
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	b2da      	uxtb	r2, r3
 8001404:	4b2c      	ldr	r3, [pc, #176]	; (80014b8 <convertDouble10000+0xec>)
 8001406:	701a      	strb	r2, [r3, #0]
    numersToDisplay[1] = ((int)(numer) % 1000) / 100;
 8001408:	e9d7 0100 	ldrd	r0, r1, [r7]
 800140c:	f7ff fb8e 	bl	8000b2c <__aeabi_d2iz>
 8001410:	4602      	mov	r2, r0
 8001412:	4b28      	ldr	r3, [pc, #160]	; (80014b4 <convertDouble10000+0xe8>)
 8001414:	fb83 1302 	smull	r1, r3, r3, r2
 8001418:	1199      	asrs	r1, r3, #6
 800141a:	17d3      	asrs	r3, r2, #31
 800141c:	1acb      	subs	r3, r1, r3
 800141e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001422:	fb01 f303 	mul.w	r3, r1, r3
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	4a24      	ldr	r2, [pc, #144]	; (80014bc <convertDouble10000+0xf0>)
 800142a:	fb82 1203 	smull	r1, r2, r2, r3
 800142e:	1152      	asrs	r2, r2, #5
 8001430:	17db      	asrs	r3, r3, #31
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	b2da      	uxtb	r2, r3
 8001436:	4b20      	ldr	r3, [pc, #128]	; (80014b8 <convertDouble10000+0xec>)
 8001438:	705a      	strb	r2, [r3, #1]
    numersToDisplay[2] = ((int)(numer) % 100) / 10;
 800143a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800143e:	f7ff fb75 	bl	8000b2c <__aeabi_d2iz>
 8001442:	4602      	mov	r2, r0
 8001444:	4b1d      	ldr	r3, [pc, #116]	; (80014bc <convertDouble10000+0xf0>)
 8001446:	fb83 1302 	smull	r1, r3, r3, r2
 800144a:	1159      	asrs	r1, r3, #5
 800144c:	17d3      	asrs	r3, r2, #31
 800144e:	1acb      	subs	r3, r1, r3
 8001450:	2164      	movs	r1, #100	; 0x64
 8001452:	fb01 f303 	mul.w	r3, r1, r3
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	4a19      	ldr	r2, [pc, #100]	; (80014c0 <convertDouble10000+0xf4>)
 800145a:	fb82 1203 	smull	r1, r2, r2, r3
 800145e:	1092      	asrs	r2, r2, #2
 8001460:	17db      	asrs	r3, r3, #31
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	b2da      	uxtb	r2, r3
 8001466:	4b14      	ldr	r3, [pc, #80]	; (80014b8 <convertDouble10000+0xec>)
 8001468:	709a      	strb	r2, [r3, #2]
    numersToDisplay[3] = (int)(numer) % 10;
 800146a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800146e:	f7ff fb5d 	bl	8000b2c <__aeabi_d2iz>
 8001472:	4601      	mov	r1, r0
 8001474:	4b12      	ldr	r3, [pc, #72]	; (80014c0 <convertDouble10000+0xf4>)
 8001476:	fb83 2301 	smull	r2, r3, r3, r1
 800147a:	109a      	asrs	r2, r3, #2
 800147c:	17cb      	asrs	r3, r1, #31
 800147e:	1ad2      	subs	r2, r2, r3
 8001480:	4613      	mov	r3, r2
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	4413      	add	r3, r2
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	1aca      	subs	r2, r1, r3
 800148a:	b2d2      	uxtb	r2, r2
 800148c:	4b0a      	ldr	r3, [pc, #40]	; (80014b8 <convertDouble10000+0xec>)
 800148e:	70da      	strb	r2, [r3, #3]

    pointPosition[0] = 0;
 8001490:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <convertDouble10000+0xf8>)
 8001492:	2200      	movs	r2, #0
 8001494:	701a      	strb	r2, [r3, #0]
    pointPosition[1] = 0;
 8001496:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <convertDouble10000+0xf8>)
 8001498:	2200      	movs	r2, #0
 800149a:	705a      	strb	r2, [r3, #1]
    pointPosition[2] = 0;
 800149c:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <convertDouble10000+0xf8>)
 800149e:	2200      	movs	r2, #0
 80014a0:	709a      	strb	r2, [r3, #2]
    pointPosition[3] = 0;
 80014a2:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <convertDouble10000+0xf8>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	70da      	strb	r2, [r3, #3]
}
 80014a8:	bf00      	nop
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	68db8bad 	.word	0x68db8bad
 80014b4:	10624dd3 	.word	0x10624dd3
 80014b8:	20000020 	.word	0x20000020
 80014bc:	51eb851f 	.word	0x51eb851f
 80014c0:	66666667 	.word	0x66666667
 80014c4:	200000b4 	.word	0x200000b4

080014c8 <convertDouble1000>:

// Funkcja pomocnicza do convertDouble dla liczb < 1000 oraz > 100
void convertDouble1000(double numer) {
 80014c8:	b590      	push	{r4, r7, lr}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	ed87 0b00 	vstr	d0, [r7]
    numersToDisplay[0] = ((int)(numer) % 1000) / 100;
 80014d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80014d6:	f7ff fb29 	bl	8000b2c <__aeabi_d2iz>
 80014da:	4602      	mov	r2, r0
 80014dc:	4b35      	ldr	r3, [pc, #212]	; (80015b4 <convertDouble1000+0xec>)
 80014de:	fb83 1302 	smull	r1, r3, r3, r2
 80014e2:	1199      	asrs	r1, r3, #6
 80014e4:	17d3      	asrs	r3, r2, #31
 80014e6:	1acb      	subs	r3, r1, r3
 80014e8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80014ec:	fb01 f303 	mul.w	r3, r1, r3
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	4a31      	ldr	r2, [pc, #196]	; (80015b8 <convertDouble1000+0xf0>)
 80014f4:	fb82 1203 	smull	r1, r2, r2, r3
 80014f8:	1152      	asrs	r2, r2, #5
 80014fa:	17db      	asrs	r3, r3, #31
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	b2da      	uxtb	r2, r3
 8001500:	4b2e      	ldr	r3, [pc, #184]	; (80015bc <convertDouble1000+0xf4>)
 8001502:	701a      	strb	r2, [r3, #0]
    numersToDisplay[1] = ((int)(numer) % 100) / 10;
 8001504:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001508:	f7ff fb10 	bl	8000b2c <__aeabi_d2iz>
 800150c:	4602      	mov	r2, r0
 800150e:	4b2a      	ldr	r3, [pc, #168]	; (80015b8 <convertDouble1000+0xf0>)
 8001510:	fb83 1302 	smull	r1, r3, r3, r2
 8001514:	1159      	asrs	r1, r3, #5
 8001516:	17d3      	asrs	r3, r2, #31
 8001518:	1acb      	subs	r3, r1, r3
 800151a:	2164      	movs	r1, #100	; 0x64
 800151c:	fb01 f303 	mul.w	r3, r1, r3
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	4a27      	ldr	r2, [pc, #156]	; (80015c0 <convertDouble1000+0xf8>)
 8001524:	fb82 1203 	smull	r1, r2, r2, r3
 8001528:	1092      	asrs	r2, r2, #2
 800152a:	17db      	asrs	r3, r3, #31
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	b2da      	uxtb	r2, r3
 8001530:	4b22      	ldr	r3, [pc, #136]	; (80015bc <convertDouble1000+0xf4>)
 8001532:	705a      	strb	r2, [r3, #1]
    numersToDisplay[2] = (int)(numer) % 10;
 8001534:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001538:	f7ff faf8 	bl	8000b2c <__aeabi_d2iz>
 800153c:	4601      	mov	r1, r0
 800153e:	4b20      	ldr	r3, [pc, #128]	; (80015c0 <convertDouble1000+0xf8>)
 8001540:	fb83 2301 	smull	r2, r3, r3, r1
 8001544:	109a      	asrs	r2, r3, #2
 8001546:	17cb      	asrs	r3, r1, #31
 8001548:	1ad2      	subs	r2, r2, r3
 800154a:	4613      	mov	r3, r2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	4413      	add	r3, r2
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	1aca      	subs	r2, r1, r3
 8001554:	b2d2      	uxtb	r2, r2
 8001556:	4b19      	ldr	r3, [pc, #100]	; (80015bc <convertDouble1000+0xf4>)
 8001558:	709a      	strb	r2, [r3, #2]
    numersToDisplay[3] = (int)(numer * 10) % 10;
 800155a:	f04f 0200 	mov.w	r2, #0
 800155e:	4b19      	ldr	r3, [pc, #100]	; (80015c4 <convertDouble1000+0xfc>)
 8001560:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001564:	f7ff f848 	bl	80005f8 <__aeabi_dmul>
 8001568:	4603      	mov	r3, r0
 800156a:	460c      	mov	r4, r1
 800156c:	4618      	mov	r0, r3
 800156e:	4621      	mov	r1, r4
 8001570:	f7ff fadc 	bl	8000b2c <__aeabi_d2iz>
 8001574:	4601      	mov	r1, r0
 8001576:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <convertDouble1000+0xf8>)
 8001578:	fb83 2301 	smull	r2, r3, r3, r1
 800157c:	109a      	asrs	r2, r3, #2
 800157e:	17cb      	asrs	r3, r1, #31
 8001580:	1ad2      	subs	r2, r2, r3
 8001582:	4613      	mov	r3, r2
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	4413      	add	r3, r2
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	1aca      	subs	r2, r1, r3
 800158c:	b2d2      	uxtb	r2, r2
 800158e:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <convertDouble1000+0xf4>)
 8001590:	70da      	strb	r2, [r3, #3]

    pointPosition[0] = 0;
 8001592:	4b0d      	ldr	r3, [pc, #52]	; (80015c8 <convertDouble1000+0x100>)
 8001594:	2200      	movs	r2, #0
 8001596:	701a      	strb	r2, [r3, #0]
    pointPosition[1] = 0;
 8001598:	4b0b      	ldr	r3, [pc, #44]	; (80015c8 <convertDouble1000+0x100>)
 800159a:	2200      	movs	r2, #0
 800159c:	705a      	strb	r2, [r3, #1]
    pointPosition[2] = 1;
 800159e:	4b0a      	ldr	r3, [pc, #40]	; (80015c8 <convertDouble1000+0x100>)
 80015a0:	2201      	movs	r2, #1
 80015a2:	709a      	strb	r2, [r3, #2]
    pointPosition[3] = 0;
 80015a4:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <convertDouble1000+0x100>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	70da      	strb	r2, [r3, #3]
}
 80015aa:	bf00      	nop
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd90      	pop	{r4, r7, pc}
 80015b2:	bf00      	nop
 80015b4:	10624dd3 	.word	0x10624dd3
 80015b8:	51eb851f 	.word	0x51eb851f
 80015bc:	20000020 	.word	0x20000020
 80015c0:	66666667 	.word	0x66666667
 80015c4:	40240000 	.word	0x40240000
 80015c8:	200000b4 	.word	0x200000b4

080015cc <convertDouble100>:

// Funkcja pomocnicza do convertDouble dla liczb < 100 oraz > 10
void convertDouble100(double numer) {
 80015cc:	b590      	push	{r4, r7, lr}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	ed87 0b00 	vstr	d0, [r7]
    numersToDisplay[0] = ((int)(numer) % 100) / 10;
 80015d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80015da:	f7ff faa7 	bl	8000b2c <__aeabi_d2iz>
 80015de:	4602      	mov	r2, r0
 80015e0:	4b36      	ldr	r3, [pc, #216]	; (80016bc <convertDouble100+0xf0>)
 80015e2:	fb83 1302 	smull	r1, r3, r3, r2
 80015e6:	1159      	asrs	r1, r3, #5
 80015e8:	17d3      	asrs	r3, r2, #31
 80015ea:	1acb      	subs	r3, r1, r3
 80015ec:	2164      	movs	r1, #100	; 0x64
 80015ee:	fb01 f303 	mul.w	r3, r1, r3
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	4a32      	ldr	r2, [pc, #200]	; (80016c0 <convertDouble100+0xf4>)
 80015f6:	fb82 1203 	smull	r1, r2, r2, r3
 80015fa:	1092      	asrs	r2, r2, #2
 80015fc:	17db      	asrs	r3, r3, #31
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	b2da      	uxtb	r2, r3
 8001602:	4b30      	ldr	r3, [pc, #192]	; (80016c4 <convertDouble100+0xf8>)
 8001604:	701a      	strb	r2, [r3, #0]
    numersToDisplay[1] = (int)(numer) % 10;
 8001606:	e9d7 0100 	ldrd	r0, r1, [r7]
 800160a:	f7ff fa8f 	bl	8000b2c <__aeabi_d2iz>
 800160e:	4601      	mov	r1, r0
 8001610:	4b2b      	ldr	r3, [pc, #172]	; (80016c0 <convertDouble100+0xf4>)
 8001612:	fb83 2301 	smull	r2, r3, r3, r1
 8001616:	109a      	asrs	r2, r3, #2
 8001618:	17cb      	asrs	r3, r1, #31
 800161a:	1ad2      	subs	r2, r2, r3
 800161c:	4613      	mov	r3, r2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	4413      	add	r3, r2
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	1aca      	subs	r2, r1, r3
 8001626:	b2d2      	uxtb	r2, r2
 8001628:	4b26      	ldr	r3, [pc, #152]	; (80016c4 <convertDouble100+0xf8>)
 800162a:	705a      	strb	r2, [r3, #1]
    numersToDisplay[2] = (int)(numer * 10) % 10;
 800162c:	f04f 0200 	mov.w	r2, #0
 8001630:	4b25      	ldr	r3, [pc, #148]	; (80016c8 <convertDouble100+0xfc>)
 8001632:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001636:	f7fe ffdf 	bl	80005f8 <__aeabi_dmul>
 800163a:	4603      	mov	r3, r0
 800163c:	460c      	mov	r4, r1
 800163e:	4618      	mov	r0, r3
 8001640:	4621      	mov	r1, r4
 8001642:	f7ff fa73 	bl	8000b2c <__aeabi_d2iz>
 8001646:	4601      	mov	r1, r0
 8001648:	4b1d      	ldr	r3, [pc, #116]	; (80016c0 <convertDouble100+0xf4>)
 800164a:	fb83 2301 	smull	r2, r3, r3, r1
 800164e:	109a      	asrs	r2, r3, #2
 8001650:	17cb      	asrs	r3, r1, #31
 8001652:	1ad2      	subs	r2, r2, r3
 8001654:	4613      	mov	r3, r2
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	4413      	add	r3, r2
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	1aca      	subs	r2, r1, r3
 800165e:	b2d2      	uxtb	r2, r2
 8001660:	4b18      	ldr	r3, [pc, #96]	; (80016c4 <convertDouble100+0xf8>)
 8001662:	709a      	strb	r2, [r3, #2]
    numersToDisplay[3] = (int)(numer * 100) % 10;
 8001664:	f04f 0200 	mov.w	r2, #0
 8001668:	4b18      	ldr	r3, [pc, #96]	; (80016cc <convertDouble100+0x100>)
 800166a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800166e:	f7fe ffc3 	bl	80005f8 <__aeabi_dmul>
 8001672:	4603      	mov	r3, r0
 8001674:	460c      	mov	r4, r1
 8001676:	4618      	mov	r0, r3
 8001678:	4621      	mov	r1, r4
 800167a:	f7ff fa57 	bl	8000b2c <__aeabi_d2iz>
 800167e:	4601      	mov	r1, r0
 8001680:	4b0f      	ldr	r3, [pc, #60]	; (80016c0 <convertDouble100+0xf4>)
 8001682:	fb83 2301 	smull	r2, r3, r3, r1
 8001686:	109a      	asrs	r2, r3, #2
 8001688:	17cb      	asrs	r3, r1, #31
 800168a:	1ad2      	subs	r2, r2, r3
 800168c:	4613      	mov	r3, r2
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	4413      	add	r3, r2
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	1aca      	subs	r2, r1, r3
 8001696:	b2d2      	uxtb	r2, r2
 8001698:	4b0a      	ldr	r3, [pc, #40]	; (80016c4 <convertDouble100+0xf8>)
 800169a:	70da      	strb	r2, [r3, #3]

    pointPosition[0] = 0;
 800169c:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <convertDouble100+0x104>)
 800169e:	2200      	movs	r2, #0
 80016a0:	701a      	strb	r2, [r3, #0]
    pointPosition[1] = 1;
 80016a2:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <convertDouble100+0x104>)
 80016a4:	2201      	movs	r2, #1
 80016a6:	705a      	strb	r2, [r3, #1]
    pointPosition[2] = 0;
 80016a8:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <convertDouble100+0x104>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	709a      	strb	r2, [r3, #2]
    pointPosition[3] = 0;
 80016ae:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <convertDouble100+0x104>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	70da      	strb	r2, [r3, #3]
}
 80016b4:	bf00      	nop
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd90      	pop	{r4, r7, pc}
 80016bc:	51eb851f 	.word	0x51eb851f
 80016c0:	66666667 	.word	0x66666667
 80016c4:	20000020 	.word	0x20000020
 80016c8:	40240000 	.word	0x40240000
 80016cc:	40590000 	.word	0x40590000
 80016d0:	200000b4 	.word	0x200000b4

080016d4 <convertDouble10>:

// Funkcja pomocnicza do convertDouble dla liczb < 10
void convertDouble10(double numer) {
 80016d4:	b590      	push	{r4, r7, lr}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	ed87 0b00 	vstr	d0, [r7]
    numersToDisplay[0] = (int)(numer) % 10;
 80016de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016e2:	f7ff fa23 	bl	8000b2c <__aeabi_d2iz>
 80016e6:	4601      	mov	r1, r0
 80016e8:	4b38      	ldr	r3, [pc, #224]	; (80017cc <convertDouble10+0xf8>)
 80016ea:	fb83 2301 	smull	r2, r3, r3, r1
 80016ee:	109a      	asrs	r2, r3, #2
 80016f0:	17cb      	asrs	r3, r1, #31
 80016f2:	1ad2      	subs	r2, r2, r3
 80016f4:	4613      	mov	r3, r2
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	4413      	add	r3, r2
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	1aca      	subs	r2, r1, r3
 80016fe:	b2d2      	uxtb	r2, r2
 8001700:	4b33      	ldr	r3, [pc, #204]	; (80017d0 <convertDouble10+0xfc>)
 8001702:	701a      	strb	r2, [r3, #0]
    numersToDisplay[1] = (int)(numer * 10) % 10;
 8001704:	f04f 0200 	mov.w	r2, #0
 8001708:	4b32      	ldr	r3, [pc, #200]	; (80017d4 <convertDouble10+0x100>)
 800170a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800170e:	f7fe ff73 	bl	80005f8 <__aeabi_dmul>
 8001712:	4603      	mov	r3, r0
 8001714:	460c      	mov	r4, r1
 8001716:	4618      	mov	r0, r3
 8001718:	4621      	mov	r1, r4
 800171a:	f7ff fa07 	bl	8000b2c <__aeabi_d2iz>
 800171e:	4601      	mov	r1, r0
 8001720:	4b2a      	ldr	r3, [pc, #168]	; (80017cc <convertDouble10+0xf8>)
 8001722:	fb83 2301 	smull	r2, r3, r3, r1
 8001726:	109a      	asrs	r2, r3, #2
 8001728:	17cb      	asrs	r3, r1, #31
 800172a:	1ad2      	subs	r2, r2, r3
 800172c:	4613      	mov	r3, r2
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	4413      	add	r3, r2
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	1aca      	subs	r2, r1, r3
 8001736:	b2d2      	uxtb	r2, r2
 8001738:	4b25      	ldr	r3, [pc, #148]	; (80017d0 <convertDouble10+0xfc>)
 800173a:	705a      	strb	r2, [r3, #1]
    numersToDisplay[2] = (int)(numer * 100) % 10;
 800173c:	f04f 0200 	mov.w	r2, #0
 8001740:	4b25      	ldr	r3, [pc, #148]	; (80017d8 <convertDouble10+0x104>)
 8001742:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001746:	f7fe ff57 	bl	80005f8 <__aeabi_dmul>
 800174a:	4603      	mov	r3, r0
 800174c:	460c      	mov	r4, r1
 800174e:	4618      	mov	r0, r3
 8001750:	4621      	mov	r1, r4
 8001752:	f7ff f9eb 	bl	8000b2c <__aeabi_d2iz>
 8001756:	4601      	mov	r1, r0
 8001758:	4b1c      	ldr	r3, [pc, #112]	; (80017cc <convertDouble10+0xf8>)
 800175a:	fb83 2301 	smull	r2, r3, r3, r1
 800175e:	109a      	asrs	r2, r3, #2
 8001760:	17cb      	asrs	r3, r1, #31
 8001762:	1ad2      	subs	r2, r2, r3
 8001764:	4613      	mov	r3, r2
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	4413      	add	r3, r2
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	1aca      	subs	r2, r1, r3
 800176e:	b2d2      	uxtb	r2, r2
 8001770:	4b17      	ldr	r3, [pc, #92]	; (80017d0 <convertDouble10+0xfc>)
 8001772:	709a      	strb	r2, [r3, #2]
    numersToDisplay[3] = (int)(numer * 1000) % 10;
 8001774:	f04f 0200 	mov.w	r2, #0
 8001778:	4b18      	ldr	r3, [pc, #96]	; (80017dc <convertDouble10+0x108>)
 800177a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800177e:	f7fe ff3b 	bl	80005f8 <__aeabi_dmul>
 8001782:	4603      	mov	r3, r0
 8001784:	460c      	mov	r4, r1
 8001786:	4618      	mov	r0, r3
 8001788:	4621      	mov	r1, r4
 800178a:	f7ff f9cf 	bl	8000b2c <__aeabi_d2iz>
 800178e:	4601      	mov	r1, r0
 8001790:	4b0e      	ldr	r3, [pc, #56]	; (80017cc <convertDouble10+0xf8>)
 8001792:	fb83 2301 	smull	r2, r3, r3, r1
 8001796:	109a      	asrs	r2, r3, #2
 8001798:	17cb      	asrs	r3, r1, #31
 800179a:	1ad2      	subs	r2, r2, r3
 800179c:	4613      	mov	r3, r2
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	4413      	add	r3, r2
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	1aca      	subs	r2, r1, r3
 80017a6:	b2d2      	uxtb	r2, r2
 80017a8:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <convertDouble10+0xfc>)
 80017aa:	70da      	strb	r2, [r3, #3]

    pointPosition[0] = 1;
 80017ac:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <convertDouble10+0x10c>)
 80017ae:	2201      	movs	r2, #1
 80017b0:	701a      	strb	r2, [r3, #0]
    pointPosition[1] = 0;
 80017b2:	4b0b      	ldr	r3, [pc, #44]	; (80017e0 <convertDouble10+0x10c>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	705a      	strb	r2, [r3, #1]
    pointPosition[2] = 0;
 80017b8:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <convertDouble10+0x10c>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	709a      	strb	r2, [r3, #2]
    pointPosition[3] = 0;
 80017be:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <convertDouble10+0x10c>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	70da      	strb	r2, [r3, #3]
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd90      	pop	{r4, r7, pc}
 80017cc:	66666667 	.word	0x66666667
 80017d0:	20000020 	.word	0x20000020
 80017d4:	40240000 	.word	0x40240000
 80017d8:	40590000 	.word	0x40590000
 80017dc:	408f4000 	.word	0x408f4000
 80017e0:	200000b4 	.word	0x200000b4
 80017e4:	00000000 	.word	0x00000000

080017e8 <convertDouble>:

// Funkcja przepisująca liczbę od tablic odpowiadających za wyświetlanie na ekranie wbudowanym w płytkę
void convertDouble(double numer) {
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	ed87 0b00 	vstr	d0, [r7]
    if (numer < 10) convertDouble10(numer);
 80017f2:	f04f 0200 	mov.w	r2, #0
 80017f6:	4b2e      	ldr	r3, [pc, #184]	; (80018b0 <convertDouble+0xc8>)
 80017f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80017fc:	f7ff f96e 	bl	8000adc <__aeabi_dcmplt>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d004      	beq.n	8001810 <convertDouble+0x28>
 8001806:	ed97 0b00 	vldr	d0, [r7]
 800180a:	f7ff ff63 	bl	80016d4 <convertDouble10>
        pointPosition[0] = 0;
        pointPosition[1] = 0;
        pointPosition[2] = 0;
        pointPosition[3] = 0;
    }
}
 800180e:	e044      	b.n	800189a <convertDouble+0xb2>
    else if (numer < 100) convertDouble100(numer);
 8001810:	f04f 0200 	mov.w	r2, #0
 8001814:	4b27      	ldr	r3, [pc, #156]	; (80018b4 <convertDouble+0xcc>)
 8001816:	e9d7 0100 	ldrd	r0, r1, [r7]
 800181a:	f7ff f95f 	bl	8000adc <__aeabi_dcmplt>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d004      	beq.n	800182e <convertDouble+0x46>
 8001824:	ed97 0b00 	vldr	d0, [r7]
 8001828:	f7ff fed0 	bl	80015cc <convertDouble100>
}
 800182c:	e035      	b.n	800189a <convertDouble+0xb2>
    else if (numer < 1000) convertDouble1000(numer);
 800182e:	f04f 0200 	mov.w	r2, #0
 8001832:	4b21      	ldr	r3, [pc, #132]	; (80018b8 <convertDouble+0xd0>)
 8001834:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001838:	f7ff f950 	bl	8000adc <__aeabi_dcmplt>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d004      	beq.n	800184c <convertDouble+0x64>
 8001842:	ed97 0b00 	vldr	d0, [r7]
 8001846:	f7ff fe3f 	bl	80014c8 <convertDouble1000>
}
 800184a:	e026      	b.n	800189a <convertDouble+0xb2>
    else if (numer < 10000) convertDouble10000(numer);
 800184c:	a316      	add	r3, pc, #88	; (adr r3, 80018a8 <convertDouble+0xc0>)
 800184e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001852:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001856:	f7ff f941 	bl	8000adc <__aeabi_dcmplt>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d004      	beq.n	800186a <convertDouble+0x82>
 8001860:	ed97 0b00 	vldr	d0, [r7]
 8001864:	f7ff fdb2 	bl	80013cc <convertDouble10000>
}
 8001868:	e017      	b.n	800189a <convertDouble+0xb2>
        numersToDisplay[0] = 10;
 800186a:	4b14      	ldr	r3, [pc, #80]	; (80018bc <convertDouble+0xd4>)
 800186c:	220a      	movs	r2, #10
 800186e:	701a      	strb	r2, [r3, #0]
        numersToDisplay[1] = 10;
 8001870:	4b12      	ldr	r3, [pc, #72]	; (80018bc <convertDouble+0xd4>)
 8001872:	220a      	movs	r2, #10
 8001874:	705a      	strb	r2, [r3, #1]
        numersToDisplay[2] = 10;
 8001876:	4b11      	ldr	r3, [pc, #68]	; (80018bc <convertDouble+0xd4>)
 8001878:	220a      	movs	r2, #10
 800187a:	709a      	strb	r2, [r3, #2]
        numersToDisplay[3] = 10;
 800187c:	4b0f      	ldr	r3, [pc, #60]	; (80018bc <convertDouble+0xd4>)
 800187e:	220a      	movs	r2, #10
 8001880:	70da      	strb	r2, [r3, #3]
        pointPosition[0] = 0;
 8001882:	4b0f      	ldr	r3, [pc, #60]	; (80018c0 <convertDouble+0xd8>)
 8001884:	2200      	movs	r2, #0
 8001886:	701a      	strb	r2, [r3, #0]
        pointPosition[1] = 0;
 8001888:	4b0d      	ldr	r3, [pc, #52]	; (80018c0 <convertDouble+0xd8>)
 800188a:	2200      	movs	r2, #0
 800188c:	705a      	strb	r2, [r3, #1]
        pointPosition[2] = 0;
 800188e:	4b0c      	ldr	r3, [pc, #48]	; (80018c0 <convertDouble+0xd8>)
 8001890:	2200      	movs	r2, #0
 8001892:	709a      	strb	r2, [r3, #2]
        pointPosition[3] = 0;
 8001894:	4b0a      	ldr	r3, [pc, #40]	; (80018c0 <convertDouble+0xd8>)
 8001896:	2200      	movs	r2, #0
 8001898:	70da      	strb	r2, [r3, #3]
}
 800189a:	bf00      	nop
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	f3af 8000 	nop.w
 80018a8:	00000000 	.word	0x00000000
 80018ac:	40c38800 	.word	0x40c38800
 80018b0:	40240000 	.word	0x40240000
 80018b4:	40590000 	.word	0x40590000
 80018b8:	408f4000 	.word	0x408f4000
 80018bc:	20000020 	.word	0x20000020
 80018c0:	200000b4 	.word	0x200000b4

080018c4 <calculatePWMValue>:

// Funkcja obliczająca nową wartość PWM
uint16_t calculatePWMValue() {
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
	//Buforowanie zmiennej w celu zachowania jej stałości na czas działąnia funkcji(może się zmienić ze względu na powiązanie z DMA)
	uint16_t buffor = ADCValue;
 80018ca:	4b1e      	ldr	r3, [pc, #120]	; (8001944 <calculatePWMValue+0x80>)
 80018cc:	881b      	ldrh	r3, [r3, #0]
 80018ce:	80fb      	strh	r3, [r7, #6]
	buffor *= 12;
 80018d0:	88fb      	ldrh	r3, [r7, #6]
 80018d2:	461a      	mov	r2, r3
 80018d4:	0052      	lsls	r2, r2, #1
 80018d6:	4413      	add	r3, r2
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	80fb      	strh	r3, [r7, #6]
	if(buffor > lastPWM + PPeriod) lastPWM += PPeriod/2;
 80018dc:	88fa      	ldrh	r2, [r7, #6]
 80018de:	4b1a      	ldr	r3, [pc, #104]	; (8001948 <calculatePWMValue+0x84>)
 80018e0:	881b      	ldrh	r3, [r3, #0]
 80018e2:	4619      	mov	r1, r3
 80018e4:	f44f 7316 	mov.w	r3, #600	; 0x258
 80018e8:	440b      	add	r3, r1
 80018ea:	429a      	cmp	r2, r3
 80018ec:	dd0a      	ble.n	8001904 <calculatePWMValue+0x40>
 80018ee:	f44f 7316 	mov.w	r3, #600	; 0x258
 80018f2:	085b      	lsrs	r3, r3, #1
 80018f4:	b29a      	uxth	r2, r3
 80018f6:	4b14      	ldr	r3, [pc, #80]	; (8001948 <calculatePWMValue+0x84>)
 80018f8:	881b      	ldrh	r3, [r3, #0]
 80018fa:	4413      	add	r3, r2
 80018fc:	b29a      	uxth	r2, r3
 80018fe:	4b12      	ldr	r3, [pc, #72]	; (8001948 <calculatePWMValue+0x84>)
 8001900:	801a      	strh	r2, [r3, #0]
 8001902:	e016      	b.n	8001932 <calculatePWMValue+0x6e>
	else if(buffor < lastPWM - PPeriod) lastPWM -= PPeriod/2;
 8001904:	88fa      	ldrh	r2, [r7, #6]
 8001906:	4b10      	ldr	r3, [pc, #64]	; (8001948 <calculatePWMValue+0x84>)
 8001908:	881b      	ldrh	r3, [r3, #0]
 800190a:	4619      	mov	r1, r3
 800190c:	f44f 7316 	mov.w	r3, #600	; 0x258
 8001910:	1acb      	subs	r3, r1, r3
 8001912:	429a      	cmp	r2, r3
 8001914:	da0a      	bge.n	800192c <calculatePWMValue+0x68>
 8001916:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <calculatePWMValue+0x84>)
 8001918:	881a      	ldrh	r2, [r3, #0]
 800191a:	f44f 7316 	mov.w	r3, #600	; 0x258
 800191e:	085b      	lsrs	r3, r3, #1
 8001920:	b29b      	uxth	r3, r3
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	b29a      	uxth	r2, r3
 8001926:	4b08      	ldr	r3, [pc, #32]	; (8001948 <calculatePWMValue+0x84>)
 8001928:	801a      	strh	r2, [r3, #0]
 800192a:	e002      	b.n	8001932 <calculatePWMValue+0x6e>
	else lastPWM = buffor;
 800192c:	4a06      	ldr	r2, [pc, #24]	; (8001948 <calculatePWMValue+0x84>)
 800192e:	88fb      	ldrh	r3, [r7, #6]
 8001930:	8013      	strh	r3, [r2, #0]
	return lastPWM;
 8001932:	4b05      	ldr	r3, [pc, #20]	; (8001948 <calculatePWMValue+0x84>)
 8001934:	881b      	ldrh	r3, [r3, #0]
}
 8001936:	4618      	mov	r0, r3
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	2000025e 	.word	0x2000025e
 8001948:	200000bc 	.word	0x200000bc

0800194c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001950:	f000 fe7e 	bl	8002650 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001954:	f000 f83c 	bl	80019d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001958:	f000 fa3c 	bl	8001dd4 <MX_GPIO_Init>
  MX_DMA_Init();
 800195c:	f000 fa04 	bl	8001d68 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001960:	f000 f9d8 	bl	8001d14 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001964:	f000 f89e 	bl	8001aa4 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001968:	f000 f8ee 	bl	8001b48 <MX_TIM2_Init>
  MX_TIM10_Init();
 800196c:	f000 f9b0 	bl	8001cd0 <MX_TIM10_Init>
  MX_TIM4_Init();
 8001970:	f000 f938 	bl	8001be4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  //_______________________________________________________________________________________________________________________________________________________________________
  HAL_TIM_Base_Start_IT(&htim10);
 8001974:	480f      	ldr	r0, [pc, #60]	; (80019b4 <main+0x68>)
 8001976:	f002 fdca 	bl	800450e <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim2);
 800197a:	480f      	ldr	r0, [pc, #60]	; (80019b8 <main+0x6c>)
 800197c:	f002 fda3 	bl	80044c6 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001980:	210c      	movs	r1, #12
 8001982:	480e      	ldr	r0, [pc, #56]	; (80019bc <main+0x70>)
 8001984:	f002 fe1c 	bl	80045c0 <HAL_TIM_PWM_Start>
  //HAL_TIMEx_PWMN_Start(&htim4, TIM_CHANNEL_4);
  //HAL_TIMEx_PWMN_Start(&htim4, TIM_CHANNEL_2);

  HAL_ADC_Start_DMA(&hadc1, &ADCValue, 1);
 8001988:	2201      	movs	r2, #1
 800198a:	490d      	ldr	r1, [pc, #52]	; (80019c0 <main+0x74>)
 800198c:	480d      	ldr	r0, [pc, #52]	; (80019c4 <main+0x78>)
 800198e:	f000 ff37 	bl	8002800 <HAL_ADC_Start_DMA>

  //HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET);
  //HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8001992:	2200      	movs	r2, #0
 8001994:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001998:	480b      	ldr	r0, [pc, #44]	; (80019c8 <main+0x7c>)
 800199a:	f002 f8ed 	bl	8003b78 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	HAL_Delay(ITime);
 800199e:	2328      	movs	r3, #40	; 0x28
 80019a0:	4618      	mov	r0, r3
 80019a2:	f000 fec7 	bl	8002734 <HAL_Delay>
	// Aktualizowanie wartości rejestru odpowiadającego za wartość PWM
	TIM4->CCR4 = calculatePWMValue();
 80019a6:	f7ff ff8d 	bl	80018c4 <calculatePWMValue>
 80019aa:	4603      	mov	r3, r0
 80019ac:	461a      	mov	r2, r3
 80019ae:	4b07      	ldr	r3, [pc, #28]	; (80019cc <main+0x80>)
 80019b0:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(ITime);
 80019b2:	e7f4      	b.n	800199e <main+0x52>
 80019b4:	2000010c 	.word	0x2000010c
 80019b8:	20000260 	.word	0x20000260
 80019bc:	200000cc 	.word	0x200000cc
 80019c0:	2000025e 	.word	0x2000025e
 80019c4:	2000014c 	.word	0x2000014c
 80019c8:	40020400 	.word	0x40020400
 80019cc:	40000800 	.word	0x40000800

080019d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b094      	sub	sp, #80	; 0x50
 80019d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019d6:	f107 0320 	add.w	r3, r7, #32
 80019da:	2230      	movs	r2, #48	; 0x30
 80019dc:	2100      	movs	r1, #0
 80019de:	4618      	mov	r0, r3
 80019e0:	f004 fb52 	bl	8006088 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019e4:	f107 030c 	add.w	r3, r7, #12
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	60da      	str	r2, [r3, #12]
 80019f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019f4:	2300      	movs	r3, #0
 80019f6:	60bb      	str	r3, [r7, #8]
 80019f8:	4b28      	ldr	r3, [pc, #160]	; (8001a9c <SystemClock_Config+0xcc>)
 80019fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fc:	4a27      	ldr	r2, [pc, #156]	; (8001a9c <SystemClock_Config+0xcc>)
 80019fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a02:	6413      	str	r3, [r2, #64]	; 0x40
 8001a04:	4b25      	ldr	r3, [pc, #148]	; (8001a9c <SystemClock_Config+0xcc>)
 8001a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0c:	60bb      	str	r3, [r7, #8]
 8001a0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a10:	2300      	movs	r3, #0
 8001a12:	607b      	str	r3, [r7, #4]
 8001a14:	4b22      	ldr	r3, [pc, #136]	; (8001aa0 <SystemClock_Config+0xd0>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a21      	ldr	r2, [pc, #132]	; (8001aa0 <SystemClock_Config+0xd0>)
 8001a1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a1e:	6013      	str	r3, [r2, #0]
 8001a20:	4b1f      	ldr	r3, [pc, #124]	; (8001aa0 <SystemClock_Config+0xd0>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a28:	607b      	str	r3, [r7, #4]
 8001a2a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a30:	2301      	movs	r3, #1
 8001a32:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a34:	2310      	movs	r3, #16
 8001a36:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001a40:	2310      	movs	r3, #16
 8001a42:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001a44:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001a48:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001a4a:	2304      	movs	r3, #4
 8001a4c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a4e:	2304      	movs	r3, #4
 8001a50:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a52:	f107 0320 	add.w	r3, r7, #32
 8001a56:	4618      	mov	r0, r3
 8001a58:	f002 f8a8 	bl	8003bac <HAL_RCC_OscConfig>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001a62:	f000 fb27 	bl	80020b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a66:	230f      	movs	r3, #15
 8001a68:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a76:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a7c:	f107 030c 	add.w	r3, r7, #12
 8001a80:	2102      	movs	r1, #2
 8001a82:	4618      	mov	r0, r3
 8001a84:	f002 fb02 	bl	800408c <HAL_RCC_ClockConfig>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001a8e:	f000 fb11 	bl	80020b4 <Error_Handler>
  }
}
 8001a92:	bf00      	nop
 8001a94:	3750      	adds	r7, #80	; 0x50
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40023800 	.word	0x40023800
 8001aa0:	40007000 	.word	0x40007000

08001aa4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001aaa:	463b      	mov	r3, r7
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	605a      	str	r2, [r3, #4]
 8001ab2:	609a      	str	r2, [r3, #8]
 8001ab4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001ab6:	4b22      	ldr	r3, [pc, #136]	; (8001b40 <MX_ADC1_Init+0x9c>)
 8001ab8:	4a22      	ldr	r2, [pc, #136]	; (8001b44 <MX_ADC1_Init+0xa0>)
 8001aba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001abc:	4b20      	ldr	r3, [pc, #128]	; (8001b40 <MX_ADC1_Init+0x9c>)
 8001abe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ac2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001ac4:	4b1e      	ldr	r3, [pc, #120]	; (8001b40 <MX_ADC1_Init+0x9c>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001aca:	4b1d      	ldr	r3, [pc, #116]	; (8001b40 <MX_ADC1_Init+0x9c>)
 8001acc:	2201      	movs	r2, #1
 8001ace:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001ad0:	4b1b      	ldr	r3, [pc, #108]	; (8001b40 <MX_ADC1_Init+0x9c>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ad6:	4b1a      	ldr	r3, [pc, #104]	; (8001b40 <MX_ADC1_Init+0x9c>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001ade:	4b18      	ldr	r3, [pc, #96]	; (8001b40 <MX_ADC1_Init+0x9c>)
 8001ae0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ae4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8001ae6:	4b16      	ldr	r3, [pc, #88]	; (8001b40 <MX_ADC1_Init+0x9c>)
 8001ae8:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001aec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001aee:	4b14      	ldr	r3, [pc, #80]	; (8001b40 <MX_ADC1_Init+0x9c>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001af4:	4b12      	ldr	r3, [pc, #72]	; (8001b40 <MX_ADC1_Init+0x9c>)
 8001af6:	2201      	movs	r2, #1
 8001af8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001afa:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <MX_ADC1_Init+0x9c>)
 8001afc:	2201      	movs	r2, #1
 8001afe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b02:	4b0f      	ldr	r3, [pc, #60]	; (8001b40 <MX_ADC1_Init+0x9c>)
 8001b04:	2201      	movs	r2, #1
 8001b06:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b08:	480d      	ldr	r0, [pc, #52]	; (8001b40 <MX_ADC1_Init+0x9c>)
 8001b0a:	f000 fe35 	bl	8002778 <HAL_ADC_Init>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001b14:	f000 face 	bl	80020b4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001b20:	2307      	movs	r3, #7
 8001b22:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b24:	463b      	mov	r3, r7
 8001b26:	4619      	mov	r1, r3
 8001b28:	4805      	ldr	r0, [pc, #20]	; (8001b40 <MX_ADC1_Init+0x9c>)
 8001b2a:	f000 ff51 	bl	80029d0 <HAL_ADC_ConfigChannel>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001b34:	f000 fabe 	bl	80020b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b38:	bf00      	nop
 8001b3a:	3710      	adds	r7, #16
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	2000014c 	.word	0x2000014c
 8001b44:	40012000 	.word	0x40012000

08001b48 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b4e:	f107 0308 	add.w	r3, r7, #8
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	605a      	str	r2, [r3, #4]
 8001b58:	609a      	str	r2, [r3, #8]
 8001b5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b5c:	463b      	mov	r3, r7
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]
 8001b62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b64:	4b1e      	ldr	r3, [pc, #120]	; (8001be0 <MX_TIM2_Init+0x98>)
 8001b66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b6a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8399;
 8001b6c:	4b1c      	ldr	r3, [pc, #112]	; (8001be0 <MX_TIM2_Init+0x98>)
 8001b6e:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001b72:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b74:	4b1a      	ldr	r3, [pc, #104]	; (8001be0 <MX_TIM2_Init+0x98>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2999;
 8001b7a:	4b19      	ldr	r3, [pc, #100]	; (8001be0 <MX_TIM2_Init+0x98>)
 8001b7c:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001b80:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b82:	4b17      	ldr	r3, [pc, #92]	; (8001be0 <MX_TIM2_Init+0x98>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b88:	4b15      	ldr	r3, [pc, #84]	; (8001be0 <MX_TIM2_Init+0x98>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b8e:	4814      	ldr	r0, [pc, #80]	; (8001be0 <MX_TIM2_Init+0x98>)
 8001b90:	f002 fc6e 	bl	8004470 <HAL_TIM_Base_Init>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001b9a:	f000 fa8b 	bl	80020b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ba2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ba4:	f107 0308 	add.w	r3, r7, #8
 8001ba8:	4619      	mov	r1, r3
 8001baa:	480d      	ldr	r0, [pc, #52]	; (8001be0 <MX_TIM2_Init+0x98>)
 8001bac:	f002 ff08 	bl	80049c0 <HAL_TIM_ConfigClockSource>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001bb6:	f000 fa7d 	bl	80020b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001bba:	2320      	movs	r3, #32
 8001bbc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bc2:	463b      	mov	r3, r7
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4806      	ldr	r0, [pc, #24]	; (8001be0 <MX_TIM2_Init+0x98>)
 8001bc8:	f003 faa6 	bl	8005118 <HAL_TIMEx_MasterConfigSynchronization>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001bd2:	f000 fa6f 	bl	80020b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001bd6:	bf00      	nop
 8001bd8:	3718      	adds	r7, #24
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	20000260 	.word	0x20000260

08001be4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b08e      	sub	sp, #56	; 0x38
 8001be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bee:	2200      	movs	r2, #0
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	605a      	str	r2, [r3, #4]
 8001bf4:	609a      	str	r2, [r3, #8]
 8001bf6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bf8:	f107 0320 	add.w	r3, r7, #32
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c02:	1d3b      	adds	r3, r7, #4
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	605a      	str	r2, [r3, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	60da      	str	r2, [r3, #12]
 8001c0e:	611a      	str	r2, [r3, #16]
 8001c10:	615a      	str	r2, [r3, #20]
 8001c12:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c14:	4b2c      	ldr	r3, [pc, #176]	; (8001cc8 <MX_TIM4_Init+0xe4>)
 8001c16:	4a2d      	ldr	r2, [pc, #180]	; (8001ccc <MX_TIM4_Init+0xe8>)
 8001c18:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 3;
 8001c1a:	4b2b      	ldr	r3, [pc, #172]	; (8001cc8 <MX_TIM4_Init+0xe4>)
 8001c1c:	2203      	movs	r2, #3
 8001c1e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c20:	4b29      	ldr	r3, [pc, #164]	; (8001cc8 <MX_TIM4_Init+0xe4>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 49999;
 8001c26:	4b28      	ldr	r3, [pc, #160]	; (8001cc8 <MX_TIM4_Init+0xe4>)
 8001c28:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001c2c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c2e:	4b26      	ldr	r3, [pc, #152]	; (8001cc8 <MX_TIM4_Init+0xe4>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c34:	4b24      	ldr	r3, [pc, #144]	; (8001cc8 <MX_TIM4_Init+0xe4>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001c3a:	4823      	ldr	r0, [pc, #140]	; (8001cc8 <MX_TIM4_Init+0xe4>)
 8001c3c:	f002 fc18 	bl	8004470 <HAL_TIM_Base_Init>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001c46:	f000 fa35 	bl	80020b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c4e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001c50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c54:	4619      	mov	r1, r3
 8001c56:	481c      	ldr	r0, [pc, #112]	; (8001cc8 <MX_TIM4_Init+0xe4>)
 8001c58:	f002 feb2 	bl	80049c0 <HAL_TIM_ConfigClockSource>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001c62:	f000 fa27 	bl	80020b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001c66:	4818      	ldr	r0, [pc, #96]	; (8001cc8 <MX_TIM4_Init+0xe4>)
 8001c68:	f002 fc75 	bl	8004556 <HAL_TIM_PWM_Init>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001c72:	f000 fa1f 	bl	80020b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c76:	2300      	movs	r3, #0
 8001c78:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c7e:	f107 0320 	add.w	r3, r7, #32
 8001c82:	4619      	mov	r1, r3
 8001c84:	4810      	ldr	r0, [pc, #64]	; (8001cc8 <MX_TIM4_Init+0xe4>)
 8001c86:	f003 fa47 	bl	8005118 <HAL_TIMEx_MasterConfigSynchronization>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001c90:	f000 fa10 	bl	80020b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c94:	2360      	movs	r3, #96	; 0x60
 8001c96:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ca4:	1d3b      	adds	r3, r7, #4
 8001ca6:	220c      	movs	r2, #12
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4807      	ldr	r0, [pc, #28]	; (8001cc8 <MX_TIM4_Init+0xe4>)
 8001cac:	f002 fdc2 	bl	8004834 <HAL_TIM_PWM_ConfigChannel>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001cb6:	f000 f9fd 	bl	80020b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001cba:	4803      	ldr	r0, [pc, #12]	; (8001cc8 <MX_TIM4_Init+0xe4>)
 8001cbc:	f000 fb2c 	bl	8002318 <HAL_TIM_MspPostInit>

}
 8001cc0:	bf00      	nop
 8001cc2:	3738      	adds	r7, #56	; 0x38
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	200000cc 	.word	0x200000cc
 8001ccc:	40000800 	.word	0x40000800

08001cd0 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001cd4:	4b0d      	ldr	r3, [pc, #52]	; (8001d0c <MX_TIM10_Init+0x3c>)
 8001cd6:	4a0e      	ldr	r2, [pc, #56]	; (8001d10 <MX_TIM10_Init+0x40>)
 8001cd8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 100;
 8001cda:	4b0c      	ldr	r3, [pc, #48]	; (8001d0c <MX_TIM10_Init+0x3c>)
 8001cdc:	2264      	movs	r2, #100	; 0x64
 8001cde:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ce0:	4b0a      	ldr	r3, [pc, #40]	; (8001d0c <MX_TIM10_Init+0x3c>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 100;
 8001ce6:	4b09      	ldr	r3, [pc, #36]	; (8001d0c <MX_TIM10_Init+0x3c>)
 8001ce8:	2264      	movs	r2, #100	; 0x64
 8001cea:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cec:	4b07      	ldr	r3, [pc, #28]	; (8001d0c <MX_TIM10_Init+0x3c>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cf2:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <MX_TIM10_Init+0x3c>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001cf8:	4804      	ldr	r0, [pc, #16]	; (8001d0c <MX_TIM10_Init+0x3c>)
 8001cfa:	f002 fbb9 	bl	8004470 <HAL_TIM_Base_Init>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <MX_TIM10_Init+0x38>
  {
    Error_Handler();
 8001d04:	f000 f9d6 	bl	80020b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001d08:	bf00      	nop
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	2000010c 	.word	0x2000010c
 8001d10:	40014400 	.word	0x40014400

08001d14 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d18:	4b11      	ldr	r3, [pc, #68]	; (8001d60 <MX_USART2_UART_Init+0x4c>)
 8001d1a:	4a12      	ldr	r2, [pc, #72]	; (8001d64 <MX_USART2_UART_Init+0x50>)
 8001d1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d1e:	4b10      	ldr	r3, [pc, #64]	; (8001d60 <MX_USART2_UART_Init+0x4c>)
 8001d20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d26:	4b0e      	ldr	r3, [pc, #56]	; (8001d60 <MX_USART2_UART_Init+0x4c>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d2c:	4b0c      	ldr	r3, [pc, #48]	; (8001d60 <MX_USART2_UART_Init+0x4c>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d32:	4b0b      	ldr	r3, [pc, #44]	; (8001d60 <MX_USART2_UART_Init+0x4c>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d38:	4b09      	ldr	r3, [pc, #36]	; (8001d60 <MX_USART2_UART_Init+0x4c>)
 8001d3a:	220c      	movs	r2, #12
 8001d3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d3e:	4b08      	ldr	r3, [pc, #32]	; (8001d60 <MX_USART2_UART_Init+0x4c>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d44:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <MX_USART2_UART_Init+0x4c>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d4a:	4805      	ldr	r0, [pc, #20]	; (8001d60 <MX_USART2_UART_Init+0x4c>)
 8001d4c:	f003 fa66 	bl	800521c <HAL_UART_Init>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d56:	f000 f9ad 	bl	80020b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	200002a0 	.word	0x200002a0
 8001d64:	40004400 	.word	0x40004400

08001d68 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	607b      	str	r3, [r7, #4]
 8001d72:	4b17      	ldr	r3, [pc, #92]	; (8001dd0 <MX_DMA_Init+0x68>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	4a16      	ldr	r2, [pc, #88]	; (8001dd0 <MX_DMA_Init+0x68>)
 8001d78:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7e:	4b14      	ldr	r3, [pc, #80]	; (8001dd0 <MX_DMA_Init+0x68>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d86:	607b      	str	r3, [r7, #4]
 8001d88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	603b      	str	r3, [r7, #0]
 8001d8e:	4b10      	ldr	r3, [pc, #64]	; (8001dd0 <MX_DMA_Init+0x68>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	4a0f      	ldr	r2, [pc, #60]	; (8001dd0 <MX_DMA_Init+0x68>)
 8001d94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d98:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9a:	4b0d      	ldr	r3, [pc, #52]	; (8001dd0 <MX_DMA_Init+0x68>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001da2:	603b      	str	r3, [r7, #0]
 8001da4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001da6:	2200      	movs	r2, #0
 8001da8:	2100      	movs	r1, #0
 8001daa:	2011      	movs	r0, #17
 8001dac:	f001 f99b 	bl	80030e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001db0:	2011      	movs	r0, #17
 8001db2:	f001 f9b4 	bl	800311e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001db6:	2200      	movs	r2, #0
 8001db8:	2100      	movs	r1, #0
 8001dba:	2038      	movs	r0, #56	; 0x38
 8001dbc:	f001 f993 	bl	80030e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001dc0:	2038      	movs	r0, #56	; 0x38
 8001dc2:	f001 f9ac 	bl	800311e <HAL_NVIC_EnableIRQ>

}
 8001dc6:	bf00      	nop
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40023800 	.word	0x40023800

08001dd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b08a      	sub	sp, #40	; 0x28
 8001dd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dda:	f107 0314 	add.w	r3, r7, #20
 8001dde:	2200      	movs	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]
 8001de2:	605a      	str	r2, [r3, #4]
 8001de4:	609a      	str	r2, [r3, #8]
 8001de6:	60da      	str	r2, [r3, #12]
 8001de8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	613b      	str	r3, [r7, #16]
 8001dee:	4b62      	ldr	r3, [pc, #392]	; (8001f78 <MX_GPIO_Init+0x1a4>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	4a61      	ldr	r2, [pc, #388]	; (8001f78 <MX_GPIO_Init+0x1a4>)
 8001df4:	f043 0304 	orr.w	r3, r3, #4
 8001df8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dfa:	4b5f      	ldr	r3, [pc, #380]	; (8001f78 <MX_GPIO_Init+0x1a4>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfe:	f003 0304 	and.w	r3, r3, #4
 8001e02:	613b      	str	r3, [r7, #16]
 8001e04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	60fb      	str	r3, [r7, #12]
 8001e0a:	4b5b      	ldr	r3, [pc, #364]	; (8001f78 <MX_GPIO_Init+0x1a4>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	4a5a      	ldr	r2, [pc, #360]	; (8001f78 <MX_GPIO_Init+0x1a4>)
 8001e10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e14:	6313      	str	r3, [r2, #48]	; 0x30
 8001e16:	4b58      	ldr	r3, [pc, #352]	; (8001f78 <MX_GPIO_Init+0x1a4>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e22:	2300      	movs	r3, #0
 8001e24:	60bb      	str	r3, [r7, #8]
 8001e26:	4b54      	ldr	r3, [pc, #336]	; (8001f78 <MX_GPIO_Init+0x1a4>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	4a53      	ldr	r2, [pc, #332]	; (8001f78 <MX_GPIO_Init+0x1a4>)
 8001e2c:	f043 0301 	orr.w	r3, r3, #1
 8001e30:	6313      	str	r3, [r2, #48]	; 0x30
 8001e32:	4b51      	ldr	r3, [pc, #324]	; (8001f78 <MX_GPIO_Init+0x1a4>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	60bb      	str	r3, [r7, #8]
 8001e3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	607b      	str	r3, [r7, #4]
 8001e42:	4b4d      	ldr	r3, [pc, #308]	; (8001f78 <MX_GPIO_Init+0x1a4>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	4a4c      	ldr	r2, [pc, #304]	; (8001f78 <MX_GPIO_Init+0x1a4>)
 8001e48:	f043 0302 	orr.w	r3, r3, #2
 8001e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4e:	4b4a      	ldr	r3, [pc, #296]	; (8001f78 <MX_GPIO_Init+0x1a4>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	607b      	str	r3, [r7, #4]
 8001e58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	603b      	str	r3, [r7, #0]
 8001e5e:	4b46      	ldr	r3, [pc, #280]	; (8001f78 <MX_GPIO_Init+0x1a4>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	4a45      	ldr	r2, [pc, #276]	; (8001f78 <MX_GPIO_Init+0x1a4>)
 8001e64:	f043 0308 	orr.w	r3, r3, #8
 8001e68:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6a:	4b43      	ldr	r3, [pc, #268]	; (8001f78 <MX_GPIO_Init+0x1a4>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	f003 0308 	and.w	r3, r3, #8
 8001e72:	603b      	str	r3, [r7, #0]
 8001e74:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001e76:	2200      	movs	r2, #0
 8001e78:	f640 71ff 	movw	r1, #4095	; 0xfff
 8001e7c:	483f      	ldr	r0, [pc, #252]	; (8001f7c <MX_GPIO_Init+0x1a8>)
 8001e7e:	f001 fe7b 	bl	8003b78 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001e82:	2200      	movs	r2, #0
 8001e84:	2120      	movs	r1, #32
 8001e86:	483e      	ldr	r0, [pc, #248]	; (8001f80 <MX_GPIO_Init+0x1ac>)
 8001e88:	f001 fe76 	bl	8003b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e92:	483c      	ldr	r0, [pc, #240]	; (8001f84 <MX_GPIO_Init+0x1b0>)
 8001e94:	f001 fe70 	bl	8003b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e9e:	4b3a      	ldr	r3, [pc, #232]	; (8001f88 <MX_GPIO_Init+0x1b4>)
 8001ea0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001ea6:	f107 0314 	add.w	r3, r7, #20
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4833      	ldr	r0, [pc, #204]	; (8001f7c <MX_GPIO_Init+0x1a8>)
 8001eae:	f001 fce1 	bl	8003874 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7
                           PC8 PC9 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001eb2:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001eb6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ec4:	f107 0314 	add.w	r3, r7, #20
 8001ec8:	4619      	mov	r1, r3
 8001eca:	482c      	ldr	r0, [pc, #176]	; (8001f7c <MX_GPIO_Init+0x1a8>)
 8001ecc:	f001 fcd2 	bl	8003874 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA4 PA6 PA7
                           PA8 PA9 PA10 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7
 8001ed0:	f649 73d1 	movw	r3, #40913	; 0x9fd1
 8001ed4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eda:	2300      	movs	r3, #0
 8001edc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ede:	f107 0314 	add.w	r3, r7, #20
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4826      	ldr	r0, [pc, #152]	; (8001f80 <MX_GPIO_Init+0x1ac>)
 8001ee6:	f001 fcc5 	bl	8003874 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001eea:	2320      	movs	r3, #32
 8001eec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001efa:	f107 0314 	add.w	r3, r7, #20
 8001efe:	4619      	mov	r1, r3
 8001f00:	481f      	ldr	r0, [pc, #124]	; (8001f80 <MX_GPIO_Init+0x1ac>)
 8001f02:	f001 fcb7 	bl	8003874 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB12 PB13 PB14 PB15
                           PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8001f06:	f24f 4377 	movw	r3, #62583	; 0xf477
 8001f0a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f10:	2300      	movs	r3, #0
 8001f12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f14:	f107 0314 	add.w	r3, r7, #20
 8001f18:	4619      	mov	r1, r3
 8001f1a:	481a      	ldr	r0, [pc, #104]	; (8001f84 <MX_GPIO_Init+0x1b0>)
 8001f1c:	f001 fcaa 	bl	8003874 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001f20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f26:	2303      	movs	r3, #3
 8001f28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f2e:	f107 0314 	add.w	r3, r7, #20
 8001f32:	4619      	mov	r1, r3
 8001f34:	4811      	ldr	r0, [pc, #68]	; (8001f7c <MX_GPIO_Init+0x1a8>)
 8001f36:	f001 fc9d 	bl	8003874 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f3a:	2304      	movs	r3, #4
 8001f3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f42:	2300      	movs	r3, #0
 8001f44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f46:	f107 0314 	add.w	r3, r7, #20
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	480f      	ldr	r0, [pc, #60]	; (8001f8c <MX_GPIO_Init+0x1b8>)
 8001f4e:	f001 fc91 	bl	8003874 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_B_Pin */
  GPIO_InitStruct.Pin = LED_B_Pin;
 8001f52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f60:	2300      	movs	r3, #0
 8001f62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_B_GPIO_Port, &GPIO_InitStruct);
 8001f64:	f107 0314 	add.w	r3, r7, #20
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4806      	ldr	r0, [pc, #24]	; (8001f84 <MX_GPIO_Init+0x1b0>)
 8001f6c:	f001 fc82 	bl	8003874 <HAL_GPIO_Init>

}
 8001f70:	bf00      	nop
 8001f72:	3728      	adds	r7, #40	; 0x28
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40023800 	.word	0x40023800
 8001f7c:	40020800 	.word	0x40020800
 8001f80:	40020000 	.word	0x40020000
 8001f84:	40020400 	.word	0x40020400
 8001f88:	10210000 	.word	0x10210000
 8001f8c:	40020c00 	.word	0x40020c00

08001f90 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

//_______________________________________________________________________________________________________________________________________________________________________
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f90:	b590      	push	{r4, r7, lr}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim10 )
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4a2b      	ldr	r2, [pc, #172]	; (8002048 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d14f      	bne.n	8002040 <HAL_TIM_PeriodElapsedCallback+0xb0>
  {
    rotor = (rotor + 1) % 4;
 8001fa0:	4b2a      	ldr	r3, [pc, #168]	; (800204c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	425a      	negs	r2, r3
 8001faa:	f003 0303 	and.w	r3, r3, #3
 8001fae:	f002 0203 	and.w	r2, r2, #3
 8001fb2:	bf58      	it	pl
 8001fb4:	4253      	negpl	r3, r2
 8001fb6:	b2da      	uxtb	r2, r3
 8001fb8:	4b24      	ldr	r3, [pc, #144]	; (800204c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001fba:	701a      	strb	r2, [r3, #0]
	displayNumer(numersToDisplay[rotor], rotor, pointPosition[rotor]);
 8001fbc:	4b23      	ldr	r3, [pc, #140]	; (800204c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	4b22      	ldr	r3, [pc, #136]	; (8002050 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001fc6:	5c9b      	ldrb	r3, [r3, r2]
 8001fc8:	b2d8      	uxtb	r0, r3
 8001fca:	4b20      	ldr	r3, [pc, #128]	; (800204c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	b2d9      	uxtb	r1, r3
 8001fd0:	4b1e      	ldr	r3, [pc, #120]	; (800204c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	4b1e      	ldr	r3, [pc, #120]	; (8002054 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001fda:	5c9b      	ldrb	r3, [r3, r2]
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	461a      	mov	r2, r3
 8001fe0:	f7fe ff4c 	bl	8000e7c <displayNumer>

	// Update pomiaru
	if(ADCReady == 1) {
 8001fe4:	4b1c      	ldr	r3, [pc, #112]	; (8002058 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d128      	bne.n	8002040 <HAL_TIM_PeriodElapsedCallback+0xb0>
		uint16_t buffor = ADCValue;
 8001fee:	4b1b      	ldr	r3, [pc, #108]	; (800205c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001ff0:	881b      	ldrh	r3, [r3, #0]
 8001ff2:	81fb      	strh	r3, [r7, #14]
		convertDouble(buffor);
 8001ff4:	89fb      	ldrh	r3, [r7, #14]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7fe fa84 	bl	8000504 <__aeabi_ui2d>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	460c      	mov	r4, r1
 8002000:	ec44 3b10 	vmov	d0, r3, r4
 8002004:	f7ff fbf0 	bl	80017e8 <convertDouble>
		ADCReady = 0;
 8002008:	4b13      	ldr	r3, [pc, #76]	; (8002058 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800200a:	2200      	movs	r2, #0
 800200c:	701a      	strb	r2, [r3, #0]

		if(TXReady == 1) {
 800200e:	4b14      	ldr	r3, [pc, #80]	; (8002060 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	b2db      	uxtb	r3, r3
 8002014:	2b01      	cmp	r3, #1
 8002016:	d113      	bne.n	8002040 <HAL_TIM_PeriodElapsedCallback+0xb0>
			TxDataSize = snprintf(TxData, sizeof(TxData), "%d\n", buffor);
 8002018:	89fb      	ldrh	r3, [r7, #14]
 800201a:	4a12      	ldr	r2, [pc, #72]	; (8002064 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800201c:	210a      	movs	r1, #10
 800201e:	4812      	ldr	r0, [pc, #72]	; (8002068 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002020:	f004 f83a 	bl	8006098 <sniprintf>
 8002024:	4603      	mov	r3, r0
 8002026:	b29a      	uxth	r2, r3
 8002028:	4b10      	ldr	r3, [pc, #64]	; (800206c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800202a:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit_DMA(&huart2, TxData, TxDataSize);
 800202c:	4b0f      	ldr	r3, [pc, #60]	; (800206c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800202e:	881b      	ldrh	r3, [r3, #0]
 8002030:	461a      	mov	r2, r3
 8002032:	490d      	ldr	r1, [pc, #52]	; (8002068 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002034:	480e      	ldr	r0, [pc, #56]	; (8002070 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8002036:	f003 f93f 	bl	80052b8 <HAL_UART_Transmit_DMA>
			TXReady = 0;
 800203a:	4b09      	ldr	r3, [pc, #36]	; (8002060 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800203c:	2200      	movs	r2, #0
 800203e:	701a      	strb	r2, [r3, #0]
		}
	}

  }
}
 8002040:	bf00      	nop
 8002042:	3714      	adds	r7, #20
 8002044:	46bd      	mov	sp, r7
 8002046:	bd90      	pop	{r4, r7, pc}
 8002048:	2000010c 	.word	0x2000010c
 800204c:	200000b8 	.word	0x200000b8
 8002050:	20000020 	.word	0x20000020
 8002054:	200000b4 	.word	0x200000b4
 8002058:	200002e0 	.word	0x200002e0
 800205c:	2000025e 	.word	0x2000025e
 8002060:	20000024 	.word	0x20000024
 8002064:	080068e4 	.word	0x080068e4
 8002068:	20000254 	.word	0x20000254
 800206c:	200000ba 	.word	0x200000ba
 8002070:	200002a0 	.word	0x200002a0

08002074 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
	ADCReady = 1;
 800207c:	4b04      	ldr	r3, [pc, #16]	; (8002090 <HAL_ADC_ConvCpltCallback+0x1c>)
 800207e:	2201      	movs	r2, #1
 8002080:	701a      	strb	r2, [r3, #0]
}
 8002082:	bf00      	nop
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	200002e0 	.word	0x200002e0

08002094 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
	TXReady = 1;
 800209c:	4b04      	ldr	r3, [pc, #16]	; (80020b0 <HAL_UART_TxCpltCallback+0x1c>)
 800209e:	2201      	movs	r2, #1
 80020a0:	701a      	strb	r2, [r3, #0]
}
 80020a2:	bf00      	nop
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	20000024 	.word	0x20000024

080020b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80020b8:	bf00      	nop
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
	...

080020c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ca:	2300      	movs	r3, #0
 80020cc:	607b      	str	r3, [r7, #4]
 80020ce:	4b10      	ldr	r3, [pc, #64]	; (8002110 <HAL_MspInit+0x4c>)
 80020d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d2:	4a0f      	ldr	r2, [pc, #60]	; (8002110 <HAL_MspInit+0x4c>)
 80020d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020d8:	6453      	str	r3, [r2, #68]	; 0x44
 80020da:	4b0d      	ldr	r3, [pc, #52]	; (8002110 <HAL_MspInit+0x4c>)
 80020dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020e2:	607b      	str	r3, [r7, #4]
 80020e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020e6:	2300      	movs	r3, #0
 80020e8:	603b      	str	r3, [r7, #0]
 80020ea:	4b09      	ldr	r3, [pc, #36]	; (8002110 <HAL_MspInit+0x4c>)
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	4a08      	ldr	r2, [pc, #32]	; (8002110 <HAL_MspInit+0x4c>)
 80020f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020f4:	6413      	str	r3, [r2, #64]	; 0x40
 80020f6:	4b06      	ldr	r3, [pc, #24]	; (8002110 <HAL_MspInit+0x4c>)
 80020f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020fe:	603b      	str	r3, [r7, #0]
 8002100:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002102:	2007      	movs	r0, #7
 8002104:	f000 ffe4 	bl	80030d0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002108:	bf00      	nop
 800210a:	3708      	adds	r7, #8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40023800 	.word	0x40023800

08002114 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b08a      	sub	sp, #40	; 0x28
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800211c:	f107 0314 	add.w	r3, r7, #20
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	605a      	str	r2, [r3, #4]
 8002126:	609a      	str	r2, [r3, #8]
 8002128:	60da      	str	r2, [r3, #12]
 800212a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a2f      	ldr	r2, [pc, #188]	; (80021f0 <HAL_ADC_MspInit+0xdc>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d157      	bne.n	80021e6 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002136:	2300      	movs	r3, #0
 8002138:	613b      	str	r3, [r7, #16]
 800213a:	4b2e      	ldr	r3, [pc, #184]	; (80021f4 <HAL_ADC_MspInit+0xe0>)
 800213c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213e:	4a2d      	ldr	r2, [pc, #180]	; (80021f4 <HAL_ADC_MspInit+0xe0>)
 8002140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002144:	6453      	str	r3, [r2, #68]	; 0x44
 8002146:	4b2b      	ldr	r3, [pc, #172]	; (80021f4 <HAL_ADC_MspInit+0xe0>)
 8002148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800214e:	613b      	str	r3, [r7, #16]
 8002150:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002152:	2300      	movs	r3, #0
 8002154:	60fb      	str	r3, [r7, #12]
 8002156:	4b27      	ldr	r3, [pc, #156]	; (80021f4 <HAL_ADC_MspInit+0xe0>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	4a26      	ldr	r2, [pc, #152]	; (80021f4 <HAL_ADC_MspInit+0xe0>)
 800215c:	f043 0301 	orr.w	r3, r3, #1
 8002160:	6313      	str	r3, [r2, #48]	; 0x30
 8002162:	4b24      	ldr	r3, [pc, #144]	; (80021f4 <HAL_ADC_MspInit+0xe0>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800216e:	2302      	movs	r3, #2
 8002170:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002172:	2303      	movs	r3, #3
 8002174:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002176:	2300      	movs	r3, #0
 8002178:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800217a:	f107 0314 	add.w	r3, r7, #20
 800217e:	4619      	mov	r1, r3
 8002180:	481d      	ldr	r0, [pc, #116]	; (80021f8 <HAL_ADC_MspInit+0xe4>)
 8002182:	f001 fb77 	bl	8003874 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002186:	4b1d      	ldr	r3, [pc, #116]	; (80021fc <HAL_ADC_MspInit+0xe8>)
 8002188:	4a1d      	ldr	r2, [pc, #116]	; (8002200 <HAL_ADC_MspInit+0xec>)
 800218a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800218c:	4b1b      	ldr	r3, [pc, #108]	; (80021fc <HAL_ADC_MspInit+0xe8>)
 800218e:	2200      	movs	r2, #0
 8002190:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002192:	4b1a      	ldr	r3, [pc, #104]	; (80021fc <HAL_ADC_MspInit+0xe8>)
 8002194:	2200      	movs	r2, #0
 8002196:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002198:	4b18      	ldr	r3, [pc, #96]	; (80021fc <HAL_ADC_MspInit+0xe8>)
 800219a:	2200      	movs	r2, #0
 800219c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800219e:	4b17      	ldr	r3, [pc, #92]	; (80021fc <HAL_ADC_MspInit+0xe8>)
 80021a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021a4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80021a6:	4b15      	ldr	r3, [pc, #84]	; (80021fc <HAL_ADC_MspInit+0xe8>)
 80021a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021ac:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80021ae:	4b13      	ldr	r3, [pc, #76]	; (80021fc <HAL_ADC_MspInit+0xe8>)
 80021b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021b4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80021b6:	4b11      	ldr	r3, [pc, #68]	; (80021fc <HAL_ADC_MspInit+0xe8>)
 80021b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021bc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80021be:	4b0f      	ldr	r3, [pc, #60]	; (80021fc <HAL_ADC_MspInit+0xe8>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021c4:	4b0d      	ldr	r3, [pc, #52]	; (80021fc <HAL_ADC_MspInit+0xe8>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80021ca:	480c      	ldr	r0, [pc, #48]	; (80021fc <HAL_ADC_MspInit+0xe8>)
 80021cc:	f000 ffc2 	bl	8003154 <HAL_DMA_Init>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80021d6:	f7ff ff6d 	bl	80020b4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a07      	ldr	r2, [pc, #28]	; (80021fc <HAL_ADC_MspInit+0xe8>)
 80021de:	639a      	str	r2, [r3, #56]	; 0x38
 80021e0:	4a06      	ldr	r2, [pc, #24]	; (80021fc <HAL_ADC_MspInit+0xe8>)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80021e6:	bf00      	nop
 80021e8:	3728      	adds	r7, #40	; 0x28
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40012000 	.word	0x40012000
 80021f4:	40023800 	.word	0x40023800
 80021f8:	40020000 	.word	0x40020000
 80021fc:	200001f4 	.word	0x200001f4
 8002200:	40026410 	.word	0x40026410

08002204 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b08c      	sub	sp, #48	; 0x30
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800220c:	f107 031c 	add.w	r3, r7, #28
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	605a      	str	r2, [r3, #4]
 8002216:	609a      	str	r2, [r3, #8]
 8002218:	60da      	str	r2, [r3, #12]
 800221a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002224:	d116      	bne.n	8002254 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002226:	2300      	movs	r3, #0
 8002228:	61bb      	str	r3, [r7, #24]
 800222a:	4b37      	ldr	r3, [pc, #220]	; (8002308 <HAL_TIM_Base_MspInit+0x104>)
 800222c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222e:	4a36      	ldr	r2, [pc, #216]	; (8002308 <HAL_TIM_Base_MspInit+0x104>)
 8002230:	f043 0301 	orr.w	r3, r3, #1
 8002234:	6413      	str	r3, [r2, #64]	; 0x40
 8002236:	4b34      	ldr	r3, [pc, #208]	; (8002308 <HAL_TIM_Base_MspInit+0x104>)
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	61bb      	str	r3, [r7, #24]
 8002240:	69bb      	ldr	r3, [r7, #24]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002242:	2200      	movs	r2, #0
 8002244:	2100      	movs	r1, #0
 8002246:	201c      	movs	r0, #28
 8002248:	f000 ff4d 	bl	80030e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800224c:	201c      	movs	r0, #28
 800224e:	f000 ff66 	bl	800311e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8002252:	e054      	b.n	80022fe <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM4)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a2c      	ldr	r2, [pc, #176]	; (800230c <HAL_TIM_Base_MspInit+0x108>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d134      	bne.n	80022c8 <HAL_TIM_Base_MspInit+0xc4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800225e:	2300      	movs	r3, #0
 8002260:	617b      	str	r3, [r7, #20]
 8002262:	4b29      	ldr	r3, [pc, #164]	; (8002308 <HAL_TIM_Base_MspInit+0x104>)
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002266:	4a28      	ldr	r2, [pc, #160]	; (8002308 <HAL_TIM_Base_MspInit+0x104>)
 8002268:	f043 0304 	orr.w	r3, r3, #4
 800226c:	6413      	str	r3, [r2, #64]	; 0x40
 800226e:	4b26      	ldr	r3, [pc, #152]	; (8002308 <HAL_TIM_Base_MspInit+0x104>)
 8002270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002272:	f003 0304 	and.w	r3, r3, #4
 8002276:	617b      	str	r3, [r7, #20]
 8002278:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800227a:	2300      	movs	r3, #0
 800227c:	613b      	str	r3, [r7, #16]
 800227e:	4b22      	ldr	r3, [pc, #136]	; (8002308 <HAL_TIM_Base_MspInit+0x104>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	4a21      	ldr	r2, [pc, #132]	; (8002308 <HAL_TIM_Base_MspInit+0x104>)
 8002284:	f043 0302 	orr.w	r3, r3, #2
 8002288:	6313      	str	r3, [r2, #48]	; 0x30
 800228a:	4b1f      	ldr	r3, [pc, #124]	; (8002308 <HAL_TIM_Base_MspInit+0x104>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	613b      	str	r3, [r7, #16]
 8002294:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002296:	2380      	movs	r3, #128	; 0x80
 8002298:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800229a:	2302      	movs	r3, #2
 800229c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229e:	2300      	movs	r3, #0
 80022a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a2:	2300      	movs	r3, #0
 80022a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80022a6:	2302      	movs	r3, #2
 80022a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022aa:	f107 031c 	add.w	r3, r7, #28
 80022ae:	4619      	mov	r1, r3
 80022b0:	4817      	ldr	r0, [pc, #92]	; (8002310 <HAL_TIM_Base_MspInit+0x10c>)
 80022b2:	f001 fadf 	bl	8003874 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80022b6:	2200      	movs	r2, #0
 80022b8:	2100      	movs	r1, #0
 80022ba:	201e      	movs	r0, #30
 80022bc:	f000 ff13 	bl	80030e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80022c0:	201e      	movs	r0, #30
 80022c2:	f000 ff2c 	bl	800311e <HAL_NVIC_EnableIRQ>
}
 80022c6:	e01a      	b.n	80022fe <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM10)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a11      	ldr	r2, [pc, #68]	; (8002314 <HAL_TIM_Base_MspInit+0x110>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d115      	bne.n	80022fe <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80022d2:	2300      	movs	r3, #0
 80022d4:	60fb      	str	r3, [r7, #12]
 80022d6:	4b0c      	ldr	r3, [pc, #48]	; (8002308 <HAL_TIM_Base_MspInit+0x104>)
 80022d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022da:	4a0b      	ldr	r2, [pc, #44]	; (8002308 <HAL_TIM_Base_MspInit+0x104>)
 80022dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022e0:	6453      	str	r3, [r2, #68]	; 0x44
 80022e2:	4b09      	ldr	r3, [pc, #36]	; (8002308 <HAL_TIM_Base_MspInit+0x104>)
 80022e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ea:	60fb      	str	r3, [r7, #12]
 80022ec:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80022ee:	2200      	movs	r2, #0
 80022f0:	2100      	movs	r1, #0
 80022f2:	2019      	movs	r0, #25
 80022f4:	f000 fef7 	bl	80030e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80022f8:	2019      	movs	r0, #25
 80022fa:	f000 ff10 	bl	800311e <HAL_NVIC_EnableIRQ>
}
 80022fe:	bf00      	nop
 8002300:	3730      	adds	r7, #48	; 0x30
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	40023800 	.word	0x40023800
 800230c:	40000800 	.word	0x40000800
 8002310:	40020400 	.word	0x40020400
 8002314:	40014400 	.word	0x40014400

08002318 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b088      	sub	sp, #32
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002320:	f107 030c 	add.w	r3, r7, #12
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	605a      	str	r2, [r3, #4]
 800232a:	609a      	str	r2, [r3, #8]
 800232c:	60da      	str	r2, [r3, #12]
 800232e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a12      	ldr	r2, [pc, #72]	; (8002380 <HAL_TIM_MspPostInit+0x68>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d11e      	bne.n	8002378 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800233a:	2300      	movs	r3, #0
 800233c:	60bb      	str	r3, [r7, #8]
 800233e:	4b11      	ldr	r3, [pc, #68]	; (8002384 <HAL_TIM_MspPostInit+0x6c>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	4a10      	ldr	r2, [pc, #64]	; (8002384 <HAL_TIM_MspPostInit+0x6c>)
 8002344:	f043 0302 	orr.w	r3, r3, #2
 8002348:	6313      	str	r3, [r2, #48]	; 0x30
 800234a:	4b0e      	ldr	r3, [pc, #56]	; (8002384 <HAL_TIM_MspPostInit+0x6c>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	60bb      	str	r3, [r7, #8]
 8002354:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002356:	f44f 7300 	mov.w	r3, #512	; 0x200
 800235a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235c:	2302      	movs	r3, #2
 800235e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002360:	2300      	movs	r3, #0
 8002362:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002364:	2300      	movs	r3, #0
 8002366:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002368:	2302      	movs	r3, #2
 800236a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800236c:	f107 030c 	add.w	r3, r7, #12
 8002370:	4619      	mov	r1, r3
 8002372:	4805      	ldr	r0, [pc, #20]	; (8002388 <HAL_TIM_MspPostInit+0x70>)
 8002374:	f001 fa7e 	bl	8003874 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002378:	bf00      	nop
 800237a:	3720      	adds	r7, #32
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40000800 	.word	0x40000800
 8002384:	40023800 	.word	0x40023800
 8002388:	40020400 	.word	0x40020400

0800238c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b08a      	sub	sp, #40	; 0x28
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002394:	f107 0314 	add.w	r3, r7, #20
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	605a      	str	r2, [r3, #4]
 800239e:	609a      	str	r2, [r3, #8]
 80023a0:	60da      	str	r2, [r3, #12]
 80023a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a34      	ldr	r2, [pc, #208]	; (800247c <HAL_UART_MspInit+0xf0>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d161      	bne.n	8002472 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80023ae:	2300      	movs	r3, #0
 80023b0:	613b      	str	r3, [r7, #16]
 80023b2:	4b33      	ldr	r3, [pc, #204]	; (8002480 <HAL_UART_MspInit+0xf4>)
 80023b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b6:	4a32      	ldr	r2, [pc, #200]	; (8002480 <HAL_UART_MspInit+0xf4>)
 80023b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023bc:	6413      	str	r3, [r2, #64]	; 0x40
 80023be:	4b30      	ldr	r3, [pc, #192]	; (8002480 <HAL_UART_MspInit+0xf4>)
 80023c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c6:	613b      	str	r3, [r7, #16]
 80023c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ca:	2300      	movs	r3, #0
 80023cc:	60fb      	str	r3, [r7, #12]
 80023ce:	4b2c      	ldr	r3, [pc, #176]	; (8002480 <HAL_UART_MspInit+0xf4>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	4a2b      	ldr	r2, [pc, #172]	; (8002480 <HAL_UART_MspInit+0xf4>)
 80023d4:	f043 0301 	orr.w	r3, r3, #1
 80023d8:	6313      	str	r3, [r2, #48]	; 0x30
 80023da:	4b29      	ldr	r3, [pc, #164]	; (8002480 <HAL_UART_MspInit+0xf4>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	60fb      	str	r3, [r7, #12]
 80023e4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80023e6:	230c      	movs	r3, #12
 80023e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ea:	2302      	movs	r3, #2
 80023ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ee:	2300      	movs	r3, #0
 80023f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023f2:	2303      	movs	r3, #3
 80023f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023f6:	2307      	movs	r3, #7
 80023f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023fa:	f107 0314 	add.w	r3, r7, #20
 80023fe:	4619      	mov	r1, r3
 8002400:	4820      	ldr	r0, [pc, #128]	; (8002484 <HAL_UART_MspInit+0xf8>)
 8002402:	f001 fa37 	bl	8003874 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002406:	4b20      	ldr	r3, [pc, #128]	; (8002488 <HAL_UART_MspInit+0xfc>)
 8002408:	4a20      	ldr	r2, [pc, #128]	; (800248c <HAL_UART_MspInit+0x100>)
 800240a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800240c:	4b1e      	ldr	r3, [pc, #120]	; (8002488 <HAL_UART_MspInit+0xfc>)
 800240e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002412:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002414:	4b1c      	ldr	r3, [pc, #112]	; (8002488 <HAL_UART_MspInit+0xfc>)
 8002416:	2240      	movs	r2, #64	; 0x40
 8002418:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800241a:	4b1b      	ldr	r3, [pc, #108]	; (8002488 <HAL_UART_MspInit+0xfc>)
 800241c:	2200      	movs	r2, #0
 800241e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002420:	4b19      	ldr	r3, [pc, #100]	; (8002488 <HAL_UART_MspInit+0xfc>)
 8002422:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002426:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002428:	4b17      	ldr	r3, [pc, #92]	; (8002488 <HAL_UART_MspInit+0xfc>)
 800242a:	2200      	movs	r2, #0
 800242c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800242e:	4b16      	ldr	r3, [pc, #88]	; (8002488 <HAL_UART_MspInit+0xfc>)
 8002430:	2200      	movs	r2, #0
 8002432:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002434:	4b14      	ldr	r3, [pc, #80]	; (8002488 <HAL_UART_MspInit+0xfc>)
 8002436:	2200      	movs	r2, #0
 8002438:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800243a:	4b13      	ldr	r3, [pc, #76]	; (8002488 <HAL_UART_MspInit+0xfc>)
 800243c:	2200      	movs	r2, #0
 800243e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002440:	4b11      	ldr	r3, [pc, #68]	; (8002488 <HAL_UART_MspInit+0xfc>)
 8002442:	2200      	movs	r2, #0
 8002444:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002446:	4810      	ldr	r0, [pc, #64]	; (8002488 <HAL_UART_MspInit+0xfc>)
 8002448:	f000 fe84 	bl	8003154 <HAL_DMA_Init>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8002452:	f7ff fe2f 	bl	80020b4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a0b      	ldr	r2, [pc, #44]	; (8002488 <HAL_UART_MspInit+0xfc>)
 800245a:	631a      	str	r2, [r3, #48]	; 0x30
 800245c:	4a0a      	ldr	r2, [pc, #40]	; (8002488 <HAL_UART_MspInit+0xfc>)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002462:	2200      	movs	r2, #0
 8002464:	2100      	movs	r1, #0
 8002466:	2026      	movs	r0, #38	; 0x26
 8002468:	f000 fe3d 	bl	80030e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800246c:	2026      	movs	r0, #38	; 0x26
 800246e:	f000 fe56 	bl	800311e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002472:	bf00      	nop
 8002474:	3728      	adds	r7, #40	; 0x28
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	40004400 	.word	0x40004400
 8002480:	40023800 	.word	0x40023800
 8002484:	40020000 	.word	0x40020000
 8002488:	20000194 	.word	0x20000194
 800248c:	400260a0 	.word	0x400260a0

08002490 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002494:	bf00      	nop
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr

0800249e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800249e:	b480      	push	{r7}
 80024a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024a2:	e7fe      	b.n	80024a2 <HardFault_Handler+0x4>

080024a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024a8:	e7fe      	b.n	80024a8 <MemManage_Handler+0x4>

080024aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024aa:	b480      	push	{r7}
 80024ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024ae:	e7fe      	b.n	80024ae <BusFault_Handler+0x4>

080024b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024b4:	e7fe      	b.n	80024b4 <UsageFault_Handler+0x4>

080024b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024b6:	b480      	push	{r7}
 80024b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024ba:	bf00      	nop
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024c8:	bf00      	nop
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024d2:	b480      	push	{r7}
 80024d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024d6:	bf00      	nop
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024e4:	f000 f906 	bl	80026f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024e8:	bf00      	nop
 80024ea:	bd80      	pop	{r7, pc}

080024ec <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80024f0:	4802      	ldr	r0, [pc, #8]	; (80024fc <DMA1_Stream6_IRQHandler+0x10>)
 80024f2:	f000 ff57 	bl	80033a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80024f6:	bf00      	nop
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	20000194 	.word	0x20000194

08002500 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002504:	4802      	ldr	r0, [pc, #8]	; (8002510 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002506:	f002 f88d 	bl	8004624 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800250a:	bf00      	nop
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	2000010c 	.word	0x2000010c

08002514 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002518:	4802      	ldr	r0, [pc, #8]	; (8002524 <TIM2_IRQHandler+0x10>)
 800251a:	f002 f883 	bl	8004624 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800251e:	bf00      	nop
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	20000260 	.word	0x20000260

08002528 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800252c:	4802      	ldr	r0, [pc, #8]	; (8002538 <TIM4_IRQHandler+0x10>)
 800252e:	f002 f879 	bl	8004624 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002532:	bf00      	nop
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	200000cc 	.word	0x200000cc

0800253c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002540:	4802      	ldr	r0, [pc, #8]	; (800254c <USART2_IRQHandler+0x10>)
 8002542:	f002 ff25 	bl	8005390 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002546:	bf00      	nop
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	200002a0 	.word	0x200002a0

08002550 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002554:	4802      	ldr	r0, [pc, #8]	; (8002560 <DMA2_Stream0_IRQHandler+0x10>)
 8002556:	f000 ff25 	bl	80033a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800255a:	bf00      	nop
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	200001f4 	.word	0x200001f4

08002564 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800256c:	4a14      	ldr	r2, [pc, #80]	; (80025c0 <_sbrk+0x5c>)
 800256e:	4b15      	ldr	r3, [pc, #84]	; (80025c4 <_sbrk+0x60>)
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002578:	4b13      	ldr	r3, [pc, #76]	; (80025c8 <_sbrk+0x64>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d102      	bne.n	8002586 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002580:	4b11      	ldr	r3, [pc, #68]	; (80025c8 <_sbrk+0x64>)
 8002582:	4a12      	ldr	r2, [pc, #72]	; (80025cc <_sbrk+0x68>)
 8002584:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002586:	4b10      	ldr	r3, [pc, #64]	; (80025c8 <_sbrk+0x64>)
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4413      	add	r3, r2
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	429a      	cmp	r2, r3
 8002592:	d207      	bcs.n	80025a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002594:	f003 fd4e 	bl	8006034 <__errno>
 8002598:	4602      	mov	r2, r0
 800259a:	230c      	movs	r3, #12
 800259c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800259e:	f04f 33ff 	mov.w	r3, #4294967295
 80025a2:	e009      	b.n	80025b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025a4:	4b08      	ldr	r3, [pc, #32]	; (80025c8 <_sbrk+0x64>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025aa:	4b07      	ldr	r3, [pc, #28]	; (80025c8 <_sbrk+0x64>)
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4413      	add	r3, r2
 80025b2:	4a05      	ldr	r2, [pc, #20]	; (80025c8 <_sbrk+0x64>)
 80025b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025b6:	68fb      	ldr	r3, [r7, #12]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3718      	adds	r7, #24
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	20020000 	.word	0x20020000
 80025c4:	00000400 	.word	0x00000400
 80025c8:	200000c0 	.word	0x200000c0
 80025cc:	200002f0 	.word	0x200002f0

080025d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025d4:	4b08      	ldr	r3, [pc, #32]	; (80025f8 <SystemInit+0x28>)
 80025d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025da:	4a07      	ldr	r2, [pc, #28]	; (80025f8 <SystemInit+0x28>)
 80025dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80025e4:	4b04      	ldr	r3, [pc, #16]	; (80025f8 <SystemInit+0x28>)
 80025e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80025ea:	609a      	str	r2, [r3, #8]
#endif
}
 80025ec:	bf00      	nop
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	e000ed00 	.word	0xe000ed00

080025fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80025fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002634 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002600:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002602:	e003      	b.n	800260c <LoopCopyDataInit>

08002604 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002604:	4b0c      	ldr	r3, [pc, #48]	; (8002638 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002606:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002608:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800260a:	3104      	adds	r1, #4

0800260c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800260c:	480b      	ldr	r0, [pc, #44]	; (800263c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800260e:	4b0c      	ldr	r3, [pc, #48]	; (8002640 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002610:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002612:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002614:	d3f6      	bcc.n	8002604 <CopyDataInit>
  ldr  r2, =_sbss
 8002616:	4a0b      	ldr	r2, [pc, #44]	; (8002644 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002618:	e002      	b.n	8002620 <LoopFillZerobss>

0800261a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800261a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800261c:	f842 3b04 	str.w	r3, [r2], #4

08002620 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002620:	4b09      	ldr	r3, [pc, #36]	; (8002648 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002622:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002624:	d3f9      	bcc.n	800261a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002626:	f7ff ffd3 	bl	80025d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800262a:	f003 fd09 	bl	8006040 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800262e:	f7ff f98d 	bl	800194c <main>
  bx  lr    
 8002632:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002634:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002638:	08006954 	.word	0x08006954
  ldr  r0, =_sdata
 800263c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002640:	20000098 	.word	0x20000098
  ldr  r2, =_sbss
 8002644:	20000098 	.word	0x20000098
  ldr  r3, = _ebss
 8002648:	200002ec 	.word	0x200002ec

0800264c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800264c:	e7fe      	b.n	800264c <ADC_IRQHandler>
	...

08002650 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002654:	4b0e      	ldr	r3, [pc, #56]	; (8002690 <HAL_Init+0x40>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a0d      	ldr	r2, [pc, #52]	; (8002690 <HAL_Init+0x40>)
 800265a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800265e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002660:	4b0b      	ldr	r3, [pc, #44]	; (8002690 <HAL_Init+0x40>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a0a      	ldr	r2, [pc, #40]	; (8002690 <HAL_Init+0x40>)
 8002666:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800266a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800266c:	4b08      	ldr	r3, [pc, #32]	; (8002690 <HAL_Init+0x40>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a07      	ldr	r2, [pc, #28]	; (8002690 <HAL_Init+0x40>)
 8002672:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002676:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002678:	2003      	movs	r0, #3
 800267a:	f000 fd29 	bl	80030d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800267e:	2000      	movs	r0, #0
 8002680:	f000 f808 	bl	8002694 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002684:	f7ff fd1e 	bl	80020c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	40023c00 	.word	0x40023c00

08002694 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800269c:	4b12      	ldr	r3, [pc, #72]	; (80026e8 <HAL_InitTick+0x54>)
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	4b12      	ldr	r3, [pc, #72]	; (80026ec <HAL_InitTick+0x58>)
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	4619      	mov	r1, r3
 80026a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80026ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b2:	4618      	mov	r0, r3
 80026b4:	f000 fd41 	bl	800313a <HAL_SYSTICK_Config>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e00e      	b.n	80026e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2b0f      	cmp	r3, #15
 80026c6:	d80a      	bhi.n	80026de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026c8:	2200      	movs	r2, #0
 80026ca:	6879      	ldr	r1, [r7, #4]
 80026cc:	f04f 30ff 	mov.w	r0, #4294967295
 80026d0:	f000 fd09 	bl	80030e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026d4:	4a06      	ldr	r2, [pc, #24]	; (80026f0 <HAL_InitTick+0x5c>)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026da:	2300      	movs	r3, #0
 80026dc:	e000      	b.n	80026e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3708      	adds	r7, #8
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	20000028 	.word	0x20000028
 80026ec:	20000030 	.word	0x20000030
 80026f0:	2000002c 	.word	0x2000002c

080026f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026f8:	4b06      	ldr	r3, [pc, #24]	; (8002714 <HAL_IncTick+0x20>)
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	461a      	mov	r2, r3
 80026fe:	4b06      	ldr	r3, [pc, #24]	; (8002718 <HAL_IncTick+0x24>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4413      	add	r3, r2
 8002704:	4a04      	ldr	r2, [pc, #16]	; (8002718 <HAL_IncTick+0x24>)
 8002706:	6013      	str	r3, [r2, #0]
}
 8002708:	bf00      	nop
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	20000030 	.word	0x20000030
 8002718:	200002e4 	.word	0x200002e4

0800271c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  return uwTick;
 8002720:	4b03      	ldr	r3, [pc, #12]	; (8002730 <HAL_GetTick+0x14>)
 8002722:	681b      	ldr	r3, [r3, #0]
}
 8002724:	4618      	mov	r0, r3
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	200002e4 	.word	0x200002e4

08002734 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800273c:	f7ff ffee 	bl	800271c <HAL_GetTick>
 8002740:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800274c:	d005      	beq.n	800275a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800274e:	4b09      	ldr	r3, [pc, #36]	; (8002774 <HAL_Delay+0x40>)
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	461a      	mov	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	4413      	add	r3, r2
 8002758:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800275a:	bf00      	nop
 800275c:	f7ff ffde 	bl	800271c <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	429a      	cmp	r2, r3
 800276a:	d8f7      	bhi.n	800275c <HAL_Delay+0x28>
  {
  }
}
 800276c:	bf00      	nop
 800276e:	3710      	adds	r7, #16
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	20000030 	.word	0x20000030

08002778 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002780:	2300      	movs	r3, #0
 8002782:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d101      	bne.n	800278e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e033      	b.n	80027f6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002792:	2b00      	cmp	r3, #0
 8002794:	d109      	bne.n	80027aa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f7ff fcbc 	bl	8002114 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ae:	f003 0310 	and.w	r3, r3, #16
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d118      	bne.n	80027e8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80027be:	f023 0302 	bic.w	r3, r3, #2
 80027c2:	f043 0202 	orr.w	r2, r3, #2
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 fa32 	bl	8002c34 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027da:	f023 0303 	bic.w	r3, r3, #3
 80027de:	f043 0201 	orr.w	r2, r3, #1
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	641a      	str	r2, [r3, #64]	; 0x40
 80027e6:	e001      	b.n	80027ec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80027f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3710      	adds	r7, #16
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
	...

08002800 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b086      	sub	sp, #24
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800280c:	2300      	movs	r3, #0
 800280e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002816:	2b01      	cmp	r3, #1
 8002818:	d101      	bne.n	800281e <HAL_ADC_Start_DMA+0x1e>
 800281a:	2302      	movs	r3, #2
 800281c:	e0b1      	b.n	8002982 <HAL_ADC_Start_DMA+0x182>
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2201      	movs	r2, #1
 8002822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	2b01      	cmp	r3, #1
 8002832:	d018      	beq.n	8002866 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	689a      	ldr	r2, [r3, #8]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f042 0201 	orr.w	r2, r2, #1
 8002842:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002844:	4b51      	ldr	r3, [pc, #324]	; (800298c <HAL_ADC_Start_DMA+0x18c>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a51      	ldr	r2, [pc, #324]	; (8002990 <HAL_ADC_Start_DMA+0x190>)
 800284a:	fba2 2303 	umull	r2, r3, r2, r3
 800284e:	0c9a      	lsrs	r2, r3, #18
 8002850:	4613      	mov	r3, r2
 8002852:	005b      	lsls	r3, r3, #1
 8002854:	4413      	add	r3, r2
 8002856:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002858:	e002      	b.n	8002860 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	3b01      	subs	r3, #1
 800285e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d1f9      	bne.n	800285a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f003 0301 	and.w	r3, r3, #1
 8002870:	2b01      	cmp	r3, #1
 8002872:	f040 8085 	bne.w	8002980 <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800287e:	f023 0301 	bic.w	r3, r3, #1
 8002882:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002894:	2b00      	cmp	r3, #0
 8002896:	d007      	beq.n	80028a8 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80028a0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028b4:	d106      	bne.n	80028c4 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ba:	f023 0206 	bic.w	r2, r3, #6
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	645a      	str	r2, [r3, #68]	; 0x44
 80028c2:	e002      	b.n	80028ca <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028d2:	4b30      	ldr	r3, [pc, #192]	; (8002994 <HAL_ADC_Start_DMA+0x194>)
 80028d4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028da:	4a2f      	ldr	r2, [pc, #188]	; (8002998 <HAL_ADC_Start_DMA+0x198>)
 80028dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e2:	4a2e      	ldr	r2, [pc, #184]	; (800299c <HAL_ADC_Start_DMA+0x19c>)
 80028e4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ea:	4a2d      	ldr	r2, [pc, #180]	; (80029a0 <HAL_ADC_Start_DMA+0x1a0>)
 80028ec:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80028f6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	685a      	ldr	r2, [r3, #4]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002906:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	689a      	ldr	r2, [r3, #8]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002916:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	334c      	adds	r3, #76	; 0x4c
 8002922:	4619      	mov	r1, r3
 8002924:	68ba      	ldr	r2, [r7, #8]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f000 fcc2 	bl	80032b0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f003 031f 	and.w	r3, r3, #31
 8002934:	2b00      	cmp	r3, #0
 8002936:	d10f      	bne.n	8002958 <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d11c      	bne.n	8002980 <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002954:	609a      	str	r2, [r3, #8]
 8002956:	e013      	b.n	8002980 <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a11      	ldr	r2, [pc, #68]	; (80029a4 <HAL_ADC_Start_DMA+0x1a4>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d10e      	bne.n	8002980 <HAL_ADC_Start_DMA+0x180>
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d107      	bne.n	8002980 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	689a      	ldr	r2, [r3, #8]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800297e:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3718      	adds	r7, #24
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	20000028 	.word	0x20000028
 8002990:	431bde83 	.word	0x431bde83
 8002994:	40012300 	.word	0x40012300
 8002998:	08002e2d 	.word	0x08002e2d
 800299c:	08002ee7 	.word	0x08002ee7
 80029a0:	08002f03 	.word	0x08002f03
 80029a4:	40012000 	.word	0x40012000

080029a8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80029b0:	bf00      	nop
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80029da:	2300      	movs	r3, #0
 80029dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d101      	bne.n	80029ec <HAL_ADC_ConfigChannel+0x1c>
 80029e8:	2302      	movs	r3, #2
 80029ea:	e113      	b.n	8002c14 <HAL_ADC_ConfigChannel+0x244>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2b09      	cmp	r3, #9
 80029fa:	d925      	bls.n	8002a48 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68d9      	ldr	r1, [r3, #12]
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	461a      	mov	r2, r3
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	4413      	add	r3, r2
 8002a10:	3b1e      	subs	r3, #30
 8002a12:	2207      	movs	r2, #7
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	43da      	mvns	r2, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	400a      	ands	r2, r1
 8002a20:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	68d9      	ldr	r1, [r3, #12]
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	689a      	ldr	r2, [r3, #8]
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	4618      	mov	r0, r3
 8002a34:	4603      	mov	r3, r0
 8002a36:	005b      	lsls	r3, r3, #1
 8002a38:	4403      	add	r3, r0
 8002a3a:	3b1e      	subs	r3, #30
 8002a3c:	409a      	lsls	r2, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	430a      	orrs	r2, r1
 8002a44:	60da      	str	r2, [r3, #12]
 8002a46:	e022      	b.n	8002a8e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	6919      	ldr	r1, [r3, #16]
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	461a      	mov	r2, r3
 8002a56:	4613      	mov	r3, r2
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	4413      	add	r3, r2
 8002a5c:	2207      	movs	r2, #7
 8002a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a62:	43da      	mvns	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	400a      	ands	r2, r1
 8002a6a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	6919      	ldr	r1, [r3, #16]
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	689a      	ldr	r2, [r3, #8]
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	4603      	mov	r3, r0
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	4403      	add	r3, r0
 8002a84:	409a      	lsls	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	2b06      	cmp	r3, #6
 8002a94:	d824      	bhi.n	8002ae0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685a      	ldr	r2, [r3, #4]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	4413      	add	r3, r2
 8002aa6:	3b05      	subs	r3, #5
 8002aa8:	221f      	movs	r2, #31
 8002aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002aae:	43da      	mvns	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	400a      	ands	r2, r1
 8002ab6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685a      	ldr	r2, [r3, #4]
 8002aca:	4613      	mov	r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	4413      	add	r3, r2
 8002ad0:	3b05      	subs	r3, #5
 8002ad2:	fa00 f203 	lsl.w	r2, r0, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	430a      	orrs	r2, r1
 8002adc:	635a      	str	r2, [r3, #52]	; 0x34
 8002ade:	e04c      	b.n	8002b7a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	2b0c      	cmp	r3, #12
 8002ae6:	d824      	bhi.n	8002b32 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685a      	ldr	r2, [r3, #4]
 8002af2:	4613      	mov	r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4413      	add	r3, r2
 8002af8:	3b23      	subs	r3, #35	; 0x23
 8002afa:	221f      	movs	r2, #31
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	43da      	mvns	r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	400a      	ands	r2, r1
 8002b08:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	4618      	mov	r0, r3
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685a      	ldr	r2, [r3, #4]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	4413      	add	r3, r2
 8002b22:	3b23      	subs	r3, #35	; 0x23
 8002b24:	fa00 f203 	lsl.w	r2, r0, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	631a      	str	r2, [r3, #48]	; 0x30
 8002b30:	e023      	b.n	8002b7a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685a      	ldr	r2, [r3, #4]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	4413      	add	r3, r2
 8002b42:	3b41      	subs	r3, #65	; 0x41
 8002b44:	221f      	movs	r2, #31
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	43da      	mvns	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	400a      	ands	r2, r1
 8002b52:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	4618      	mov	r0, r3
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685a      	ldr	r2, [r3, #4]
 8002b66:	4613      	mov	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	4413      	add	r3, r2
 8002b6c:	3b41      	subs	r3, #65	; 0x41
 8002b6e:	fa00 f203 	lsl.w	r2, r0, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	430a      	orrs	r2, r1
 8002b78:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b7a:	4b29      	ldr	r3, [pc, #164]	; (8002c20 <HAL_ADC_ConfigChannel+0x250>)
 8002b7c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a28      	ldr	r2, [pc, #160]	; (8002c24 <HAL_ADC_ConfigChannel+0x254>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d10f      	bne.n	8002ba8 <HAL_ADC_ConfigChannel+0x1d8>
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2b12      	cmp	r3, #18
 8002b8e:	d10b      	bne.n	8002ba8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a1d      	ldr	r2, [pc, #116]	; (8002c24 <HAL_ADC_ConfigChannel+0x254>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d12b      	bne.n	8002c0a <HAL_ADC_ConfigChannel+0x23a>
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a1c      	ldr	r2, [pc, #112]	; (8002c28 <HAL_ADC_ConfigChannel+0x258>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d003      	beq.n	8002bc4 <HAL_ADC_ConfigChannel+0x1f4>
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2b11      	cmp	r3, #17
 8002bc2:	d122      	bne.n	8002c0a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a11      	ldr	r2, [pc, #68]	; (8002c28 <HAL_ADC_ConfigChannel+0x258>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d111      	bne.n	8002c0a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002be6:	4b11      	ldr	r3, [pc, #68]	; (8002c2c <HAL_ADC_ConfigChannel+0x25c>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a11      	ldr	r2, [pc, #68]	; (8002c30 <HAL_ADC_ConfigChannel+0x260>)
 8002bec:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf0:	0c9a      	lsrs	r2, r3, #18
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	4413      	add	r3, r2
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002bfc:	e002      	b.n	8002c04 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	3b01      	subs	r3, #1
 8002c02:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1f9      	bne.n	8002bfe <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002c12:	2300      	movs	r3, #0
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3714      	adds	r7, #20
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr
 8002c20:	40012300 	.word	0x40012300
 8002c24:	40012000 	.word	0x40012000
 8002c28:	10000012 	.word	0x10000012
 8002c2c:	20000028 	.word	0x20000028
 8002c30:	431bde83 	.word	0x431bde83

08002c34 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b085      	sub	sp, #20
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c3c:	4b79      	ldr	r3, [pc, #484]	; (8002e24 <ADC_Init+0x1f0>)
 8002c3e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	685a      	ldr	r2, [r3, #4]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	431a      	orrs	r2, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	685a      	ldr	r2, [r3, #4]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	6859      	ldr	r1, [r3, #4]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	021a      	lsls	r2, r3, #8
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	685a      	ldr	r2, [r3, #4]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002c8c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	6859      	ldr	r1, [r3, #4]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689a      	ldr	r2, [r3, #8]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	689a      	ldr	r2, [r3, #8]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	6899      	ldr	r1, [r3, #8]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	68da      	ldr	r2, [r3, #12]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc6:	4a58      	ldr	r2, [pc, #352]	; (8002e28 <ADC_Init+0x1f4>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d022      	beq.n	8002d12 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	689a      	ldr	r2, [r3, #8]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002cda:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6899      	ldr	r1, [r3, #8]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	430a      	orrs	r2, r1
 8002cec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	689a      	ldr	r2, [r3, #8]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002cfc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	6899      	ldr	r1, [r3, #8]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	609a      	str	r2, [r3, #8]
 8002d10:	e00f      	b.n	8002d32 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	689a      	ldr	r2, [r3, #8]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	689a      	ldr	r2, [r3, #8]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d30:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	689a      	ldr	r2, [r3, #8]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f022 0202 	bic.w	r2, r2, #2
 8002d40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	6899      	ldr	r1, [r3, #8]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	7e1b      	ldrb	r3, [r3, #24]
 8002d4c:	005a      	lsls	r2, r3, #1
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	430a      	orrs	r2, r1
 8002d54:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d01b      	beq.n	8002d98 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	685a      	ldr	r2, [r3, #4]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d6e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	685a      	ldr	r2, [r3, #4]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002d7e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	6859      	ldr	r1, [r3, #4]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	035a      	lsls	r2, r3, #13
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	430a      	orrs	r2, r1
 8002d94:	605a      	str	r2, [r3, #4]
 8002d96:	e007      	b.n	8002da8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	685a      	ldr	r2, [r3, #4]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002da6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002db6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	69db      	ldr	r3, [r3, #28]
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	051a      	lsls	r2, r3, #20
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	689a      	ldr	r2, [r3, #8]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002ddc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	6899      	ldr	r1, [r3, #8]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002dea:	025a      	lsls	r2, r3, #9
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	430a      	orrs	r2, r1
 8002df2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	689a      	ldr	r2, [r3, #8]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	6899      	ldr	r1, [r3, #8]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	029a      	lsls	r2, r3, #10
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	430a      	orrs	r2, r1
 8002e16:	609a      	str	r2, [r3, #8]
}
 8002e18:	bf00      	nop
 8002e1a:	3714      	adds	r7, #20
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr
 8002e24:	40012300 	.word	0x40012300
 8002e28:	0f000001 	.word	0x0f000001

08002e2c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e38:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d13c      	bne.n	8002ec0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d12b      	bne.n	8002eb8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d127      	bne.n	8002eb8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e6e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d006      	beq.n	8002e84 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d119      	bne.n	8002eb8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	685a      	ldr	r2, [r3, #4]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f022 0220 	bic.w	r2, r2, #32
 8002e92:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e98:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d105      	bne.n	8002eb8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb0:	f043 0201 	orr.w	r2, r3, #1
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002eb8:	68f8      	ldr	r0, [r7, #12]
 8002eba:	f7ff f8db 	bl	8002074 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002ebe:	e00e      	b.n	8002ede <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec4:	f003 0310 	and.w	r3, r3, #16
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d003      	beq.n	8002ed4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002ecc:	68f8      	ldr	r0, [r7, #12]
 8002ece:	f7ff fd75 	bl	80029bc <HAL_ADC_ErrorCallback>
}
 8002ed2:	e004      	b.n	8002ede <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	4798      	blx	r3
}
 8002ede:	bf00      	nop
 8002ee0:	3710      	adds	r7, #16
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b084      	sub	sp, #16
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002ef4:	68f8      	ldr	r0, [r7, #12]
 8002ef6:	f7ff fd57 	bl	80029a8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002efa:	bf00      	nop
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b084      	sub	sp, #16
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f0e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2240      	movs	r2, #64	; 0x40
 8002f14:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f1a:	f043 0204 	orr.w	r2, r3, #4
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002f22:	68f8      	ldr	r0, [r7, #12]
 8002f24:	f7ff fd4a 	bl	80029bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f28:	bf00      	nop
 8002f2a:	3710      	adds	r7, #16
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f003 0307 	and.w	r3, r3, #7
 8002f3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f40:	4b0c      	ldr	r3, [pc, #48]	; (8002f74 <__NVIC_SetPriorityGrouping+0x44>)
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f46:	68ba      	ldr	r2, [r7, #8]
 8002f48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f62:	4a04      	ldr	r2, [pc, #16]	; (8002f74 <__NVIC_SetPriorityGrouping+0x44>)
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	60d3      	str	r3, [r2, #12]
}
 8002f68:	bf00      	nop
 8002f6a:	3714      	adds	r7, #20
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr
 8002f74:	e000ed00 	.word	0xe000ed00

08002f78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f7c:	4b04      	ldr	r3, [pc, #16]	; (8002f90 <__NVIC_GetPriorityGrouping+0x18>)
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	0a1b      	lsrs	r3, r3, #8
 8002f82:	f003 0307 	and.w	r3, r3, #7
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr
 8002f90:	e000ed00 	.word	0xe000ed00

08002f94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	db0b      	blt.n	8002fbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fa6:	79fb      	ldrb	r3, [r7, #7]
 8002fa8:	f003 021f 	and.w	r2, r3, #31
 8002fac:	4907      	ldr	r1, [pc, #28]	; (8002fcc <__NVIC_EnableIRQ+0x38>)
 8002fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb2:	095b      	lsrs	r3, r3, #5
 8002fb4:	2001      	movs	r0, #1
 8002fb6:	fa00 f202 	lsl.w	r2, r0, r2
 8002fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002fbe:	bf00      	nop
 8002fc0:	370c      	adds	r7, #12
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	e000e100 	.word	0xe000e100

08002fd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	6039      	str	r1, [r7, #0]
 8002fda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	db0a      	blt.n	8002ffa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	b2da      	uxtb	r2, r3
 8002fe8:	490c      	ldr	r1, [pc, #48]	; (800301c <__NVIC_SetPriority+0x4c>)
 8002fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fee:	0112      	lsls	r2, r2, #4
 8002ff0:	b2d2      	uxtb	r2, r2
 8002ff2:	440b      	add	r3, r1
 8002ff4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ff8:	e00a      	b.n	8003010 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	b2da      	uxtb	r2, r3
 8002ffe:	4908      	ldr	r1, [pc, #32]	; (8003020 <__NVIC_SetPriority+0x50>)
 8003000:	79fb      	ldrb	r3, [r7, #7]
 8003002:	f003 030f 	and.w	r3, r3, #15
 8003006:	3b04      	subs	r3, #4
 8003008:	0112      	lsls	r2, r2, #4
 800300a:	b2d2      	uxtb	r2, r2
 800300c:	440b      	add	r3, r1
 800300e:	761a      	strb	r2, [r3, #24]
}
 8003010:	bf00      	nop
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr
 800301c:	e000e100 	.word	0xe000e100
 8003020:	e000ed00 	.word	0xe000ed00

08003024 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003024:	b480      	push	{r7}
 8003026:	b089      	sub	sp, #36	; 0x24
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f003 0307 	and.w	r3, r3, #7
 8003036:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	f1c3 0307 	rsb	r3, r3, #7
 800303e:	2b04      	cmp	r3, #4
 8003040:	bf28      	it	cs
 8003042:	2304      	movcs	r3, #4
 8003044:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	3304      	adds	r3, #4
 800304a:	2b06      	cmp	r3, #6
 800304c:	d902      	bls.n	8003054 <NVIC_EncodePriority+0x30>
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	3b03      	subs	r3, #3
 8003052:	e000      	b.n	8003056 <NVIC_EncodePriority+0x32>
 8003054:	2300      	movs	r3, #0
 8003056:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003058:	f04f 32ff 	mov.w	r2, #4294967295
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	fa02 f303 	lsl.w	r3, r2, r3
 8003062:	43da      	mvns	r2, r3
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	401a      	ands	r2, r3
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800306c:	f04f 31ff 	mov.w	r1, #4294967295
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	fa01 f303 	lsl.w	r3, r1, r3
 8003076:	43d9      	mvns	r1, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800307c:	4313      	orrs	r3, r2
         );
}
 800307e:	4618      	mov	r0, r3
 8003080:	3724      	adds	r7, #36	; 0x24
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
	...

0800308c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	3b01      	subs	r3, #1
 8003098:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800309c:	d301      	bcc.n	80030a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800309e:	2301      	movs	r3, #1
 80030a0:	e00f      	b.n	80030c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030a2:	4a0a      	ldr	r2, [pc, #40]	; (80030cc <SysTick_Config+0x40>)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	3b01      	subs	r3, #1
 80030a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030aa:	210f      	movs	r1, #15
 80030ac:	f04f 30ff 	mov.w	r0, #4294967295
 80030b0:	f7ff ff8e 	bl	8002fd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030b4:	4b05      	ldr	r3, [pc, #20]	; (80030cc <SysTick_Config+0x40>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030ba:	4b04      	ldr	r3, [pc, #16]	; (80030cc <SysTick_Config+0x40>)
 80030bc:	2207      	movs	r2, #7
 80030be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3708      	adds	r7, #8
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	e000e010 	.word	0xe000e010

080030d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f7ff ff29 	bl	8002f30 <__NVIC_SetPriorityGrouping>
}
 80030de:	bf00      	nop
 80030e0:	3708      	adds	r7, #8
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030e6:	b580      	push	{r7, lr}
 80030e8:	b086      	sub	sp, #24
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	4603      	mov	r3, r0
 80030ee:	60b9      	str	r1, [r7, #8]
 80030f0:	607a      	str	r2, [r7, #4]
 80030f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030f4:	2300      	movs	r3, #0
 80030f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030f8:	f7ff ff3e 	bl	8002f78 <__NVIC_GetPriorityGrouping>
 80030fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	68b9      	ldr	r1, [r7, #8]
 8003102:	6978      	ldr	r0, [r7, #20]
 8003104:	f7ff ff8e 	bl	8003024 <NVIC_EncodePriority>
 8003108:	4602      	mov	r2, r0
 800310a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800310e:	4611      	mov	r1, r2
 8003110:	4618      	mov	r0, r3
 8003112:	f7ff ff5d 	bl	8002fd0 <__NVIC_SetPriority>
}
 8003116:	bf00      	nop
 8003118:	3718      	adds	r7, #24
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}

0800311e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800311e:	b580      	push	{r7, lr}
 8003120:	b082      	sub	sp, #8
 8003122:	af00      	add	r7, sp, #0
 8003124:	4603      	mov	r3, r0
 8003126:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800312c:	4618      	mov	r0, r3
 800312e:	f7ff ff31 	bl	8002f94 <__NVIC_EnableIRQ>
}
 8003132:	bf00      	nop
 8003134:	3708      	adds	r7, #8
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}

0800313a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800313a:	b580      	push	{r7, lr}
 800313c:	b082      	sub	sp, #8
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f7ff ffa2 	bl	800308c <SysTick_Config>
 8003148:	4603      	mov	r3, r0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3708      	adds	r7, #8
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
	...

08003154 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b086      	sub	sp, #24
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800315c:	2300      	movs	r3, #0
 800315e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003160:	f7ff fadc 	bl	800271c <HAL_GetTick>
 8003164:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d101      	bne.n	8003170 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e099      	b.n	80032a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2202      	movs	r2, #2
 800317c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f022 0201 	bic.w	r2, r2, #1
 800318e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003190:	e00f      	b.n	80031b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003192:	f7ff fac3 	bl	800271c <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	2b05      	cmp	r3, #5
 800319e:	d908      	bls.n	80031b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2220      	movs	r2, #32
 80031a4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2203      	movs	r2, #3
 80031aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e078      	b.n	80032a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0301 	and.w	r3, r3, #1
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d1e8      	bne.n	8003192 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80031c8:	697a      	ldr	r2, [r7, #20]
 80031ca:	4b38      	ldr	r3, [pc, #224]	; (80032ac <HAL_DMA_Init+0x158>)
 80031cc:	4013      	ands	r3, r2
 80031ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685a      	ldr	r2, [r3, #4]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	691b      	ldr	r3, [r3, #16]
 80031e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a1b      	ldr	r3, [r3, #32]
 80031fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031fe:	697a      	ldr	r2, [r7, #20]
 8003200:	4313      	orrs	r3, r2
 8003202:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003208:	2b04      	cmp	r3, #4
 800320a:	d107      	bne.n	800321c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003214:	4313      	orrs	r3, r2
 8003216:	697a      	ldr	r2, [r7, #20]
 8003218:	4313      	orrs	r3, r2
 800321a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	697a      	ldr	r2, [r7, #20]
 8003222:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	695b      	ldr	r3, [r3, #20]
 800322a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	f023 0307 	bic.w	r3, r3, #7
 8003232:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003238:	697a      	ldr	r2, [r7, #20]
 800323a:	4313      	orrs	r3, r2
 800323c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003242:	2b04      	cmp	r3, #4
 8003244:	d117      	bne.n	8003276 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324a:	697a      	ldr	r2, [r7, #20]
 800324c:	4313      	orrs	r3, r2
 800324e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003254:	2b00      	cmp	r3, #0
 8003256:	d00e      	beq.n	8003276 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 fa91 	bl	8003780 <DMA_CheckFifoParam>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d008      	beq.n	8003276 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2240      	movs	r2, #64	; 0x40
 8003268:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2201      	movs	r2, #1
 800326e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003272:	2301      	movs	r3, #1
 8003274:	e016      	b.n	80032a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	697a      	ldr	r2, [r7, #20]
 800327c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 fa48 	bl	8003714 <DMA_CalcBaseAndBitshift>
 8003284:	4603      	mov	r3, r0
 8003286:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800328c:	223f      	movs	r2, #63	; 0x3f
 800328e:	409a      	lsls	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2201      	movs	r2, #1
 800329e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80032a2:	2300      	movs	r3, #0
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3718      	adds	r7, #24
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	f010803f 	.word	0xf010803f

080032b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	607a      	str	r2, [r7, #4]
 80032bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032be:	2300      	movs	r3, #0
 80032c0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032c6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d101      	bne.n	80032d6 <HAL_DMA_Start_IT+0x26>
 80032d2:	2302      	movs	r3, #2
 80032d4:	e040      	b.n	8003358 <HAL_DMA_Start_IT+0xa8>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2201      	movs	r2, #1
 80032da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d12f      	bne.n	800334a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2202      	movs	r2, #2
 80032ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2200      	movs	r2, #0
 80032f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	68b9      	ldr	r1, [r7, #8]
 80032fe:	68f8      	ldr	r0, [r7, #12]
 8003300:	f000 f9da 	bl	80036b8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003308:	223f      	movs	r2, #63	; 0x3f
 800330a:	409a      	lsls	r2, r3
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f042 0216 	orr.w	r2, r2, #22
 800331e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003324:	2b00      	cmp	r3, #0
 8003326:	d007      	beq.n	8003338 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f042 0208 	orr.w	r2, r2, #8
 8003336:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f042 0201 	orr.w	r2, r2, #1
 8003346:	601a      	str	r2, [r3, #0]
 8003348:	e005      	b.n	8003356 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003352:	2302      	movs	r3, #2
 8003354:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003356:	7dfb      	ldrb	r3, [r7, #23]
}
 8003358:	4618      	mov	r0, r3
 800335a:	3718      	adds	r7, #24
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}

08003360 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800336e:	b2db      	uxtb	r3, r3
 8003370:	2b02      	cmp	r3, #2
 8003372:	d004      	beq.n	800337e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2280      	movs	r2, #128	; 0x80
 8003378:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e00c      	b.n	8003398 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2205      	movs	r2, #5
 8003382:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f022 0201 	bic.w	r2, r2, #1
 8003394:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003396:	2300      	movs	r3, #0
}
 8003398:	4618      	mov	r0, r3
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b086      	sub	sp, #24
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80033ac:	2300      	movs	r3, #0
 80033ae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80033b0:	4b92      	ldr	r3, [pc, #584]	; (80035fc <HAL_DMA_IRQHandler+0x258>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a92      	ldr	r2, [pc, #584]	; (8003600 <HAL_DMA_IRQHandler+0x25c>)
 80033b6:	fba2 2303 	umull	r2, r3, r2, r3
 80033ba:	0a9b      	lsrs	r3, r3, #10
 80033bc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ce:	2208      	movs	r2, #8
 80033d0:	409a      	lsls	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	4013      	ands	r3, r2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d01a      	beq.n	8003410 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0304 	and.w	r3, r3, #4
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d013      	beq.n	8003410 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f022 0204 	bic.w	r2, r2, #4
 80033f6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033fc:	2208      	movs	r2, #8
 80033fe:	409a      	lsls	r2, r3
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003408:	f043 0201 	orr.w	r2, r3, #1
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003414:	2201      	movs	r2, #1
 8003416:	409a      	lsls	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	4013      	ands	r3, r2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d012      	beq.n	8003446 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00b      	beq.n	8003446 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003432:	2201      	movs	r2, #1
 8003434:	409a      	lsls	r2, r3
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800343e:	f043 0202 	orr.w	r2, r3, #2
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800344a:	2204      	movs	r2, #4
 800344c:	409a      	lsls	r2, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	4013      	ands	r3, r2
 8003452:	2b00      	cmp	r3, #0
 8003454:	d012      	beq.n	800347c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0302 	and.w	r3, r3, #2
 8003460:	2b00      	cmp	r3, #0
 8003462:	d00b      	beq.n	800347c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003468:	2204      	movs	r2, #4
 800346a:	409a      	lsls	r2, r3
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003474:	f043 0204 	orr.w	r2, r3, #4
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003480:	2210      	movs	r2, #16
 8003482:	409a      	lsls	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	4013      	ands	r3, r2
 8003488:	2b00      	cmp	r3, #0
 800348a:	d043      	beq.n	8003514 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0308 	and.w	r3, r3, #8
 8003496:	2b00      	cmp	r3, #0
 8003498:	d03c      	beq.n	8003514 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800349e:	2210      	movs	r2, #16
 80034a0:	409a      	lsls	r2, r3
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d018      	beq.n	80034e6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d108      	bne.n	80034d4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d024      	beq.n	8003514 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	4798      	blx	r3
 80034d2:	e01f      	b.n	8003514 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d01b      	beq.n	8003514 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	4798      	blx	r3
 80034e4:	e016      	b.n	8003514 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d107      	bne.n	8003504 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f022 0208 	bic.w	r2, r2, #8
 8003502:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003508:	2b00      	cmp	r3, #0
 800350a:	d003      	beq.n	8003514 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003518:	2220      	movs	r2, #32
 800351a:	409a      	lsls	r2, r3
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	4013      	ands	r3, r2
 8003520:	2b00      	cmp	r3, #0
 8003522:	f000 808e 	beq.w	8003642 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0310 	and.w	r3, r3, #16
 8003530:	2b00      	cmp	r3, #0
 8003532:	f000 8086 	beq.w	8003642 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800353a:	2220      	movs	r2, #32
 800353c:	409a      	lsls	r2, r3
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b05      	cmp	r3, #5
 800354c:	d136      	bne.n	80035bc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f022 0216 	bic.w	r2, r2, #22
 800355c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	695a      	ldr	r2, [r3, #20]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800356c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003572:	2b00      	cmp	r3, #0
 8003574:	d103      	bne.n	800357e <HAL_DMA_IRQHandler+0x1da>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800357a:	2b00      	cmp	r3, #0
 800357c:	d007      	beq.n	800358e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f022 0208 	bic.w	r2, r2, #8
 800358c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003592:	223f      	movs	r2, #63	; 0x3f
 8003594:	409a      	lsls	r2, r3
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2201      	movs	r2, #1
 80035a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d07d      	beq.n	80036ae <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	4798      	blx	r3
        }
        return;
 80035ba:	e078      	b.n	80036ae <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d01c      	beq.n	8003604 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d108      	bne.n	80035ea <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d030      	beq.n	8003642 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	4798      	blx	r3
 80035e8:	e02b      	b.n	8003642 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d027      	beq.n	8003642 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	4798      	blx	r3
 80035fa:	e022      	b.n	8003642 <HAL_DMA_IRQHandler+0x29e>
 80035fc:	20000028 	.word	0x20000028
 8003600:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800360e:	2b00      	cmp	r3, #0
 8003610:	d10f      	bne.n	8003632 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f022 0210 	bic.w	r2, r2, #16
 8003620:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003636:	2b00      	cmp	r3, #0
 8003638:	d003      	beq.n	8003642 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003646:	2b00      	cmp	r3, #0
 8003648:	d032      	beq.n	80036b0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b00      	cmp	r3, #0
 8003654:	d022      	beq.n	800369c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2205      	movs	r2, #5
 800365a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f022 0201 	bic.w	r2, r2, #1
 800366c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	3301      	adds	r3, #1
 8003672:	60bb      	str	r3, [r7, #8]
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	429a      	cmp	r2, r3
 8003678:	d307      	bcc.n	800368a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0301 	and.w	r3, r3, #1
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1f2      	bne.n	800366e <HAL_DMA_IRQHandler+0x2ca>
 8003688:	e000      	b.n	800368c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800368a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d005      	beq.n	80036b0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	4798      	blx	r3
 80036ac:	e000      	b.n	80036b0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80036ae:	bf00      	nop
    }
  }
}
 80036b0:	3718      	adds	r7, #24
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop

080036b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b085      	sub	sp, #20
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
 80036c4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80036d4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	683a      	ldr	r2, [r7, #0]
 80036dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	2b40      	cmp	r3, #64	; 0x40
 80036e4:	d108      	bne.n	80036f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68ba      	ldr	r2, [r7, #8]
 80036f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80036f6:	e007      	b.n	8003708 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68ba      	ldr	r2, [r7, #8]
 80036fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	60da      	str	r2, [r3, #12]
}
 8003708:	bf00      	nop
 800370a:	3714      	adds	r7, #20
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003714:	b480      	push	{r7}
 8003716:	b085      	sub	sp, #20
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	b2db      	uxtb	r3, r3
 8003722:	3b10      	subs	r3, #16
 8003724:	4a14      	ldr	r2, [pc, #80]	; (8003778 <DMA_CalcBaseAndBitshift+0x64>)
 8003726:	fba2 2303 	umull	r2, r3, r2, r3
 800372a:	091b      	lsrs	r3, r3, #4
 800372c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800372e:	4a13      	ldr	r2, [pc, #76]	; (800377c <DMA_CalcBaseAndBitshift+0x68>)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	4413      	add	r3, r2
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	461a      	mov	r2, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2b03      	cmp	r3, #3
 8003740:	d909      	bls.n	8003756 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800374a:	f023 0303 	bic.w	r3, r3, #3
 800374e:	1d1a      	adds	r2, r3, #4
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	659a      	str	r2, [r3, #88]	; 0x58
 8003754:	e007      	b.n	8003766 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800375e:	f023 0303 	bic.w	r3, r3, #3
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800376a:	4618      	mov	r0, r3
 800376c:	3714      	adds	r7, #20
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	aaaaaaab 	.word	0xaaaaaaab
 800377c:	08006908 	.word	0x08006908

08003780 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003780:	b480      	push	{r7}
 8003782:	b085      	sub	sp, #20
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003788:	2300      	movs	r3, #0
 800378a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003790:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d11f      	bne.n	80037da <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	2b03      	cmp	r3, #3
 800379e:	d855      	bhi.n	800384c <DMA_CheckFifoParam+0xcc>
 80037a0:	a201      	add	r2, pc, #4	; (adr r2, 80037a8 <DMA_CheckFifoParam+0x28>)
 80037a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a6:	bf00      	nop
 80037a8:	080037b9 	.word	0x080037b9
 80037ac:	080037cb 	.word	0x080037cb
 80037b0:	080037b9 	.word	0x080037b9
 80037b4:	0800384d 	.word	0x0800384d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d045      	beq.n	8003850 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037c8:	e042      	b.n	8003850 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80037d2:	d13f      	bne.n	8003854 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037d8:	e03c      	b.n	8003854 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037e2:	d121      	bne.n	8003828 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	2b03      	cmp	r3, #3
 80037e8:	d836      	bhi.n	8003858 <DMA_CheckFifoParam+0xd8>
 80037ea:	a201      	add	r2, pc, #4	; (adr r2, 80037f0 <DMA_CheckFifoParam+0x70>)
 80037ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037f0:	08003801 	.word	0x08003801
 80037f4:	08003807 	.word	0x08003807
 80037f8:	08003801 	.word	0x08003801
 80037fc:	08003819 	.word	0x08003819
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	73fb      	strb	r3, [r7, #15]
      break;
 8003804:	e02f      	b.n	8003866 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d024      	beq.n	800385c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003816:	e021      	b.n	800385c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003820:	d11e      	bne.n	8003860 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003826:	e01b      	b.n	8003860 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	2b02      	cmp	r3, #2
 800382c:	d902      	bls.n	8003834 <DMA_CheckFifoParam+0xb4>
 800382e:	2b03      	cmp	r3, #3
 8003830:	d003      	beq.n	800383a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003832:	e018      	b.n	8003866 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	73fb      	strb	r3, [r7, #15]
      break;
 8003838:	e015      	b.n	8003866 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00e      	beq.n	8003864 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	73fb      	strb	r3, [r7, #15]
      break;
 800384a:	e00b      	b.n	8003864 <DMA_CheckFifoParam+0xe4>
      break;
 800384c:	bf00      	nop
 800384e:	e00a      	b.n	8003866 <DMA_CheckFifoParam+0xe6>
      break;
 8003850:	bf00      	nop
 8003852:	e008      	b.n	8003866 <DMA_CheckFifoParam+0xe6>
      break;
 8003854:	bf00      	nop
 8003856:	e006      	b.n	8003866 <DMA_CheckFifoParam+0xe6>
      break;
 8003858:	bf00      	nop
 800385a:	e004      	b.n	8003866 <DMA_CheckFifoParam+0xe6>
      break;
 800385c:	bf00      	nop
 800385e:	e002      	b.n	8003866 <DMA_CheckFifoParam+0xe6>
      break;   
 8003860:	bf00      	nop
 8003862:	e000      	b.n	8003866 <DMA_CheckFifoParam+0xe6>
      break;
 8003864:	bf00      	nop
    }
  } 
  
  return status; 
 8003866:	7bfb      	ldrb	r3, [r7, #15]
}
 8003868:	4618      	mov	r0, r3
 800386a:	3714      	adds	r7, #20
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003874:	b480      	push	{r7}
 8003876:	b089      	sub	sp, #36	; 0x24
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800387e:	2300      	movs	r3, #0
 8003880:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003882:	2300      	movs	r3, #0
 8003884:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003886:	2300      	movs	r3, #0
 8003888:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800388a:	2300      	movs	r3, #0
 800388c:	61fb      	str	r3, [r7, #28]
 800388e:	e159      	b.n	8003b44 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003890:	2201      	movs	r2, #1
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	fa02 f303 	lsl.w	r3, r2, r3
 8003898:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	4013      	ands	r3, r2
 80038a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038a4:	693a      	ldr	r2, [r7, #16]
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	f040 8148 	bne.w	8003b3e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d00b      	beq.n	80038ce <HAL_GPIO_Init+0x5a>
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d007      	beq.n	80038ce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80038c2:	2b11      	cmp	r3, #17
 80038c4:	d003      	beq.n	80038ce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	2b12      	cmp	r3, #18
 80038cc:	d130      	bne.n	8003930 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	005b      	lsls	r3, r3, #1
 80038d8:	2203      	movs	r2, #3
 80038da:	fa02 f303 	lsl.w	r3, r2, r3
 80038de:	43db      	mvns	r3, r3
 80038e0:	69ba      	ldr	r2, [r7, #24]
 80038e2:	4013      	ands	r3, r2
 80038e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	68da      	ldr	r2, [r3, #12]
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	fa02 f303 	lsl.w	r3, r2, r3
 80038f2:	69ba      	ldr	r2, [r7, #24]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	69ba      	ldr	r2, [r7, #24]
 80038fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003904:	2201      	movs	r2, #1
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	fa02 f303 	lsl.w	r3, r2, r3
 800390c:	43db      	mvns	r3, r3
 800390e:	69ba      	ldr	r2, [r7, #24]
 8003910:	4013      	ands	r3, r2
 8003912:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	091b      	lsrs	r3, r3, #4
 800391a:	f003 0201 	and.w	r2, r3, #1
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	fa02 f303 	lsl.w	r3, r2, r3
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	4313      	orrs	r3, r2
 8003928:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	69ba      	ldr	r2, [r7, #24]
 800392e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	005b      	lsls	r3, r3, #1
 800393a:	2203      	movs	r2, #3
 800393c:	fa02 f303 	lsl.w	r3, r2, r3
 8003940:	43db      	mvns	r3, r3
 8003942:	69ba      	ldr	r2, [r7, #24]
 8003944:	4013      	ands	r3, r2
 8003946:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	689a      	ldr	r2, [r3, #8]
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	005b      	lsls	r3, r3, #1
 8003950:	fa02 f303 	lsl.w	r3, r2, r3
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	4313      	orrs	r3, r2
 8003958:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	2b02      	cmp	r3, #2
 8003966:	d003      	beq.n	8003970 <HAL_GPIO_Init+0xfc>
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	2b12      	cmp	r3, #18
 800396e:	d123      	bne.n	80039b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	08da      	lsrs	r2, r3, #3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	3208      	adds	r2, #8
 8003978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800397c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	f003 0307 	and.w	r3, r3, #7
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	220f      	movs	r2, #15
 8003988:	fa02 f303 	lsl.w	r3, r2, r3
 800398c:	43db      	mvns	r3, r3
 800398e:	69ba      	ldr	r2, [r7, #24]
 8003990:	4013      	ands	r3, r2
 8003992:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	691a      	ldr	r2, [r3, #16]
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	f003 0307 	and.w	r3, r3, #7
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	fa02 f303 	lsl.w	r3, r2, r3
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	08da      	lsrs	r2, r3, #3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	3208      	adds	r2, #8
 80039b2:	69b9      	ldr	r1, [r7, #24]
 80039b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	005b      	lsls	r3, r3, #1
 80039c2:	2203      	movs	r2, #3
 80039c4:	fa02 f303 	lsl.w	r3, r2, r3
 80039c8:	43db      	mvns	r3, r3
 80039ca:	69ba      	ldr	r2, [r7, #24]
 80039cc:	4013      	ands	r3, r2
 80039ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f003 0203 	and.w	r2, r3, #3
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	005b      	lsls	r3, r3, #1
 80039dc:	fa02 f303 	lsl.w	r3, r2, r3
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f000 80a2 	beq.w	8003b3e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039fa:	2300      	movs	r3, #0
 80039fc:	60fb      	str	r3, [r7, #12]
 80039fe:	4b56      	ldr	r3, [pc, #344]	; (8003b58 <HAL_GPIO_Init+0x2e4>)
 8003a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a02:	4a55      	ldr	r2, [pc, #340]	; (8003b58 <HAL_GPIO_Init+0x2e4>)
 8003a04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a08:	6453      	str	r3, [r2, #68]	; 0x44
 8003a0a:	4b53      	ldr	r3, [pc, #332]	; (8003b58 <HAL_GPIO_Init+0x2e4>)
 8003a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a12:	60fb      	str	r3, [r7, #12]
 8003a14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a16:	4a51      	ldr	r2, [pc, #324]	; (8003b5c <HAL_GPIO_Init+0x2e8>)
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	089b      	lsrs	r3, r3, #2
 8003a1c:	3302      	adds	r3, #2
 8003a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	f003 0303 	and.w	r3, r3, #3
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	220f      	movs	r2, #15
 8003a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a32:	43db      	mvns	r3, r3
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	4013      	ands	r3, r2
 8003a38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a48      	ldr	r2, [pc, #288]	; (8003b60 <HAL_GPIO_Init+0x2ec>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d019      	beq.n	8003a76 <HAL_GPIO_Init+0x202>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a47      	ldr	r2, [pc, #284]	; (8003b64 <HAL_GPIO_Init+0x2f0>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d013      	beq.n	8003a72 <HAL_GPIO_Init+0x1fe>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a46      	ldr	r2, [pc, #280]	; (8003b68 <HAL_GPIO_Init+0x2f4>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d00d      	beq.n	8003a6e <HAL_GPIO_Init+0x1fa>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a45      	ldr	r2, [pc, #276]	; (8003b6c <HAL_GPIO_Init+0x2f8>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d007      	beq.n	8003a6a <HAL_GPIO_Init+0x1f6>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a44      	ldr	r2, [pc, #272]	; (8003b70 <HAL_GPIO_Init+0x2fc>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d101      	bne.n	8003a66 <HAL_GPIO_Init+0x1f2>
 8003a62:	2304      	movs	r3, #4
 8003a64:	e008      	b.n	8003a78 <HAL_GPIO_Init+0x204>
 8003a66:	2307      	movs	r3, #7
 8003a68:	e006      	b.n	8003a78 <HAL_GPIO_Init+0x204>
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e004      	b.n	8003a78 <HAL_GPIO_Init+0x204>
 8003a6e:	2302      	movs	r3, #2
 8003a70:	e002      	b.n	8003a78 <HAL_GPIO_Init+0x204>
 8003a72:	2301      	movs	r3, #1
 8003a74:	e000      	b.n	8003a78 <HAL_GPIO_Init+0x204>
 8003a76:	2300      	movs	r3, #0
 8003a78:	69fa      	ldr	r2, [r7, #28]
 8003a7a:	f002 0203 	and.w	r2, r2, #3
 8003a7e:	0092      	lsls	r2, r2, #2
 8003a80:	4093      	lsls	r3, r2
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a88:	4934      	ldr	r1, [pc, #208]	; (8003b5c <HAL_GPIO_Init+0x2e8>)
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	089b      	lsrs	r3, r3, #2
 8003a8e:	3302      	adds	r3, #2
 8003a90:	69ba      	ldr	r2, [r7, #24]
 8003a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a96:	4b37      	ldr	r3, [pc, #220]	; (8003b74 <HAL_GPIO_Init+0x300>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	43db      	mvns	r3, r3
 8003aa0:	69ba      	ldr	r2, [r7, #24]
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d003      	beq.n	8003aba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003ab2:	69ba      	ldr	r2, [r7, #24]
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003aba:	4a2e      	ldr	r2, [pc, #184]	; (8003b74 <HAL_GPIO_Init+0x300>)
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003ac0:	4b2c      	ldr	r3, [pc, #176]	; (8003b74 <HAL_GPIO_Init+0x300>)
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	43db      	mvns	r3, r3
 8003aca:	69ba      	ldr	r2, [r7, #24]
 8003acc:	4013      	ands	r3, r2
 8003ace:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d003      	beq.n	8003ae4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003adc:	69ba      	ldr	r2, [r7, #24]
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ae4:	4a23      	ldr	r2, [pc, #140]	; (8003b74 <HAL_GPIO_Init+0x300>)
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003aea:	4b22      	ldr	r3, [pc, #136]	; (8003b74 <HAL_GPIO_Init+0x300>)
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	43db      	mvns	r3, r3
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	4013      	ands	r3, r2
 8003af8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d003      	beq.n	8003b0e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003b06:	69ba      	ldr	r2, [r7, #24]
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b0e:	4a19      	ldr	r2, [pc, #100]	; (8003b74 <HAL_GPIO_Init+0x300>)
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b14:	4b17      	ldr	r3, [pc, #92]	; (8003b74 <HAL_GPIO_Init+0x300>)
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	43db      	mvns	r3, r3
 8003b1e:	69ba      	ldr	r2, [r7, #24]
 8003b20:	4013      	ands	r3, r2
 8003b22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d003      	beq.n	8003b38 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003b30:	69ba      	ldr	r2, [r7, #24]
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b38:	4a0e      	ldr	r2, [pc, #56]	; (8003b74 <HAL_GPIO_Init+0x300>)
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	3301      	adds	r3, #1
 8003b42:	61fb      	str	r3, [r7, #28]
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	2b0f      	cmp	r3, #15
 8003b48:	f67f aea2 	bls.w	8003890 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b4c:	bf00      	nop
 8003b4e:	3724      	adds	r7, #36	; 0x24
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr
 8003b58:	40023800 	.word	0x40023800
 8003b5c:	40013800 	.word	0x40013800
 8003b60:	40020000 	.word	0x40020000
 8003b64:	40020400 	.word	0x40020400
 8003b68:	40020800 	.word	0x40020800
 8003b6c:	40020c00 	.word	0x40020c00
 8003b70:	40021000 	.word	0x40021000
 8003b74:	40013c00 	.word	0x40013c00

08003b78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	460b      	mov	r3, r1
 8003b82:	807b      	strh	r3, [r7, #2]
 8003b84:	4613      	mov	r3, r2
 8003b86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b88:	787b      	ldrb	r3, [r7, #1]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d003      	beq.n	8003b96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b8e:	887a      	ldrh	r2, [r7, #2]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b94:	e003      	b.n	8003b9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b96:	887b      	ldrh	r3, [r7, #2]
 8003b98:	041a      	lsls	r2, r3, #16
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	619a      	str	r2, [r3, #24]
}
 8003b9e:	bf00      	nop
 8003ba0:	370c      	adds	r7, #12
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
	...

08003bac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b086      	sub	sp, #24
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d101      	bne.n	8003bbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e25b      	b.n	8004076 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0301 	and.w	r3, r3, #1
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d075      	beq.n	8003cb6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bca:	4ba3      	ldr	r3, [pc, #652]	; (8003e58 <HAL_RCC_OscConfig+0x2ac>)
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f003 030c 	and.w	r3, r3, #12
 8003bd2:	2b04      	cmp	r3, #4
 8003bd4:	d00c      	beq.n	8003bf0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bd6:	4ba0      	ldr	r3, [pc, #640]	; (8003e58 <HAL_RCC_OscConfig+0x2ac>)
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bde:	2b08      	cmp	r3, #8
 8003be0:	d112      	bne.n	8003c08 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003be2:	4b9d      	ldr	r3, [pc, #628]	; (8003e58 <HAL_RCC_OscConfig+0x2ac>)
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bee:	d10b      	bne.n	8003c08 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bf0:	4b99      	ldr	r3, [pc, #612]	; (8003e58 <HAL_RCC_OscConfig+0x2ac>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d05b      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x108>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d157      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e236      	b.n	8004076 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c10:	d106      	bne.n	8003c20 <HAL_RCC_OscConfig+0x74>
 8003c12:	4b91      	ldr	r3, [pc, #580]	; (8003e58 <HAL_RCC_OscConfig+0x2ac>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a90      	ldr	r2, [pc, #576]	; (8003e58 <HAL_RCC_OscConfig+0x2ac>)
 8003c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c1c:	6013      	str	r3, [r2, #0]
 8003c1e:	e01d      	b.n	8003c5c <HAL_RCC_OscConfig+0xb0>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c28:	d10c      	bne.n	8003c44 <HAL_RCC_OscConfig+0x98>
 8003c2a:	4b8b      	ldr	r3, [pc, #556]	; (8003e58 <HAL_RCC_OscConfig+0x2ac>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a8a      	ldr	r2, [pc, #552]	; (8003e58 <HAL_RCC_OscConfig+0x2ac>)
 8003c30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c34:	6013      	str	r3, [r2, #0]
 8003c36:	4b88      	ldr	r3, [pc, #544]	; (8003e58 <HAL_RCC_OscConfig+0x2ac>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a87      	ldr	r2, [pc, #540]	; (8003e58 <HAL_RCC_OscConfig+0x2ac>)
 8003c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c40:	6013      	str	r3, [r2, #0]
 8003c42:	e00b      	b.n	8003c5c <HAL_RCC_OscConfig+0xb0>
 8003c44:	4b84      	ldr	r3, [pc, #528]	; (8003e58 <HAL_RCC_OscConfig+0x2ac>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a83      	ldr	r2, [pc, #524]	; (8003e58 <HAL_RCC_OscConfig+0x2ac>)
 8003c4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c4e:	6013      	str	r3, [r2, #0]
 8003c50:	4b81      	ldr	r3, [pc, #516]	; (8003e58 <HAL_RCC_OscConfig+0x2ac>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a80      	ldr	r2, [pc, #512]	; (8003e58 <HAL_RCC_OscConfig+0x2ac>)
 8003c56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d013      	beq.n	8003c8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c64:	f7fe fd5a 	bl	800271c <HAL_GetTick>
 8003c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c6a:	e008      	b.n	8003c7e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c6c:	f7fe fd56 	bl	800271c <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	2b64      	cmp	r3, #100	; 0x64
 8003c78:	d901      	bls.n	8003c7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e1fb      	b.n	8004076 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c7e:	4b76      	ldr	r3, [pc, #472]	; (8003e58 <HAL_RCC_OscConfig+0x2ac>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d0f0      	beq.n	8003c6c <HAL_RCC_OscConfig+0xc0>
 8003c8a:	e014      	b.n	8003cb6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c8c:	f7fe fd46 	bl	800271c <HAL_GetTick>
 8003c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c92:	e008      	b.n	8003ca6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c94:	f7fe fd42 	bl	800271c <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	2b64      	cmp	r3, #100	; 0x64
 8003ca0:	d901      	bls.n	8003ca6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e1e7      	b.n	8004076 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ca6:	4b6c      	ldr	r3, [pc, #432]	; (8003e58 <HAL_RCC_OscConfig+0x2ac>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d1f0      	bne.n	8003c94 <HAL_RCC_OscConfig+0xe8>
 8003cb2:	e000      	b.n	8003cb6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0302 	and.w	r3, r3, #2
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d063      	beq.n	8003d8a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cc2:	4b65      	ldr	r3, [pc, #404]	; (8003e58 <HAL_RCC_OscConfig+0x2ac>)
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f003 030c 	and.w	r3, r3, #12
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00b      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cce:	4b62      	ldr	r3, [pc, #392]	; (8003e58 <HAL_RCC_OscConfig+0x2ac>)
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cd6:	2b08      	cmp	r3, #8
 8003cd8:	d11c      	bne.n	8003d14 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cda:	4b5f      	ldr	r3, [pc, #380]	; (8003e58 <HAL_RCC_OscConfig+0x2ac>)
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d116      	bne.n	8003d14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ce6:	4b5c      	ldr	r3, [pc, #368]	; (8003e58 <HAL_RCC_OscConfig+0x2ac>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0302 	and.w	r3, r3, #2
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d005      	beq.n	8003cfe <HAL_RCC_OscConfig+0x152>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d001      	beq.n	8003cfe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e1bb      	b.n	8004076 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cfe:	4b56      	ldr	r3, [pc, #344]	; (8003e58 <HAL_RCC_OscConfig+0x2ac>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	00db      	lsls	r3, r3, #3
 8003d0c:	4952      	ldr	r1, [pc, #328]	; (8003e58 <HAL_RCC_OscConfig+0x2ac>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d12:	e03a      	b.n	8003d8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d020      	beq.n	8003d5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d1c:	4b4f      	ldr	r3, [pc, #316]	; (8003e5c <HAL_RCC_OscConfig+0x2b0>)
 8003d1e:	2201      	movs	r2, #1
 8003d20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d22:	f7fe fcfb 	bl	800271c <HAL_GetTick>
 8003d26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d28:	e008      	b.n	8003d3c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d2a:	f7fe fcf7 	bl	800271c <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	d901      	bls.n	8003d3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e19c      	b.n	8004076 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d3c:	4b46      	ldr	r3, [pc, #280]	; (8003e58 <HAL_RCC_OscConfig+0x2ac>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0302 	and.w	r3, r3, #2
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d0f0      	beq.n	8003d2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d48:	4b43      	ldr	r3, [pc, #268]	; (8003e58 <HAL_RCC_OscConfig+0x2ac>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	00db      	lsls	r3, r3, #3
 8003d56:	4940      	ldr	r1, [pc, #256]	; (8003e58 <HAL_RCC_OscConfig+0x2ac>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	600b      	str	r3, [r1, #0]
 8003d5c:	e015      	b.n	8003d8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d5e:	4b3f      	ldr	r3, [pc, #252]	; (8003e5c <HAL_RCC_OscConfig+0x2b0>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d64:	f7fe fcda 	bl	800271c <HAL_GetTick>
 8003d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d6a:	e008      	b.n	8003d7e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d6c:	f7fe fcd6 	bl	800271c <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d901      	bls.n	8003d7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e17b      	b.n	8004076 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d7e:	4b36      	ldr	r3, [pc, #216]	; (8003e58 <HAL_RCC_OscConfig+0x2ac>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1f0      	bne.n	8003d6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0308 	and.w	r3, r3, #8
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d030      	beq.n	8003df8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	695b      	ldr	r3, [r3, #20]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d016      	beq.n	8003dcc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d9e:	4b30      	ldr	r3, [pc, #192]	; (8003e60 <HAL_RCC_OscConfig+0x2b4>)
 8003da0:	2201      	movs	r2, #1
 8003da2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003da4:	f7fe fcba 	bl	800271c <HAL_GetTick>
 8003da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003daa:	e008      	b.n	8003dbe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dac:	f7fe fcb6 	bl	800271c <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e15b      	b.n	8004076 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dbe:	4b26      	ldr	r3, [pc, #152]	; (8003e58 <HAL_RCC_OscConfig+0x2ac>)
 8003dc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d0f0      	beq.n	8003dac <HAL_RCC_OscConfig+0x200>
 8003dca:	e015      	b.n	8003df8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dcc:	4b24      	ldr	r3, [pc, #144]	; (8003e60 <HAL_RCC_OscConfig+0x2b4>)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dd2:	f7fe fca3 	bl	800271c <HAL_GetTick>
 8003dd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dd8:	e008      	b.n	8003dec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dda:	f7fe fc9f 	bl	800271c <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d901      	bls.n	8003dec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e144      	b.n	8004076 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dec:	4b1a      	ldr	r3, [pc, #104]	; (8003e58 <HAL_RCC_OscConfig+0x2ac>)
 8003dee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003df0:	f003 0302 	and.w	r3, r3, #2
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d1f0      	bne.n	8003dda <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0304 	and.w	r3, r3, #4
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	f000 80a0 	beq.w	8003f46 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e06:	2300      	movs	r3, #0
 8003e08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e0a:	4b13      	ldr	r3, [pc, #76]	; (8003e58 <HAL_RCC_OscConfig+0x2ac>)
 8003e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d10f      	bne.n	8003e36 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e16:	2300      	movs	r3, #0
 8003e18:	60bb      	str	r3, [r7, #8]
 8003e1a:	4b0f      	ldr	r3, [pc, #60]	; (8003e58 <HAL_RCC_OscConfig+0x2ac>)
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1e:	4a0e      	ldr	r2, [pc, #56]	; (8003e58 <HAL_RCC_OscConfig+0x2ac>)
 8003e20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e24:	6413      	str	r3, [r2, #64]	; 0x40
 8003e26:	4b0c      	ldr	r3, [pc, #48]	; (8003e58 <HAL_RCC_OscConfig+0x2ac>)
 8003e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e2e:	60bb      	str	r3, [r7, #8]
 8003e30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e32:	2301      	movs	r3, #1
 8003e34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e36:	4b0b      	ldr	r3, [pc, #44]	; (8003e64 <HAL_RCC_OscConfig+0x2b8>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d121      	bne.n	8003e86 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e42:	4b08      	ldr	r3, [pc, #32]	; (8003e64 <HAL_RCC_OscConfig+0x2b8>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a07      	ldr	r2, [pc, #28]	; (8003e64 <HAL_RCC_OscConfig+0x2b8>)
 8003e48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e4e:	f7fe fc65 	bl	800271c <HAL_GetTick>
 8003e52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e54:	e011      	b.n	8003e7a <HAL_RCC_OscConfig+0x2ce>
 8003e56:	bf00      	nop
 8003e58:	40023800 	.word	0x40023800
 8003e5c:	42470000 	.word	0x42470000
 8003e60:	42470e80 	.word	0x42470e80
 8003e64:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e68:	f7fe fc58 	bl	800271c <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d901      	bls.n	8003e7a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e0fd      	b.n	8004076 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e7a:	4b81      	ldr	r3, [pc, #516]	; (8004080 <HAL_RCC_OscConfig+0x4d4>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d0f0      	beq.n	8003e68 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d106      	bne.n	8003e9c <HAL_RCC_OscConfig+0x2f0>
 8003e8e:	4b7d      	ldr	r3, [pc, #500]	; (8004084 <HAL_RCC_OscConfig+0x4d8>)
 8003e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e92:	4a7c      	ldr	r2, [pc, #496]	; (8004084 <HAL_RCC_OscConfig+0x4d8>)
 8003e94:	f043 0301 	orr.w	r3, r3, #1
 8003e98:	6713      	str	r3, [r2, #112]	; 0x70
 8003e9a:	e01c      	b.n	8003ed6 <HAL_RCC_OscConfig+0x32a>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	2b05      	cmp	r3, #5
 8003ea2:	d10c      	bne.n	8003ebe <HAL_RCC_OscConfig+0x312>
 8003ea4:	4b77      	ldr	r3, [pc, #476]	; (8004084 <HAL_RCC_OscConfig+0x4d8>)
 8003ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea8:	4a76      	ldr	r2, [pc, #472]	; (8004084 <HAL_RCC_OscConfig+0x4d8>)
 8003eaa:	f043 0304 	orr.w	r3, r3, #4
 8003eae:	6713      	str	r3, [r2, #112]	; 0x70
 8003eb0:	4b74      	ldr	r3, [pc, #464]	; (8004084 <HAL_RCC_OscConfig+0x4d8>)
 8003eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb4:	4a73      	ldr	r2, [pc, #460]	; (8004084 <HAL_RCC_OscConfig+0x4d8>)
 8003eb6:	f043 0301 	orr.w	r3, r3, #1
 8003eba:	6713      	str	r3, [r2, #112]	; 0x70
 8003ebc:	e00b      	b.n	8003ed6 <HAL_RCC_OscConfig+0x32a>
 8003ebe:	4b71      	ldr	r3, [pc, #452]	; (8004084 <HAL_RCC_OscConfig+0x4d8>)
 8003ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec2:	4a70      	ldr	r2, [pc, #448]	; (8004084 <HAL_RCC_OscConfig+0x4d8>)
 8003ec4:	f023 0301 	bic.w	r3, r3, #1
 8003ec8:	6713      	str	r3, [r2, #112]	; 0x70
 8003eca:	4b6e      	ldr	r3, [pc, #440]	; (8004084 <HAL_RCC_OscConfig+0x4d8>)
 8003ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ece:	4a6d      	ldr	r2, [pc, #436]	; (8004084 <HAL_RCC_OscConfig+0x4d8>)
 8003ed0:	f023 0304 	bic.w	r3, r3, #4
 8003ed4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d015      	beq.n	8003f0a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ede:	f7fe fc1d 	bl	800271c <HAL_GetTick>
 8003ee2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ee4:	e00a      	b.n	8003efc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ee6:	f7fe fc19 	bl	800271c <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d901      	bls.n	8003efc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	e0bc      	b.n	8004076 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003efc:	4b61      	ldr	r3, [pc, #388]	; (8004084 <HAL_RCC_OscConfig+0x4d8>)
 8003efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f00:	f003 0302 	and.w	r3, r3, #2
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d0ee      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x33a>
 8003f08:	e014      	b.n	8003f34 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f0a:	f7fe fc07 	bl	800271c <HAL_GetTick>
 8003f0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f10:	e00a      	b.n	8003f28 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f12:	f7fe fc03 	bl	800271c <HAL_GetTick>
 8003f16:	4602      	mov	r2, r0
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d901      	bls.n	8003f28 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	e0a6      	b.n	8004076 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f28:	4b56      	ldr	r3, [pc, #344]	; (8004084 <HAL_RCC_OscConfig+0x4d8>)
 8003f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f2c:	f003 0302 	and.w	r3, r3, #2
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d1ee      	bne.n	8003f12 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f34:	7dfb      	ldrb	r3, [r7, #23]
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d105      	bne.n	8003f46 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f3a:	4b52      	ldr	r3, [pc, #328]	; (8004084 <HAL_RCC_OscConfig+0x4d8>)
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3e:	4a51      	ldr	r2, [pc, #324]	; (8004084 <HAL_RCC_OscConfig+0x4d8>)
 8003f40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f44:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	699b      	ldr	r3, [r3, #24]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	f000 8092 	beq.w	8004074 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f50:	4b4c      	ldr	r3, [pc, #304]	; (8004084 <HAL_RCC_OscConfig+0x4d8>)
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	f003 030c 	and.w	r3, r3, #12
 8003f58:	2b08      	cmp	r3, #8
 8003f5a:	d05c      	beq.n	8004016 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	699b      	ldr	r3, [r3, #24]
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d141      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f64:	4b48      	ldr	r3, [pc, #288]	; (8004088 <HAL_RCC_OscConfig+0x4dc>)
 8003f66:	2200      	movs	r2, #0
 8003f68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f6a:	f7fe fbd7 	bl	800271c <HAL_GetTick>
 8003f6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f70:	e008      	b.n	8003f84 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f72:	f7fe fbd3 	bl	800271c <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d901      	bls.n	8003f84 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e078      	b.n	8004076 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f84:	4b3f      	ldr	r3, [pc, #252]	; (8004084 <HAL_RCC_OscConfig+0x4d8>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d1f0      	bne.n	8003f72 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	69da      	ldr	r2, [r3, #28]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a1b      	ldr	r3, [r3, #32]
 8003f98:	431a      	orrs	r2, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9e:	019b      	lsls	r3, r3, #6
 8003fa0:	431a      	orrs	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa6:	085b      	lsrs	r3, r3, #1
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	041b      	lsls	r3, r3, #16
 8003fac:	431a      	orrs	r2, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb2:	061b      	lsls	r3, r3, #24
 8003fb4:	4933      	ldr	r1, [pc, #204]	; (8004084 <HAL_RCC_OscConfig+0x4d8>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fba:	4b33      	ldr	r3, [pc, #204]	; (8004088 <HAL_RCC_OscConfig+0x4dc>)
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc0:	f7fe fbac 	bl	800271c <HAL_GetTick>
 8003fc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fc6:	e008      	b.n	8003fda <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fc8:	f7fe fba8 	bl	800271c <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d901      	bls.n	8003fda <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e04d      	b.n	8004076 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fda:	4b2a      	ldr	r3, [pc, #168]	; (8004084 <HAL_RCC_OscConfig+0x4d8>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d0f0      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x41c>
 8003fe6:	e045      	b.n	8004074 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fe8:	4b27      	ldr	r3, [pc, #156]	; (8004088 <HAL_RCC_OscConfig+0x4dc>)
 8003fea:	2200      	movs	r2, #0
 8003fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fee:	f7fe fb95 	bl	800271c <HAL_GetTick>
 8003ff2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ff4:	e008      	b.n	8004008 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ff6:	f7fe fb91 	bl	800271c <HAL_GetTick>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	2b02      	cmp	r3, #2
 8004002:	d901      	bls.n	8004008 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	e036      	b.n	8004076 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004008:	4b1e      	ldr	r3, [pc, #120]	; (8004084 <HAL_RCC_OscConfig+0x4d8>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d1f0      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x44a>
 8004014:	e02e      	b.n	8004074 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	2b01      	cmp	r3, #1
 800401c:	d101      	bne.n	8004022 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e029      	b.n	8004076 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004022:	4b18      	ldr	r3, [pc, #96]	; (8004084 <HAL_RCC_OscConfig+0x4d8>)
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	69db      	ldr	r3, [r3, #28]
 8004032:	429a      	cmp	r2, r3
 8004034:	d11c      	bne.n	8004070 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004040:	429a      	cmp	r2, r3
 8004042:	d115      	bne.n	8004070 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800404a:	4013      	ands	r3, r2
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004050:	4293      	cmp	r3, r2
 8004052:	d10d      	bne.n	8004070 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800405e:	429a      	cmp	r2, r3
 8004060:	d106      	bne.n	8004070 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800406c:	429a      	cmp	r2, r3
 800406e:	d001      	beq.n	8004074 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e000      	b.n	8004076 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	3718      	adds	r7, #24
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	40007000 	.word	0x40007000
 8004084:	40023800 	.word	0x40023800
 8004088:	42470060 	.word	0x42470060

0800408c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d101      	bne.n	80040a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e0cc      	b.n	800423a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040a0:	4b68      	ldr	r3, [pc, #416]	; (8004244 <HAL_RCC_ClockConfig+0x1b8>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 030f 	and.w	r3, r3, #15
 80040a8:	683a      	ldr	r2, [r7, #0]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d90c      	bls.n	80040c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ae:	4b65      	ldr	r3, [pc, #404]	; (8004244 <HAL_RCC_ClockConfig+0x1b8>)
 80040b0:	683a      	ldr	r2, [r7, #0]
 80040b2:	b2d2      	uxtb	r2, r2
 80040b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040b6:	4b63      	ldr	r3, [pc, #396]	; (8004244 <HAL_RCC_ClockConfig+0x1b8>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 030f 	and.w	r3, r3, #15
 80040be:	683a      	ldr	r2, [r7, #0]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d001      	beq.n	80040c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e0b8      	b.n	800423a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0302 	and.w	r3, r3, #2
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d020      	beq.n	8004116 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0304 	and.w	r3, r3, #4
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d005      	beq.n	80040ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040e0:	4b59      	ldr	r3, [pc, #356]	; (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	4a58      	ldr	r2, [pc, #352]	; (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 80040e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0308 	and.w	r3, r3, #8
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d005      	beq.n	8004104 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040f8:	4b53      	ldr	r3, [pc, #332]	; (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	4a52      	ldr	r2, [pc, #328]	; (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 80040fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004102:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004104:	4b50      	ldr	r3, [pc, #320]	; (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	494d      	ldr	r1, [pc, #308]	; (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 8004112:	4313      	orrs	r3, r2
 8004114:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	2b00      	cmp	r3, #0
 8004120:	d044      	beq.n	80041ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	2b01      	cmp	r3, #1
 8004128:	d107      	bne.n	800413a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800412a:	4b47      	ldr	r3, [pc, #284]	; (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d119      	bne.n	800416a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e07f      	b.n	800423a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	2b02      	cmp	r3, #2
 8004140:	d003      	beq.n	800414a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004146:	2b03      	cmp	r3, #3
 8004148:	d107      	bne.n	800415a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800414a:	4b3f      	ldr	r3, [pc, #252]	; (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d109      	bne.n	800416a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e06f      	b.n	800423a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800415a:	4b3b      	ldr	r3, [pc, #236]	; (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0302 	and.w	r3, r3, #2
 8004162:	2b00      	cmp	r3, #0
 8004164:	d101      	bne.n	800416a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e067      	b.n	800423a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800416a:	4b37      	ldr	r3, [pc, #220]	; (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f023 0203 	bic.w	r2, r3, #3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	4934      	ldr	r1, [pc, #208]	; (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 8004178:	4313      	orrs	r3, r2
 800417a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800417c:	f7fe face 	bl	800271c <HAL_GetTick>
 8004180:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004182:	e00a      	b.n	800419a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004184:	f7fe faca 	bl	800271c <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004192:	4293      	cmp	r3, r2
 8004194:	d901      	bls.n	800419a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e04f      	b.n	800423a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800419a:	4b2b      	ldr	r3, [pc, #172]	; (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f003 020c 	and.w	r2, r3, #12
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d1eb      	bne.n	8004184 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041ac:	4b25      	ldr	r3, [pc, #148]	; (8004244 <HAL_RCC_ClockConfig+0x1b8>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 030f 	and.w	r3, r3, #15
 80041b4:	683a      	ldr	r2, [r7, #0]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d20c      	bcs.n	80041d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ba:	4b22      	ldr	r3, [pc, #136]	; (8004244 <HAL_RCC_ClockConfig+0x1b8>)
 80041bc:	683a      	ldr	r2, [r7, #0]
 80041be:	b2d2      	uxtb	r2, r2
 80041c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041c2:	4b20      	ldr	r3, [pc, #128]	; (8004244 <HAL_RCC_ClockConfig+0x1b8>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 030f 	and.w	r3, r3, #15
 80041ca:	683a      	ldr	r2, [r7, #0]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d001      	beq.n	80041d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e032      	b.n	800423a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0304 	and.w	r3, r3, #4
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d008      	beq.n	80041f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041e0:	4b19      	ldr	r3, [pc, #100]	; (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	4916      	ldr	r1, [pc, #88]	; (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0308 	and.w	r3, r3, #8
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d009      	beq.n	8004212 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041fe:	4b12      	ldr	r3, [pc, #72]	; (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	00db      	lsls	r3, r3, #3
 800420c:	490e      	ldr	r1, [pc, #56]	; (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 800420e:	4313      	orrs	r3, r2
 8004210:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004212:	f000 f821 	bl	8004258 <HAL_RCC_GetSysClockFreq>
 8004216:	4601      	mov	r1, r0
 8004218:	4b0b      	ldr	r3, [pc, #44]	; (8004248 <HAL_RCC_ClockConfig+0x1bc>)
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	091b      	lsrs	r3, r3, #4
 800421e:	f003 030f 	and.w	r3, r3, #15
 8004222:	4a0a      	ldr	r2, [pc, #40]	; (800424c <HAL_RCC_ClockConfig+0x1c0>)
 8004224:	5cd3      	ldrb	r3, [r2, r3]
 8004226:	fa21 f303 	lsr.w	r3, r1, r3
 800422a:	4a09      	ldr	r2, [pc, #36]	; (8004250 <HAL_RCC_ClockConfig+0x1c4>)
 800422c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800422e:	4b09      	ldr	r3, [pc, #36]	; (8004254 <HAL_RCC_ClockConfig+0x1c8>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4618      	mov	r0, r3
 8004234:	f7fe fa2e 	bl	8002694 <HAL_InitTick>

  return HAL_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3710      	adds	r7, #16
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	40023c00 	.word	0x40023c00
 8004248:	40023800 	.word	0x40023800
 800424c:	080068f0 	.word	0x080068f0
 8004250:	20000028 	.word	0x20000028
 8004254:	2000002c 	.word	0x2000002c

08004258 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800425a:	b085      	sub	sp, #20
 800425c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800425e:	2300      	movs	r3, #0
 8004260:	607b      	str	r3, [r7, #4]
 8004262:	2300      	movs	r3, #0
 8004264:	60fb      	str	r3, [r7, #12]
 8004266:	2300      	movs	r3, #0
 8004268:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800426a:	2300      	movs	r3, #0
 800426c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800426e:	4b63      	ldr	r3, [pc, #396]	; (80043fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f003 030c 	and.w	r3, r3, #12
 8004276:	2b04      	cmp	r3, #4
 8004278:	d007      	beq.n	800428a <HAL_RCC_GetSysClockFreq+0x32>
 800427a:	2b08      	cmp	r3, #8
 800427c:	d008      	beq.n	8004290 <HAL_RCC_GetSysClockFreq+0x38>
 800427e:	2b00      	cmp	r3, #0
 8004280:	f040 80b4 	bne.w	80043ec <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004284:	4b5e      	ldr	r3, [pc, #376]	; (8004400 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004286:	60bb      	str	r3, [r7, #8]
       break;
 8004288:	e0b3      	b.n	80043f2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800428a:	4b5e      	ldr	r3, [pc, #376]	; (8004404 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800428c:	60bb      	str	r3, [r7, #8]
      break;
 800428e:	e0b0      	b.n	80043f2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004290:	4b5a      	ldr	r3, [pc, #360]	; (80043fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004298:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800429a:	4b58      	ldr	r3, [pc, #352]	; (80043fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d04a      	beq.n	800433c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042a6:	4b55      	ldr	r3, [pc, #340]	; (80043fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	099b      	lsrs	r3, r3, #6
 80042ac:	f04f 0400 	mov.w	r4, #0
 80042b0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80042b4:	f04f 0200 	mov.w	r2, #0
 80042b8:	ea03 0501 	and.w	r5, r3, r1
 80042bc:	ea04 0602 	and.w	r6, r4, r2
 80042c0:	4629      	mov	r1, r5
 80042c2:	4632      	mov	r2, r6
 80042c4:	f04f 0300 	mov.w	r3, #0
 80042c8:	f04f 0400 	mov.w	r4, #0
 80042cc:	0154      	lsls	r4, r2, #5
 80042ce:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80042d2:	014b      	lsls	r3, r1, #5
 80042d4:	4619      	mov	r1, r3
 80042d6:	4622      	mov	r2, r4
 80042d8:	1b49      	subs	r1, r1, r5
 80042da:	eb62 0206 	sbc.w	r2, r2, r6
 80042de:	f04f 0300 	mov.w	r3, #0
 80042e2:	f04f 0400 	mov.w	r4, #0
 80042e6:	0194      	lsls	r4, r2, #6
 80042e8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80042ec:	018b      	lsls	r3, r1, #6
 80042ee:	1a5b      	subs	r3, r3, r1
 80042f0:	eb64 0402 	sbc.w	r4, r4, r2
 80042f4:	f04f 0100 	mov.w	r1, #0
 80042f8:	f04f 0200 	mov.w	r2, #0
 80042fc:	00e2      	lsls	r2, r4, #3
 80042fe:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004302:	00d9      	lsls	r1, r3, #3
 8004304:	460b      	mov	r3, r1
 8004306:	4614      	mov	r4, r2
 8004308:	195b      	adds	r3, r3, r5
 800430a:	eb44 0406 	adc.w	r4, r4, r6
 800430e:	f04f 0100 	mov.w	r1, #0
 8004312:	f04f 0200 	mov.w	r2, #0
 8004316:	0262      	lsls	r2, r4, #9
 8004318:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800431c:	0259      	lsls	r1, r3, #9
 800431e:	460b      	mov	r3, r1
 8004320:	4614      	mov	r4, r2
 8004322:	4618      	mov	r0, r3
 8004324:	4621      	mov	r1, r4
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f04f 0400 	mov.w	r4, #0
 800432c:	461a      	mov	r2, r3
 800432e:	4623      	mov	r3, r4
 8004330:	f7fc fc24 	bl	8000b7c <__aeabi_uldivmod>
 8004334:	4603      	mov	r3, r0
 8004336:	460c      	mov	r4, r1
 8004338:	60fb      	str	r3, [r7, #12]
 800433a:	e049      	b.n	80043d0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800433c:	4b2f      	ldr	r3, [pc, #188]	; (80043fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	099b      	lsrs	r3, r3, #6
 8004342:	f04f 0400 	mov.w	r4, #0
 8004346:	f240 11ff 	movw	r1, #511	; 0x1ff
 800434a:	f04f 0200 	mov.w	r2, #0
 800434e:	ea03 0501 	and.w	r5, r3, r1
 8004352:	ea04 0602 	and.w	r6, r4, r2
 8004356:	4629      	mov	r1, r5
 8004358:	4632      	mov	r2, r6
 800435a:	f04f 0300 	mov.w	r3, #0
 800435e:	f04f 0400 	mov.w	r4, #0
 8004362:	0154      	lsls	r4, r2, #5
 8004364:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004368:	014b      	lsls	r3, r1, #5
 800436a:	4619      	mov	r1, r3
 800436c:	4622      	mov	r2, r4
 800436e:	1b49      	subs	r1, r1, r5
 8004370:	eb62 0206 	sbc.w	r2, r2, r6
 8004374:	f04f 0300 	mov.w	r3, #0
 8004378:	f04f 0400 	mov.w	r4, #0
 800437c:	0194      	lsls	r4, r2, #6
 800437e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004382:	018b      	lsls	r3, r1, #6
 8004384:	1a5b      	subs	r3, r3, r1
 8004386:	eb64 0402 	sbc.w	r4, r4, r2
 800438a:	f04f 0100 	mov.w	r1, #0
 800438e:	f04f 0200 	mov.w	r2, #0
 8004392:	00e2      	lsls	r2, r4, #3
 8004394:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004398:	00d9      	lsls	r1, r3, #3
 800439a:	460b      	mov	r3, r1
 800439c:	4614      	mov	r4, r2
 800439e:	195b      	adds	r3, r3, r5
 80043a0:	eb44 0406 	adc.w	r4, r4, r6
 80043a4:	f04f 0100 	mov.w	r1, #0
 80043a8:	f04f 0200 	mov.w	r2, #0
 80043ac:	02a2      	lsls	r2, r4, #10
 80043ae:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80043b2:	0299      	lsls	r1, r3, #10
 80043b4:	460b      	mov	r3, r1
 80043b6:	4614      	mov	r4, r2
 80043b8:	4618      	mov	r0, r3
 80043ba:	4621      	mov	r1, r4
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f04f 0400 	mov.w	r4, #0
 80043c2:	461a      	mov	r2, r3
 80043c4:	4623      	mov	r3, r4
 80043c6:	f7fc fbd9 	bl	8000b7c <__aeabi_uldivmod>
 80043ca:	4603      	mov	r3, r0
 80043cc:	460c      	mov	r4, r1
 80043ce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80043d0:	4b0a      	ldr	r3, [pc, #40]	; (80043fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	0c1b      	lsrs	r3, r3, #16
 80043d6:	f003 0303 	and.w	r3, r3, #3
 80043da:	3301      	adds	r3, #1
 80043dc:	005b      	lsls	r3, r3, #1
 80043de:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e8:	60bb      	str	r3, [r7, #8]
      break;
 80043ea:	e002      	b.n	80043f2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043ec:	4b04      	ldr	r3, [pc, #16]	; (8004400 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80043ee:	60bb      	str	r3, [r7, #8]
      break;
 80043f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043f2:	68bb      	ldr	r3, [r7, #8]
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3714      	adds	r7, #20
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043fc:	40023800 	.word	0x40023800
 8004400:	00f42400 	.word	0x00f42400
 8004404:	007a1200 	.word	0x007a1200

08004408 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004408:	b480      	push	{r7}
 800440a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800440c:	4b03      	ldr	r3, [pc, #12]	; (800441c <HAL_RCC_GetHCLKFreq+0x14>)
 800440e:	681b      	ldr	r3, [r3, #0]
}
 8004410:	4618      	mov	r0, r3
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	20000028 	.word	0x20000028

08004420 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004424:	f7ff fff0 	bl	8004408 <HAL_RCC_GetHCLKFreq>
 8004428:	4601      	mov	r1, r0
 800442a:	4b05      	ldr	r3, [pc, #20]	; (8004440 <HAL_RCC_GetPCLK1Freq+0x20>)
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	0a9b      	lsrs	r3, r3, #10
 8004430:	f003 0307 	and.w	r3, r3, #7
 8004434:	4a03      	ldr	r2, [pc, #12]	; (8004444 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004436:	5cd3      	ldrb	r3, [r2, r3]
 8004438:	fa21 f303 	lsr.w	r3, r1, r3
}
 800443c:	4618      	mov	r0, r3
 800443e:	bd80      	pop	{r7, pc}
 8004440:	40023800 	.word	0x40023800
 8004444:	08006900 	.word	0x08006900

08004448 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800444c:	f7ff ffdc 	bl	8004408 <HAL_RCC_GetHCLKFreq>
 8004450:	4601      	mov	r1, r0
 8004452:	4b05      	ldr	r3, [pc, #20]	; (8004468 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	0b5b      	lsrs	r3, r3, #13
 8004458:	f003 0307 	and.w	r3, r3, #7
 800445c:	4a03      	ldr	r2, [pc, #12]	; (800446c <HAL_RCC_GetPCLK2Freq+0x24>)
 800445e:	5cd3      	ldrb	r3, [r2, r3]
 8004460:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004464:	4618      	mov	r0, r3
 8004466:	bd80      	pop	{r7, pc}
 8004468:	40023800 	.word	0x40023800
 800446c:	08006900 	.word	0x08006900

08004470 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d101      	bne.n	8004482 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e01d      	b.n	80044be <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004488:	b2db      	uxtb	r3, r3
 800448a:	2b00      	cmp	r3, #0
 800448c:	d106      	bne.n	800449c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f7fd feb4 	bl	8002204 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2202      	movs	r2, #2
 80044a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	3304      	adds	r3, #4
 80044ac:	4619      	mov	r1, r3
 80044ae:	4610      	mov	r0, r2
 80044b0:	f000 fb66 	bl	8004b80 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3708      	adds	r7, #8
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}

080044c6 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80044c6:	b480      	push	{r7}
 80044c8:	b085      	sub	sp, #20
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2202      	movs	r2, #2
 80044d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f003 0307 	and.w	r3, r3, #7
 80044e0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2b06      	cmp	r3, #6
 80044e6:	d007      	beq.n	80044f8 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f042 0201 	orr.w	r2, r2, #1
 80044f6:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3714      	adds	r7, #20
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr

0800450e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800450e:	b480      	push	{r7}
 8004510:	b085      	sub	sp, #20
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	68da      	ldr	r2, [r3, #12]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f042 0201 	orr.w	r2, r2, #1
 8004524:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	f003 0307 	and.w	r3, r3, #7
 8004530:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2b06      	cmp	r3, #6
 8004536:	d007      	beq.n	8004548 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f042 0201 	orr.w	r2, r2, #1
 8004546:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3714      	adds	r7, #20
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr

08004556 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004556:	b580      	push	{r7, lr}
 8004558:	b082      	sub	sp, #8
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d101      	bne.n	8004568 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e01d      	b.n	80045a4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800456e:	b2db      	uxtb	r3, r3
 8004570:	2b00      	cmp	r3, #0
 8004572:	d106      	bne.n	8004582 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f000 f815 	bl	80045ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2202      	movs	r2, #2
 8004586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	3304      	adds	r3, #4
 8004592:	4619      	mov	r1, r3
 8004594:	4610      	mov	r0, r2
 8004596:	f000 faf3 	bl	8004b80 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2201      	movs	r2, #1
 800459e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045a2:	2300      	movs	r3, #0
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3708      	adds	r7, #8
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80045b4:	bf00      	nop
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2201      	movs	r2, #1
 80045d0:	6839      	ldr	r1, [r7, #0]
 80045d2:	4618      	mov	r0, r3
 80045d4:	f000 fd7a 	bl	80050cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a10      	ldr	r2, [pc, #64]	; (8004620 <HAL_TIM_PWM_Start+0x60>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d107      	bne.n	80045f2 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	f003 0307 	and.w	r3, r3, #7
 80045fc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2b06      	cmp	r3, #6
 8004602:	d007      	beq.n	8004614 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f042 0201 	orr.w	r2, r2, #1
 8004612:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3710      	adds	r7, #16
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	40010000 	.word	0x40010000

08004624 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	f003 0302 	and.w	r3, r3, #2
 8004636:	2b02      	cmp	r3, #2
 8004638:	d122      	bne.n	8004680 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	f003 0302 	and.w	r3, r3, #2
 8004644:	2b02      	cmp	r3, #2
 8004646:	d11b      	bne.n	8004680 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f06f 0202 	mvn.w	r2, #2
 8004650:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2201      	movs	r2, #1
 8004656:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	699b      	ldr	r3, [r3, #24]
 800465e:	f003 0303 	and.w	r3, r3, #3
 8004662:	2b00      	cmp	r3, #0
 8004664:	d003      	beq.n	800466e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 fa6b 	bl	8004b42 <HAL_TIM_IC_CaptureCallback>
 800466c:	e005      	b.n	800467a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 fa5d 	bl	8004b2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f000 fa6e 	bl	8004b56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	f003 0304 	and.w	r3, r3, #4
 800468a:	2b04      	cmp	r3, #4
 800468c:	d122      	bne.n	80046d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	f003 0304 	and.w	r3, r3, #4
 8004698:	2b04      	cmp	r3, #4
 800469a:	d11b      	bne.n	80046d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f06f 0204 	mvn.w	r2, #4
 80046a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2202      	movs	r2, #2
 80046aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	699b      	ldr	r3, [r3, #24]
 80046b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d003      	beq.n	80046c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 fa41 	bl	8004b42 <HAL_TIM_IC_CaptureCallback>
 80046c0:	e005      	b.n	80046ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f000 fa33 	bl	8004b2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f000 fa44 	bl	8004b56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	f003 0308 	and.w	r3, r3, #8
 80046de:	2b08      	cmp	r3, #8
 80046e0:	d122      	bne.n	8004728 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	f003 0308 	and.w	r3, r3, #8
 80046ec:	2b08      	cmp	r3, #8
 80046ee:	d11b      	bne.n	8004728 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f06f 0208 	mvn.w	r2, #8
 80046f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2204      	movs	r2, #4
 80046fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	69db      	ldr	r3, [r3, #28]
 8004706:	f003 0303 	and.w	r3, r3, #3
 800470a:	2b00      	cmp	r3, #0
 800470c:	d003      	beq.n	8004716 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 fa17 	bl	8004b42 <HAL_TIM_IC_CaptureCallback>
 8004714:	e005      	b.n	8004722 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 fa09 	bl	8004b2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f000 fa1a 	bl	8004b56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	f003 0310 	and.w	r3, r3, #16
 8004732:	2b10      	cmp	r3, #16
 8004734:	d122      	bne.n	800477c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	f003 0310 	and.w	r3, r3, #16
 8004740:	2b10      	cmp	r3, #16
 8004742:	d11b      	bne.n	800477c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f06f 0210 	mvn.w	r2, #16
 800474c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2208      	movs	r2, #8
 8004752:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	69db      	ldr	r3, [r3, #28]
 800475a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800475e:	2b00      	cmp	r3, #0
 8004760:	d003      	beq.n	800476a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f000 f9ed 	bl	8004b42 <HAL_TIM_IC_CaptureCallback>
 8004768:	e005      	b.n	8004776 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 f9df 	bl	8004b2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f000 f9f0 	bl	8004b56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	2b01      	cmp	r3, #1
 8004788:	d10e      	bne.n	80047a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	f003 0301 	and.w	r3, r3, #1
 8004794:	2b01      	cmp	r3, #1
 8004796:	d107      	bne.n	80047a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f06f 0201 	mvn.w	r2, #1
 80047a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f7fd fbf4 	bl	8001f90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047b2:	2b80      	cmp	r3, #128	; 0x80
 80047b4:	d10e      	bne.n	80047d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047c0:	2b80      	cmp	r3, #128	; 0x80
 80047c2:	d107      	bne.n	80047d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80047cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 fd1a 	bl	8005208 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047de:	2b40      	cmp	r3, #64	; 0x40
 80047e0:	d10e      	bne.n	8004800 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ec:	2b40      	cmp	r3, #64	; 0x40
 80047ee:	d107      	bne.n	8004800 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80047f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 f9b5 	bl	8004b6a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	f003 0320 	and.w	r3, r3, #32
 800480a:	2b20      	cmp	r3, #32
 800480c:	d10e      	bne.n	800482c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	f003 0320 	and.w	r3, r3, #32
 8004818:	2b20      	cmp	r3, #32
 800481a:	d107      	bne.n	800482c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f06f 0220 	mvn.w	r2, #32
 8004824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 fce4 	bl	80051f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800482c:	bf00      	nop
 800482e:	3708      	adds	r7, #8
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004846:	2b01      	cmp	r3, #1
 8004848:	d101      	bne.n	800484e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800484a:	2302      	movs	r3, #2
 800484c:	e0b4      	b.n	80049b8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2201      	movs	r2, #1
 8004852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2202      	movs	r2, #2
 800485a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2b0c      	cmp	r3, #12
 8004862:	f200 809f 	bhi.w	80049a4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004866:	a201      	add	r2, pc, #4	; (adr r2, 800486c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800486c:	080048a1 	.word	0x080048a1
 8004870:	080049a5 	.word	0x080049a5
 8004874:	080049a5 	.word	0x080049a5
 8004878:	080049a5 	.word	0x080049a5
 800487c:	080048e1 	.word	0x080048e1
 8004880:	080049a5 	.word	0x080049a5
 8004884:	080049a5 	.word	0x080049a5
 8004888:	080049a5 	.word	0x080049a5
 800488c:	08004923 	.word	0x08004923
 8004890:	080049a5 	.word	0x080049a5
 8004894:	080049a5 	.word	0x080049a5
 8004898:	080049a5 	.word	0x080049a5
 800489c:	08004963 	.word	0x08004963
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68b9      	ldr	r1, [r7, #8]
 80048a6:	4618      	mov	r0, r3
 80048a8:	f000 f9ea 	bl	8004c80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	699a      	ldr	r2, [r3, #24]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f042 0208 	orr.w	r2, r2, #8
 80048ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	699a      	ldr	r2, [r3, #24]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f022 0204 	bic.w	r2, r2, #4
 80048ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	6999      	ldr	r1, [r3, #24]
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	691a      	ldr	r2, [r3, #16]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	430a      	orrs	r2, r1
 80048dc:	619a      	str	r2, [r3, #24]
      break;
 80048de:	e062      	b.n	80049a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68b9      	ldr	r1, [r7, #8]
 80048e6:	4618      	mov	r0, r3
 80048e8:	f000 fa30 	bl	8004d4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	699a      	ldr	r2, [r3, #24]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	699a      	ldr	r2, [r3, #24]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800490a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	6999      	ldr	r1, [r3, #24]
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	021a      	lsls	r2, r3, #8
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	430a      	orrs	r2, r1
 800491e:	619a      	str	r2, [r3, #24]
      break;
 8004920:	e041      	b.n	80049a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	68b9      	ldr	r1, [r7, #8]
 8004928:	4618      	mov	r0, r3
 800492a:	f000 fa7b 	bl	8004e24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	69da      	ldr	r2, [r3, #28]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f042 0208 	orr.w	r2, r2, #8
 800493c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	69da      	ldr	r2, [r3, #28]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f022 0204 	bic.w	r2, r2, #4
 800494c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	69d9      	ldr	r1, [r3, #28]
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	691a      	ldr	r2, [r3, #16]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	430a      	orrs	r2, r1
 800495e:	61da      	str	r2, [r3, #28]
      break;
 8004960:	e021      	b.n	80049a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	68b9      	ldr	r1, [r7, #8]
 8004968:	4618      	mov	r0, r3
 800496a:	f000 fac5 	bl	8004ef8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	69da      	ldr	r2, [r3, #28]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800497c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	69da      	ldr	r2, [r3, #28]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800498c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	69d9      	ldr	r1, [r3, #28]
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	691b      	ldr	r3, [r3, #16]
 8004998:	021a      	lsls	r2, r3, #8
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	430a      	orrs	r2, r1
 80049a0:	61da      	str	r2, [r3, #28]
      break;
 80049a2:	e000      	b.n	80049a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80049a4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2201      	movs	r2, #1
 80049aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3710      	adds	r7, #16
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d101      	bne.n	80049d8 <HAL_TIM_ConfigClockSource+0x18>
 80049d4:	2302      	movs	r3, #2
 80049d6:	e0a6      	b.n	8004b26 <HAL_TIM_ConfigClockSource+0x166>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2202      	movs	r2, #2
 80049e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80049f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049fe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2b40      	cmp	r3, #64	; 0x40
 8004a0e:	d067      	beq.n	8004ae0 <HAL_TIM_ConfigClockSource+0x120>
 8004a10:	2b40      	cmp	r3, #64	; 0x40
 8004a12:	d80b      	bhi.n	8004a2c <HAL_TIM_ConfigClockSource+0x6c>
 8004a14:	2b10      	cmp	r3, #16
 8004a16:	d073      	beq.n	8004b00 <HAL_TIM_ConfigClockSource+0x140>
 8004a18:	2b10      	cmp	r3, #16
 8004a1a:	d802      	bhi.n	8004a22 <HAL_TIM_ConfigClockSource+0x62>
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d06f      	beq.n	8004b00 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004a20:	e078      	b.n	8004b14 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004a22:	2b20      	cmp	r3, #32
 8004a24:	d06c      	beq.n	8004b00 <HAL_TIM_ConfigClockSource+0x140>
 8004a26:	2b30      	cmp	r3, #48	; 0x30
 8004a28:	d06a      	beq.n	8004b00 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004a2a:	e073      	b.n	8004b14 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004a2c:	2b70      	cmp	r3, #112	; 0x70
 8004a2e:	d00d      	beq.n	8004a4c <HAL_TIM_ConfigClockSource+0x8c>
 8004a30:	2b70      	cmp	r3, #112	; 0x70
 8004a32:	d804      	bhi.n	8004a3e <HAL_TIM_ConfigClockSource+0x7e>
 8004a34:	2b50      	cmp	r3, #80	; 0x50
 8004a36:	d033      	beq.n	8004aa0 <HAL_TIM_ConfigClockSource+0xe0>
 8004a38:	2b60      	cmp	r3, #96	; 0x60
 8004a3a:	d041      	beq.n	8004ac0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004a3c:	e06a      	b.n	8004b14 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004a3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a42:	d066      	beq.n	8004b12 <HAL_TIM_ConfigClockSource+0x152>
 8004a44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a48:	d017      	beq.n	8004a7a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004a4a:	e063      	b.n	8004b14 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6818      	ldr	r0, [r3, #0]
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	6899      	ldr	r1, [r3, #8]
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	685a      	ldr	r2, [r3, #4]
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	f000 fb16 	bl	800508c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a6e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	609a      	str	r2, [r3, #8]
      break;
 8004a78:	e04c      	b.n	8004b14 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6818      	ldr	r0, [r3, #0]
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	6899      	ldr	r1, [r3, #8]
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	685a      	ldr	r2, [r3, #4]
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	f000 faff 	bl	800508c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	689a      	ldr	r2, [r3, #8]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a9c:	609a      	str	r2, [r3, #8]
      break;
 8004a9e:	e039      	b.n	8004b14 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6818      	ldr	r0, [r3, #0]
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	6859      	ldr	r1, [r3, #4]
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	461a      	mov	r2, r3
 8004aae:	f000 fa73 	bl	8004f98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2150      	movs	r1, #80	; 0x50
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f000 facc 	bl	8005056 <TIM_ITRx_SetConfig>
      break;
 8004abe:	e029      	b.n	8004b14 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6818      	ldr	r0, [r3, #0]
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	6859      	ldr	r1, [r3, #4]
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	461a      	mov	r2, r3
 8004ace:	f000 fa92 	bl	8004ff6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	2160      	movs	r1, #96	; 0x60
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f000 fabc 	bl	8005056 <TIM_ITRx_SetConfig>
      break;
 8004ade:	e019      	b.n	8004b14 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6818      	ldr	r0, [r3, #0]
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	6859      	ldr	r1, [r3, #4]
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	461a      	mov	r2, r3
 8004aee:	f000 fa53 	bl	8004f98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	2140      	movs	r1, #64	; 0x40
 8004af8:	4618      	mov	r0, r3
 8004afa:	f000 faac 	bl	8005056 <TIM_ITRx_SetConfig>
      break;
 8004afe:	e009      	b.n	8004b14 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4619      	mov	r1, r3
 8004b0a:	4610      	mov	r0, r2
 8004b0c:	f000 faa3 	bl	8005056 <TIM_ITRx_SetConfig>
      break;
 8004b10:	e000      	b.n	8004b14 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004b12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3710      	adds	r7, #16
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}

08004b2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b2e:	b480      	push	{r7}
 8004b30:	b083      	sub	sp, #12
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b36:	bf00      	nop
 8004b38:	370c      	adds	r7, #12
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr

08004b42 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b42:	b480      	push	{r7}
 8004b44:	b083      	sub	sp, #12
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b4a:	bf00      	nop
 8004b4c:	370c      	adds	r7, #12
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr

08004b56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b56:	b480      	push	{r7}
 8004b58:	b083      	sub	sp, #12
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b5e:	bf00      	nop
 8004b60:	370c      	adds	r7, #12
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr

08004b6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b6a:	b480      	push	{r7}
 8004b6c:	b083      	sub	sp, #12
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b72:	bf00      	nop
 8004b74:	370c      	adds	r7, #12
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
	...

08004b80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b085      	sub	sp, #20
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a34      	ldr	r2, [pc, #208]	; (8004c64 <TIM_Base_SetConfig+0xe4>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d00f      	beq.n	8004bb8 <TIM_Base_SetConfig+0x38>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b9e:	d00b      	beq.n	8004bb8 <TIM_Base_SetConfig+0x38>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a31      	ldr	r2, [pc, #196]	; (8004c68 <TIM_Base_SetConfig+0xe8>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d007      	beq.n	8004bb8 <TIM_Base_SetConfig+0x38>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a30      	ldr	r2, [pc, #192]	; (8004c6c <TIM_Base_SetConfig+0xec>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d003      	beq.n	8004bb8 <TIM_Base_SetConfig+0x38>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	4a2f      	ldr	r2, [pc, #188]	; (8004c70 <TIM_Base_SetConfig+0xf0>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d108      	bne.n	8004bca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	68fa      	ldr	r2, [r7, #12]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a25      	ldr	r2, [pc, #148]	; (8004c64 <TIM_Base_SetConfig+0xe4>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d01b      	beq.n	8004c0a <TIM_Base_SetConfig+0x8a>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bd8:	d017      	beq.n	8004c0a <TIM_Base_SetConfig+0x8a>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a22      	ldr	r2, [pc, #136]	; (8004c68 <TIM_Base_SetConfig+0xe8>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d013      	beq.n	8004c0a <TIM_Base_SetConfig+0x8a>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a21      	ldr	r2, [pc, #132]	; (8004c6c <TIM_Base_SetConfig+0xec>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d00f      	beq.n	8004c0a <TIM_Base_SetConfig+0x8a>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a20      	ldr	r2, [pc, #128]	; (8004c70 <TIM_Base_SetConfig+0xf0>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d00b      	beq.n	8004c0a <TIM_Base_SetConfig+0x8a>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a1f      	ldr	r2, [pc, #124]	; (8004c74 <TIM_Base_SetConfig+0xf4>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d007      	beq.n	8004c0a <TIM_Base_SetConfig+0x8a>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a1e      	ldr	r2, [pc, #120]	; (8004c78 <TIM_Base_SetConfig+0xf8>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d003      	beq.n	8004c0a <TIM_Base_SetConfig+0x8a>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a1d      	ldr	r2, [pc, #116]	; (8004c7c <TIM_Base_SetConfig+0xfc>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d108      	bne.n	8004c1c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	68fa      	ldr	r2, [r7, #12]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	695b      	ldr	r3, [r3, #20]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	68fa      	ldr	r2, [r7, #12]
 8004c2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	689a      	ldr	r2, [r3, #8]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a08      	ldr	r2, [pc, #32]	; (8004c64 <TIM_Base_SetConfig+0xe4>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d103      	bne.n	8004c50 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	691a      	ldr	r2, [r3, #16]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	615a      	str	r2, [r3, #20]
}
 8004c56:	bf00      	nop
 8004c58:	3714      	adds	r7, #20
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop
 8004c64:	40010000 	.word	0x40010000
 8004c68:	40000400 	.word	0x40000400
 8004c6c:	40000800 	.word	0x40000800
 8004c70:	40000c00 	.word	0x40000c00
 8004c74:	40014000 	.word	0x40014000
 8004c78:	40014400 	.word	0x40014400
 8004c7c:	40014800 	.word	0x40014800

08004c80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b087      	sub	sp, #28
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a1b      	ldr	r3, [r3, #32]
 8004c8e:	f023 0201 	bic.w	r2, r3, #1
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a1b      	ldr	r3, [r3, #32]
 8004c9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	699b      	ldr	r3, [r3, #24]
 8004ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f023 0303 	bic.w	r3, r3, #3
 8004cb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	68fa      	ldr	r2, [r7, #12]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	f023 0302 	bic.w	r3, r3, #2
 8004cc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	697a      	ldr	r2, [r7, #20]
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a1c      	ldr	r2, [pc, #112]	; (8004d48 <TIM_OC1_SetConfig+0xc8>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d10c      	bne.n	8004cf6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	f023 0308 	bic.w	r3, r3, #8
 8004ce2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	697a      	ldr	r2, [r7, #20]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	f023 0304 	bic.w	r3, r3, #4
 8004cf4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a13      	ldr	r2, [pc, #76]	; (8004d48 <TIM_OC1_SetConfig+0xc8>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d111      	bne.n	8004d22 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	695b      	ldr	r3, [r3, #20]
 8004d12:	693a      	ldr	r2, [r7, #16]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	699b      	ldr	r3, [r3, #24]
 8004d1c:	693a      	ldr	r2, [r7, #16]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	693a      	ldr	r2, [r7, #16]
 8004d26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	68fa      	ldr	r2, [r7, #12]
 8004d2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	685a      	ldr	r2, [r3, #4]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	697a      	ldr	r2, [r7, #20]
 8004d3a:	621a      	str	r2, [r3, #32]
}
 8004d3c:	bf00      	nop
 8004d3e:	371c      	adds	r7, #28
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr
 8004d48:	40010000 	.word	0x40010000

08004d4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b087      	sub	sp, #28
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a1b      	ldr	r3, [r3, #32]
 8004d5a:	f023 0210 	bic.w	r2, r3, #16
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a1b      	ldr	r3, [r3, #32]
 8004d66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	699b      	ldr	r3, [r3, #24]
 8004d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	021b      	lsls	r3, r3, #8
 8004d8a:	68fa      	ldr	r2, [r7, #12]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	f023 0320 	bic.w	r3, r3, #32
 8004d96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	011b      	lsls	r3, r3, #4
 8004d9e:	697a      	ldr	r2, [r7, #20]
 8004da0:	4313      	orrs	r3, r2
 8004da2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a1e      	ldr	r2, [pc, #120]	; (8004e20 <TIM_OC2_SetConfig+0xd4>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d10d      	bne.n	8004dc8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004db2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	011b      	lsls	r3, r3, #4
 8004dba:	697a      	ldr	r2, [r7, #20]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dc6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a15      	ldr	r2, [pc, #84]	; (8004e20 <TIM_OC2_SetConfig+0xd4>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d113      	bne.n	8004df8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004dd6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004dde:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	695b      	ldr	r3, [r3, #20]
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	693a      	ldr	r2, [r7, #16]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	699b      	ldr	r3, [r3, #24]
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	693a      	ldr	r2, [r7, #16]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	693a      	ldr	r2, [r7, #16]
 8004dfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	685a      	ldr	r2, [r3, #4]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	697a      	ldr	r2, [r7, #20]
 8004e10:	621a      	str	r2, [r3, #32]
}
 8004e12:	bf00      	nop
 8004e14:	371c      	adds	r7, #28
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop
 8004e20:	40010000 	.word	0x40010000

08004e24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b087      	sub	sp, #28
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a1b      	ldr	r3, [r3, #32]
 8004e32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a1b      	ldr	r3, [r3, #32]
 8004e3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	69db      	ldr	r3, [r3, #28]
 8004e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f023 0303 	bic.w	r3, r3, #3
 8004e5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	68fa      	ldr	r2, [r7, #12]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	021b      	lsls	r3, r3, #8
 8004e74:	697a      	ldr	r2, [r7, #20]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a1d      	ldr	r2, [pc, #116]	; (8004ef4 <TIM_OC3_SetConfig+0xd0>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d10d      	bne.n	8004e9e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	021b      	lsls	r3, r3, #8
 8004e90:	697a      	ldr	r2, [r7, #20]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a14      	ldr	r2, [pc, #80]	; (8004ef4 <TIM_OC3_SetConfig+0xd0>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d113      	bne.n	8004ece <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004eac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004eb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	695b      	ldr	r3, [r3, #20]
 8004eba:	011b      	lsls	r3, r3, #4
 8004ebc:	693a      	ldr	r2, [r7, #16]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	699b      	ldr	r3, [r3, #24]
 8004ec6:	011b      	lsls	r3, r3, #4
 8004ec8:	693a      	ldr	r2, [r7, #16]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	693a      	ldr	r2, [r7, #16]
 8004ed2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	685a      	ldr	r2, [r3, #4]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	697a      	ldr	r2, [r7, #20]
 8004ee6:	621a      	str	r2, [r3, #32]
}
 8004ee8:	bf00      	nop
 8004eea:	371c      	adds	r7, #28
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr
 8004ef4:	40010000 	.word	0x40010000

08004ef8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b087      	sub	sp, #28
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a1b      	ldr	r3, [r3, #32]
 8004f06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a1b      	ldr	r3, [r3, #32]
 8004f12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	69db      	ldr	r3, [r3, #28]
 8004f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	021b      	lsls	r3, r3, #8
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	031b      	lsls	r3, r3, #12
 8004f4a:	693a      	ldr	r2, [r7, #16]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4a10      	ldr	r2, [pc, #64]	; (8004f94 <TIM_OC4_SetConfig+0x9c>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d109      	bne.n	8004f6c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	695b      	ldr	r3, [r3, #20]
 8004f64:	019b      	lsls	r3, r3, #6
 8004f66:	697a      	ldr	r2, [r7, #20]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	697a      	ldr	r2, [r7, #20]
 8004f70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	685a      	ldr	r2, [r3, #4]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	693a      	ldr	r2, [r7, #16]
 8004f84:	621a      	str	r2, [r3, #32]
}
 8004f86:	bf00      	nop
 8004f88:	371c      	adds	r7, #28
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop
 8004f94:	40010000 	.word	0x40010000

08004f98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b087      	sub	sp, #28
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6a1b      	ldr	r3, [r3, #32]
 8004fa8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6a1b      	ldr	r3, [r3, #32]
 8004fae:	f023 0201 	bic.w	r2, r3, #1
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	699b      	ldr	r3, [r3, #24]
 8004fba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	011b      	lsls	r3, r3, #4
 8004fc8:	693a      	ldr	r2, [r7, #16]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	f023 030a 	bic.w	r3, r3, #10
 8004fd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004fd6:	697a      	ldr	r2, [r7, #20]
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	693a      	ldr	r2, [r7, #16]
 8004fe2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	697a      	ldr	r2, [r7, #20]
 8004fe8:	621a      	str	r2, [r3, #32]
}
 8004fea:	bf00      	nop
 8004fec:	371c      	adds	r7, #28
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr

08004ff6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ff6:	b480      	push	{r7}
 8004ff8:	b087      	sub	sp, #28
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	60f8      	str	r0, [r7, #12]
 8004ffe:	60b9      	str	r1, [r7, #8]
 8005000:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6a1b      	ldr	r3, [r3, #32]
 8005006:	f023 0210 	bic.w	r2, r3, #16
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	699b      	ldr	r3, [r3, #24]
 8005012:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6a1b      	ldr	r3, [r3, #32]
 8005018:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005020:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	031b      	lsls	r3, r3, #12
 8005026:	697a      	ldr	r2, [r7, #20]
 8005028:	4313      	orrs	r3, r2
 800502a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005032:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	011b      	lsls	r3, r3, #4
 8005038:	693a      	ldr	r2, [r7, #16]
 800503a:	4313      	orrs	r3, r2
 800503c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	697a      	ldr	r2, [r7, #20]
 8005042:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	693a      	ldr	r2, [r7, #16]
 8005048:	621a      	str	r2, [r3, #32]
}
 800504a:	bf00      	nop
 800504c:	371c      	adds	r7, #28
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr

08005056 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005056:	b480      	push	{r7}
 8005058:	b085      	sub	sp, #20
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
 800505e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800506c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800506e:	683a      	ldr	r2, [r7, #0]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	4313      	orrs	r3, r2
 8005074:	f043 0307 	orr.w	r3, r3, #7
 8005078:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	609a      	str	r2, [r3, #8]
}
 8005080:	bf00      	nop
 8005082:	3714      	adds	r7, #20
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800508c:	b480      	push	{r7}
 800508e:	b087      	sub	sp, #28
 8005090:	af00      	add	r7, sp, #0
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	607a      	str	r2, [r7, #4]
 8005098:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	021a      	lsls	r2, r3, #8
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	431a      	orrs	r2, r3
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	697a      	ldr	r2, [r7, #20]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	697a      	ldr	r2, [r7, #20]
 80050be:	609a      	str	r2, [r3, #8]
}
 80050c0:	bf00      	nop
 80050c2:	371c      	adds	r7, #28
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b087      	sub	sp, #28
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	f003 031f 	and.w	r3, r3, #31
 80050de:	2201      	movs	r2, #1
 80050e0:	fa02 f303 	lsl.w	r3, r2, r3
 80050e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6a1a      	ldr	r2, [r3, #32]
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	43db      	mvns	r3, r3
 80050ee:	401a      	ands	r2, r3
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6a1a      	ldr	r2, [r3, #32]
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	f003 031f 	and.w	r3, r3, #31
 80050fe:	6879      	ldr	r1, [r7, #4]
 8005100:	fa01 f303 	lsl.w	r3, r1, r3
 8005104:	431a      	orrs	r2, r3
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	621a      	str	r2, [r3, #32]
}
 800510a:	bf00      	nop
 800510c:	371c      	adds	r7, #28
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr
	...

08005118 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005118:	b480      	push	{r7}
 800511a:	b085      	sub	sp, #20
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005128:	2b01      	cmp	r3, #1
 800512a:	d101      	bne.n	8005130 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800512c:	2302      	movs	r3, #2
 800512e:	e050      	b.n	80051d2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2202      	movs	r2, #2
 800513c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005156:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	68fa      	ldr	r2, [r7, #12]
 800515e:	4313      	orrs	r3, r2
 8005160:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a1c      	ldr	r2, [pc, #112]	; (80051e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d018      	beq.n	80051a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800517c:	d013      	beq.n	80051a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a18      	ldr	r2, [pc, #96]	; (80051e4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d00e      	beq.n	80051a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a16      	ldr	r2, [pc, #88]	; (80051e8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d009      	beq.n	80051a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a15      	ldr	r2, [pc, #84]	; (80051ec <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d004      	beq.n	80051a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a13      	ldr	r2, [pc, #76]	; (80051f0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d10c      	bne.n	80051c0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	68ba      	ldr	r2, [r7, #8]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68ba      	ldr	r2, [r7, #8]
 80051be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3714      	adds	r7, #20
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr
 80051de:	bf00      	nop
 80051e0:	40010000 	.word	0x40010000
 80051e4:	40000400 	.word	0x40000400
 80051e8:	40000800 	.word	0x40000800
 80051ec:	40000c00 	.word	0x40000c00
 80051f0:	40014000 	.word	0x40014000

080051f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051fc:	bf00      	nop
 80051fe:	370c      	adds	r7, #12
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005210:	bf00      	nop
 8005212:	370c      	adds	r7, #12
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr

0800521c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b082      	sub	sp, #8
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d101      	bne.n	800522e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e03f      	b.n	80052ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005234:	b2db      	uxtb	r3, r3
 8005236:	2b00      	cmp	r3, #0
 8005238:	d106      	bne.n	8005248 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f7fd f8a2 	bl	800238c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2224      	movs	r2, #36	; 0x24
 800524c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68da      	ldr	r2, [r3, #12]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800525e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f000 fb6b 	bl	800593c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	691a      	ldr	r2, [r3, #16]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005274:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	695a      	ldr	r2, [r3, #20]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005284:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	68da      	ldr	r2, [r3, #12]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005294:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2220      	movs	r2, #32
 80052a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2220      	movs	r2, #32
 80052a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3708      	adds	r7, #8
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
	...

080052b8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b086      	sub	sp, #24
 80052bc:	af00      	add	r7, sp, #0
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	60b9      	str	r1, [r7, #8]
 80052c2:	4613      	mov	r3, r2
 80052c4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	2b20      	cmp	r3, #32
 80052d0:	d153      	bne.n	800537a <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d002      	beq.n	80052de <HAL_UART_Transmit_DMA+0x26>
 80052d8:	88fb      	ldrh	r3, [r7, #6]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d101      	bne.n	80052e2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e04c      	b.n	800537c <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d101      	bne.n	80052f0 <HAL_UART_Transmit_DMA+0x38>
 80052ec:	2302      	movs	r3, #2
 80052ee:	e045      	b.n	800537c <HAL_UART_Transmit_DMA+0xc4>
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80052f8:	68ba      	ldr	r2, [r7, #8]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	88fa      	ldrh	r2, [r7, #6]
 8005302:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	88fa      	ldrh	r2, [r7, #6]
 8005308:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2200      	movs	r2, #0
 800530e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2221      	movs	r2, #33	; 0x21
 8005314:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800531c:	4a19      	ldr	r2, [pc, #100]	; (8005384 <HAL_UART_Transmit_DMA+0xcc>)
 800531e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005324:	4a18      	ldr	r2, [pc, #96]	; (8005388 <HAL_UART_Transmit_DMA+0xd0>)
 8005326:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800532c:	4a17      	ldr	r2, [pc, #92]	; (800538c <HAL_UART_Transmit_DMA+0xd4>)
 800532e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005334:	2200      	movs	r2, #0
 8005336:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8005338:	f107 0308 	add.w	r3, r7, #8
 800533c:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	6819      	ldr	r1, [r3, #0]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	3304      	adds	r3, #4
 800534c:	461a      	mov	r2, r3
 800534e:	88fb      	ldrh	r3, [r7, #6]
 8005350:	f7fd ffae 	bl	80032b0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800535c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	695a      	ldr	r2, [r3, #20]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005374:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8005376:	2300      	movs	r3, #0
 8005378:	e000      	b.n	800537c <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800537a:	2302      	movs	r3, #2
  }
}
 800537c:	4618      	mov	r0, r3
 800537e:	3718      	adds	r7, #24
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}
 8005384:	080055cd 	.word	0x080055cd
 8005388:	0800561f 	.word	0x0800561f
 800538c:	0800563b 	.word	0x0800563b

08005390 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b088      	sub	sp, #32
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	695b      	ldr	r3, [r3, #20]
 80053ae:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80053b0:	2300      	movs	r3, #0
 80053b2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80053b4:	2300      	movs	r3, #0
 80053b6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	f003 030f 	and.w	r3, r3, #15
 80053be:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d10d      	bne.n	80053e2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80053c6:	69fb      	ldr	r3, [r7, #28]
 80053c8:	f003 0320 	and.w	r3, r3, #32
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d008      	beq.n	80053e2 <HAL_UART_IRQHandler+0x52>
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	f003 0320 	and.w	r3, r3, #32
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d003      	beq.n	80053e2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 fa2d 	bl	800583a <UART_Receive_IT>
      return;
 80053e0:	e0d1      	b.n	8005586 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	f000 80b0 	beq.w	800554a <HAL_UART_IRQHandler+0x1ba>
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	f003 0301 	and.w	r3, r3, #1
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d105      	bne.n	8005400 <HAL_UART_IRQHandler+0x70>
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	f000 80a5 	beq.w	800554a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005400:	69fb      	ldr	r3, [r7, #28]
 8005402:	f003 0301 	and.w	r3, r3, #1
 8005406:	2b00      	cmp	r3, #0
 8005408:	d00a      	beq.n	8005420 <HAL_UART_IRQHandler+0x90>
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005410:	2b00      	cmp	r3, #0
 8005412:	d005      	beq.n	8005420 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005418:	f043 0201 	orr.w	r2, r3, #1
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005420:	69fb      	ldr	r3, [r7, #28]
 8005422:	f003 0304 	and.w	r3, r3, #4
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00a      	beq.n	8005440 <HAL_UART_IRQHandler+0xb0>
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	f003 0301 	and.w	r3, r3, #1
 8005430:	2b00      	cmp	r3, #0
 8005432:	d005      	beq.n	8005440 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005438:	f043 0202 	orr.w	r2, r3, #2
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	f003 0302 	and.w	r3, r3, #2
 8005446:	2b00      	cmp	r3, #0
 8005448:	d00a      	beq.n	8005460 <HAL_UART_IRQHandler+0xd0>
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	f003 0301 	and.w	r3, r3, #1
 8005450:	2b00      	cmp	r3, #0
 8005452:	d005      	beq.n	8005460 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005458:	f043 0204 	orr.w	r2, r3, #4
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	f003 0308 	and.w	r3, r3, #8
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00f      	beq.n	800548a <HAL_UART_IRQHandler+0xfa>
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	f003 0320 	and.w	r3, r3, #32
 8005470:	2b00      	cmp	r3, #0
 8005472:	d104      	bne.n	800547e <HAL_UART_IRQHandler+0xee>
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	f003 0301 	and.w	r3, r3, #1
 800547a:	2b00      	cmp	r3, #0
 800547c:	d005      	beq.n	800548a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005482:	f043 0208 	orr.w	r2, r3, #8
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800548e:	2b00      	cmp	r3, #0
 8005490:	d078      	beq.n	8005584 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	f003 0320 	and.w	r3, r3, #32
 8005498:	2b00      	cmp	r3, #0
 800549a:	d007      	beq.n	80054ac <HAL_UART_IRQHandler+0x11c>
 800549c:	69bb      	ldr	r3, [r7, #24]
 800549e:	f003 0320 	and.w	r3, r3, #32
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d002      	beq.n	80054ac <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 f9c7 	bl	800583a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054b6:	2b40      	cmp	r3, #64	; 0x40
 80054b8:	bf0c      	ite	eq
 80054ba:	2301      	moveq	r3, #1
 80054bc:	2300      	movne	r3, #0
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054c6:	f003 0308 	and.w	r3, r3, #8
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d102      	bne.n	80054d4 <HAL_UART_IRQHandler+0x144>
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d031      	beq.n	8005538 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f000 f910 	bl	80056fa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	695b      	ldr	r3, [r3, #20]
 80054e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e4:	2b40      	cmp	r3, #64	; 0x40
 80054e6:	d123      	bne.n	8005530 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	695a      	ldr	r2, [r3, #20]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054f6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d013      	beq.n	8005528 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005504:	4a21      	ldr	r2, [pc, #132]	; (800558c <HAL_UART_IRQHandler+0x1fc>)
 8005506:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800550c:	4618      	mov	r0, r3
 800550e:	f7fd ff27 	bl	8003360 <HAL_DMA_Abort_IT>
 8005512:	4603      	mov	r3, r0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d016      	beq.n	8005546 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800551c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005522:	4610      	mov	r0, r2
 8005524:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005526:	e00e      	b.n	8005546 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f000 f845 	bl	80055b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800552e:	e00a      	b.n	8005546 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f000 f841 	bl	80055b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005536:	e006      	b.n	8005546 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f000 f83d 	bl	80055b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005544:	e01e      	b.n	8005584 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005546:	bf00      	nop
    return;
 8005548:	e01c      	b.n	8005584 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005550:	2b00      	cmp	r3, #0
 8005552:	d008      	beq.n	8005566 <HAL_UART_IRQHandler+0x1d6>
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800555a:	2b00      	cmp	r3, #0
 800555c:	d003      	beq.n	8005566 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 f8fd 	bl	800575e <UART_Transmit_IT>
    return;
 8005564:	e00f      	b.n	8005586 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800556c:	2b00      	cmp	r3, #0
 800556e:	d00a      	beq.n	8005586 <HAL_UART_IRQHandler+0x1f6>
 8005570:	69bb      	ldr	r3, [r7, #24]
 8005572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005576:	2b00      	cmp	r3, #0
 8005578:	d005      	beq.n	8005586 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 f945 	bl	800580a <UART_EndTransmit_IT>
    return;
 8005580:	bf00      	nop
 8005582:	e000      	b.n	8005586 <HAL_UART_IRQHandler+0x1f6>
    return;
 8005584:	bf00      	nop
  }
}
 8005586:	3720      	adds	r7, #32
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}
 800558c:	08005737 	.word	0x08005737

08005590 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005598:	bf00      	nop
 800559a:	370c      	adds	r7, #12
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80055ac:	bf00      	nop
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80055c0:	bf00      	nop
 80055c2:	370c      	adds	r7, #12
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d8:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d113      	bne.n	8005610 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2200      	movs	r2, #0
 80055ec:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	695a      	ldr	r2, [r3, #20]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80055fc:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	68da      	ldr	r2, [r3, #12]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800560c:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800560e:	e002      	b.n	8005616 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8005610:	68f8      	ldr	r0, [r7, #12]
 8005612:	f7fc fd3f 	bl	8002094 <HAL_UART_TxCpltCallback>
}
 8005616:	bf00      	nop
 8005618:	3710      	adds	r7, #16
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}

0800561e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800561e:	b580      	push	{r7, lr}
 8005620:	b084      	sub	sp, #16
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800562a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800562c:	68f8      	ldr	r0, [r7, #12]
 800562e:	f7ff ffaf 	bl	8005590 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005632:	bf00      	nop
 8005634:	3710      	adds	r7, #16
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}

0800563a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800563a:	b580      	push	{r7, lr}
 800563c:	b084      	sub	sp, #16
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005642:	2300      	movs	r3, #0
 8005644:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800564a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	695b      	ldr	r3, [r3, #20]
 8005652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005656:	2b80      	cmp	r3, #128	; 0x80
 8005658:	bf0c      	ite	eq
 800565a:	2301      	moveq	r3, #1
 800565c:	2300      	movne	r3, #0
 800565e:	b2db      	uxtb	r3, r3
 8005660:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005668:	b2db      	uxtb	r3, r3
 800566a:	2b21      	cmp	r3, #33	; 0x21
 800566c:	d108      	bne.n	8005680 <UART_DMAError+0x46>
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d005      	beq.n	8005680 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	2200      	movs	r2, #0
 8005678:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800567a:	68b8      	ldr	r0, [r7, #8]
 800567c:	f000 f827 	bl	80056ce <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	695b      	ldr	r3, [r3, #20]
 8005686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800568a:	2b40      	cmp	r3, #64	; 0x40
 800568c:	bf0c      	ite	eq
 800568e:	2301      	moveq	r3, #1
 8005690:	2300      	movne	r3, #0
 8005692:	b2db      	uxtb	r3, r3
 8005694:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800569c:	b2db      	uxtb	r3, r3
 800569e:	2b22      	cmp	r3, #34	; 0x22
 80056a0:	d108      	bne.n	80056b4 <UART_DMAError+0x7a>
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d005      	beq.n	80056b4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	2200      	movs	r2, #0
 80056ac:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80056ae:	68b8      	ldr	r0, [r7, #8]
 80056b0:	f000 f823 	bl	80056fa <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056b8:	f043 0210 	orr.w	r2, r3, #16
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80056c0:	68b8      	ldr	r0, [r7, #8]
 80056c2:	f7ff ff79 	bl	80055b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056c6:	bf00      	nop
 80056c8:	3710      	adds	r7, #16
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}

080056ce <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80056ce:	b480      	push	{r7}
 80056d0:	b083      	sub	sp, #12
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	68da      	ldr	r2, [r3, #12]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80056e4:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2220      	movs	r2, #32
 80056ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80056ee:	bf00      	nop
 80056f0:	370c      	adds	r7, #12
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr

080056fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056fa:	b480      	push	{r7}
 80056fc:	b083      	sub	sp, #12
 80056fe:	af00      	add	r7, sp, #0
 8005700:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	68da      	ldr	r2, [r3, #12]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005710:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	695a      	ldr	r2, [r3, #20]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f022 0201 	bic.w	r2, r2, #1
 8005720:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2220      	movs	r2, #32
 8005726:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800572a:	bf00      	nop
 800572c:	370c      	adds	r7, #12
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr

08005736 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005736:	b580      	push	{r7, lr}
 8005738:	b084      	sub	sp, #16
 800573a:	af00      	add	r7, sp, #0
 800573c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005742:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2200      	movs	r2, #0
 8005748:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2200      	movs	r2, #0
 800574e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005750:	68f8      	ldr	r0, [r7, #12]
 8005752:	f7ff ff31 	bl	80055b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005756:	bf00      	nop
 8005758:	3710      	adds	r7, #16
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}

0800575e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800575e:	b480      	push	{r7}
 8005760:	b085      	sub	sp, #20
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800576c:	b2db      	uxtb	r3, r3
 800576e:	2b21      	cmp	r3, #33	; 0x21
 8005770:	d144      	bne.n	80057fc <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800577a:	d11a      	bne.n	80057b2 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6a1b      	ldr	r3, [r3, #32]
 8005780:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	881b      	ldrh	r3, [r3, #0]
 8005786:	461a      	mov	r2, r3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005790:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d105      	bne.n	80057a6 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6a1b      	ldr	r3, [r3, #32]
 800579e:	1c9a      	adds	r2, r3, #2
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	621a      	str	r2, [r3, #32]
 80057a4:	e00e      	b.n	80057c4 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a1b      	ldr	r3, [r3, #32]
 80057aa:	1c5a      	adds	r2, r3, #1
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	621a      	str	r2, [r3, #32]
 80057b0:	e008      	b.n	80057c4 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a1b      	ldr	r3, [r3, #32]
 80057b6:	1c59      	adds	r1, r3, #1
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	6211      	str	r1, [r2, #32]
 80057bc:	781a      	ldrb	r2, [r3, #0]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	3b01      	subs	r3, #1
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	4619      	mov	r1, r3
 80057d2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d10f      	bne.n	80057f8 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68da      	ldr	r2, [r3, #12]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057e6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	68da      	ldr	r2, [r3, #12]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057f6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80057f8:	2300      	movs	r3, #0
 80057fa:	e000      	b.n	80057fe <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80057fc:	2302      	movs	r3, #2
  }
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3714      	adds	r7, #20
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr

0800580a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800580a:	b580      	push	{r7, lr}
 800580c:	b082      	sub	sp, #8
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	68da      	ldr	r2, [r3, #12]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005820:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2220      	movs	r2, #32
 8005826:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f7fc fc32 	bl	8002094 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	3708      	adds	r7, #8
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}

0800583a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800583a:	b580      	push	{r7, lr}
 800583c:	b084      	sub	sp, #16
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005848:	b2db      	uxtb	r3, r3
 800584a:	2b22      	cmp	r3, #34	; 0x22
 800584c:	d171      	bne.n	8005932 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005856:	d123      	bne.n	80058a0 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800585c:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d10e      	bne.n	8005884 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	b29b      	uxth	r3, r3
 800586e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005872:	b29a      	uxth	r2, r3
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800587c:	1c9a      	adds	r2, r3, #2
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	629a      	str	r2, [r3, #40]	; 0x28
 8005882:	e029      	b.n	80058d8 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	b29b      	uxth	r3, r3
 800588c:	b2db      	uxtb	r3, r3
 800588e:	b29a      	uxth	r2, r3
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005898:	1c5a      	adds	r2, r3, #1
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	629a      	str	r2, [r3, #40]	; 0x28
 800589e:	e01b      	b.n	80058d8 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	691b      	ldr	r3, [r3, #16]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d10a      	bne.n	80058be <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	6858      	ldr	r0, [r3, #4]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b2:	1c59      	adds	r1, r3, #1
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	6291      	str	r1, [r2, #40]	; 0x28
 80058b8:	b2c2      	uxtb	r2, r0
 80058ba:	701a      	strb	r2, [r3, #0]
 80058bc:	e00c      	b.n	80058d8 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	b2da      	uxtb	r2, r3
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ca:	1c58      	adds	r0, r3, #1
 80058cc:	6879      	ldr	r1, [r7, #4]
 80058ce:	6288      	str	r0, [r1, #40]	; 0x28
 80058d0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80058d4:	b2d2      	uxtb	r2, r2
 80058d6:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058dc:	b29b      	uxth	r3, r3
 80058de:	3b01      	subs	r3, #1
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	4619      	mov	r1, r3
 80058e6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d120      	bne.n	800592e <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68da      	ldr	r2, [r3, #12]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f022 0220 	bic.w	r2, r2, #32
 80058fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	68da      	ldr	r2, [r3, #12]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800590a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	695a      	ldr	r2, [r3, #20]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f022 0201 	bic.w	r2, r2, #1
 800591a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2220      	movs	r2, #32
 8005920:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f7ff fe3d 	bl	80055a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800592a:	2300      	movs	r3, #0
 800592c:	e002      	b.n	8005934 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800592e:	2300      	movs	r3, #0
 8005930:	e000      	b.n	8005934 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005932:	2302      	movs	r3, #2
  }
}
 8005934:	4618      	mov	r0, r3
 8005936:	3710      	adds	r7, #16
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800593c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005940:	b085      	sub	sp, #20
 8005942:	af00      	add	r7, sp, #0
 8005944:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	691b      	ldr	r3, [r3, #16]
 800594c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	68da      	ldr	r2, [r3, #12]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	430a      	orrs	r2, r1
 800595a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	689a      	ldr	r2, [r3, #8]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	691b      	ldr	r3, [r3, #16]
 8005964:	431a      	orrs	r2, r3
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	695b      	ldr	r3, [r3, #20]
 800596a:	431a      	orrs	r2, r3
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	69db      	ldr	r3, [r3, #28]
 8005970:	4313      	orrs	r3, r2
 8005972:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800597e:	f023 030c 	bic.w	r3, r3, #12
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	6812      	ldr	r2, [r2, #0]
 8005986:	68f9      	ldr	r1, [r7, #12]
 8005988:	430b      	orrs	r3, r1
 800598a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	695b      	ldr	r3, [r3, #20]
 8005992:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	699a      	ldr	r2, [r3, #24]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	430a      	orrs	r2, r1
 80059a0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	69db      	ldr	r3, [r3, #28]
 80059a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059aa:	f040 818b 	bne.w	8005cc4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4ac1      	ldr	r2, [pc, #772]	; (8005cb8 <UART_SetConfig+0x37c>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d005      	beq.n	80059c4 <UART_SetConfig+0x88>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4abf      	ldr	r2, [pc, #764]	; (8005cbc <UART_SetConfig+0x380>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	f040 80bd 	bne.w	8005b3e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80059c4:	f7fe fd40 	bl	8004448 <HAL_RCC_GetPCLK2Freq>
 80059c8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	461d      	mov	r5, r3
 80059ce:	f04f 0600 	mov.w	r6, #0
 80059d2:	46a8      	mov	r8, r5
 80059d4:	46b1      	mov	r9, r6
 80059d6:	eb18 0308 	adds.w	r3, r8, r8
 80059da:	eb49 0409 	adc.w	r4, r9, r9
 80059de:	4698      	mov	r8, r3
 80059e0:	46a1      	mov	r9, r4
 80059e2:	eb18 0805 	adds.w	r8, r8, r5
 80059e6:	eb49 0906 	adc.w	r9, r9, r6
 80059ea:	f04f 0100 	mov.w	r1, #0
 80059ee:	f04f 0200 	mov.w	r2, #0
 80059f2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80059f6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80059fa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80059fe:	4688      	mov	r8, r1
 8005a00:	4691      	mov	r9, r2
 8005a02:	eb18 0005 	adds.w	r0, r8, r5
 8005a06:	eb49 0106 	adc.w	r1, r9, r6
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	461d      	mov	r5, r3
 8005a10:	f04f 0600 	mov.w	r6, #0
 8005a14:	196b      	adds	r3, r5, r5
 8005a16:	eb46 0406 	adc.w	r4, r6, r6
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	4623      	mov	r3, r4
 8005a1e:	f7fb f8ad 	bl	8000b7c <__aeabi_uldivmod>
 8005a22:	4603      	mov	r3, r0
 8005a24:	460c      	mov	r4, r1
 8005a26:	461a      	mov	r2, r3
 8005a28:	4ba5      	ldr	r3, [pc, #660]	; (8005cc0 <UART_SetConfig+0x384>)
 8005a2a:	fba3 2302 	umull	r2, r3, r3, r2
 8005a2e:	095b      	lsrs	r3, r3, #5
 8005a30:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	461d      	mov	r5, r3
 8005a38:	f04f 0600 	mov.w	r6, #0
 8005a3c:	46a9      	mov	r9, r5
 8005a3e:	46b2      	mov	sl, r6
 8005a40:	eb19 0309 	adds.w	r3, r9, r9
 8005a44:	eb4a 040a 	adc.w	r4, sl, sl
 8005a48:	4699      	mov	r9, r3
 8005a4a:	46a2      	mov	sl, r4
 8005a4c:	eb19 0905 	adds.w	r9, r9, r5
 8005a50:	eb4a 0a06 	adc.w	sl, sl, r6
 8005a54:	f04f 0100 	mov.w	r1, #0
 8005a58:	f04f 0200 	mov.w	r2, #0
 8005a5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a60:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005a64:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005a68:	4689      	mov	r9, r1
 8005a6a:	4692      	mov	sl, r2
 8005a6c:	eb19 0005 	adds.w	r0, r9, r5
 8005a70:	eb4a 0106 	adc.w	r1, sl, r6
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	461d      	mov	r5, r3
 8005a7a:	f04f 0600 	mov.w	r6, #0
 8005a7e:	196b      	adds	r3, r5, r5
 8005a80:	eb46 0406 	adc.w	r4, r6, r6
 8005a84:	461a      	mov	r2, r3
 8005a86:	4623      	mov	r3, r4
 8005a88:	f7fb f878 	bl	8000b7c <__aeabi_uldivmod>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	460c      	mov	r4, r1
 8005a90:	461a      	mov	r2, r3
 8005a92:	4b8b      	ldr	r3, [pc, #556]	; (8005cc0 <UART_SetConfig+0x384>)
 8005a94:	fba3 1302 	umull	r1, r3, r3, r2
 8005a98:	095b      	lsrs	r3, r3, #5
 8005a9a:	2164      	movs	r1, #100	; 0x64
 8005a9c:	fb01 f303 	mul.w	r3, r1, r3
 8005aa0:	1ad3      	subs	r3, r2, r3
 8005aa2:	00db      	lsls	r3, r3, #3
 8005aa4:	3332      	adds	r3, #50	; 0x32
 8005aa6:	4a86      	ldr	r2, [pc, #536]	; (8005cc0 <UART_SetConfig+0x384>)
 8005aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8005aac:	095b      	lsrs	r3, r3, #5
 8005aae:	005b      	lsls	r3, r3, #1
 8005ab0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005ab4:	4498      	add	r8, r3
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	461d      	mov	r5, r3
 8005aba:	f04f 0600 	mov.w	r6, #0
 8005abe:	46a9      	mov	r9, r5
 8005ac0:	46b2      	mov	sl, r6
 8005ac2:	eb19 0309 	adds.w	r3, r9, r9
 8005ac6:	eb4a 040a 	adc.w	r4, sl, sl
 8005aca:	4699      	mov	r9, r3
 8005acc:	46a2      	mov	sl, r4
 8005ace:	eb19 0905 	adds.w	r9, r9, r5
 8005ad2:	eb4a 0a06 	adc.w	sl, sl, r6
 8005ad6:	f04f 0100 	mov.w	r1, #0
 8005ada:	f04f 0200 	mov.w	r2, #0
 8005ade:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ae2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005ae6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005aea:	4689      	mov	r9, r1
 8005aec:	4692      	mov	sl, r2
 8005aee:	eb19 0005 	adds.w	r0, r9, r5
 8005af2:	eb4a 0106 	adc.w	r1, sl, r6
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	461d      	mov	r5, r3
 8005afc:	f04f 0600 	mov.w	r6, #0
 8005b00:	196b      	adds	r3, r5, r5
 8005b02:	eb46 0406 	adc.w	r4, r6, r6
 8005b06:	461a      	mov	r2, r3
 8005b08:	4623      	mov	r3, r4
 8005b0a:	f7fb f837 	bl	8000b7c <__aeabi_uldivmod>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	460c      	mov	r4, r1
 8005b12:	461a      	mov	r2, r3
 8005b14:	4b6a      	ldr	r3, [pc, #424]	; (8005cc0 <UART_SetConfig+0x384>)
 8005b16:	fba3 1302 	umull	r1, r3, r3, r2
 8005b1a:	095b      	lsrs	r3, r3, #5
 8005b1c:	2164      	movs	r1, #100	; 0x64
 8005b1e:	fb01 f303 	mul.w	r3, r1, r3
 8005b22:	1ad3      	subs	r3, r2, r3
 8005b24:	00db      	lsls	r3, r3, #3
 8005b26:	3332      	adds	r3, #50	; 0x32
 8005b28:	4a65      	ldr	r2, [pc, #404]	; (8005cc0 <UART_SetConfig+0x384>)
 8005b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b2e:	095b      	lsrs	r3, r3, #5
 8005b30:	f003 0207 	and.w	r2, r3, #7
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4442      	add	r2, r8
 8005b3a:	609a      	str	r2, [r3, #8]
 8005b3c:	e26f      	b.n	800601e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b3e:	f7fe fc6f 	bl	8004420 <HAL_RCC_GetPCLK1Freq>
 8005b42:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	461d      	mov	r5, r3
 8005b48:	f04f 0600 	mov.w	r6, #0
 8005b4c:	46a8      	mov	r8, r5
 8005b4e:	46b1      	mov	r9, r6
 8005b50:	eb18 0308 	adds.w	r3, r8, r8
 8005b54:	eb49 0409 	adc.w	r4, r9, r9
 8005b58:	4698      	mov	r8, r3
 8005b5a:	46a1      	mov	r9, r4
 8005b5c:	eb18 0805 	adds.w	r8, r8, r5
 8005b60:	eb49 0906 	adc.w	r9, r9, r6
 8005b64:	f04f 0100 	mov.w	r1, #0
 8005b68:	f04f 0200 	mov.w	r2, #0
 8005b6c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005b70:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005b74:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005b78:	4688      	mov	r8, r1
 8005b7a:	4691      	mov	r9, r2
 8005b7c:	eb18 0005 	adds.w	r0, r8, r5
 8005b80:	eb49 0106 	adc.w	r1, r9, r6
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	461d      	mov	r5, r3
 8005b8a:	f04f 0600 	mov.w	r6, #0
 8005b8e:	196b      	adds	r3, r5, r5
 8005b90:	eb46 0406 	adc.w	r4, r6, r6
 8005b94:	461a      	mov	r2, r3
 8005b96:	4623      	mov	r3, r4
 8005b98:	f7fa fff0 	bl	8000b7c <__aeabi_uldivmod>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	460c      	mov	r4, r1
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	4b47      	ldr	r3, [pc, #284]	; (8005cc0 <UART_SetConfig+0x384>)
 8005ba4:	fba3 2302 	umull	r2, r3, r3, r2
 8005ba8:	095b      	lsrs	r3, r3, #5
 8005baa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	461d      	mov	r5, r3
 8005bb2:	f04f 0600 	mov.w	r6, #0
 8005bb6:	46a9      	mov	r9, r5
 8005bb8:	46b2      	mov	sl, r6
 8005bba:	eb19 0309 	adds.w	r3, r9, r9
 8005bbe:	eb4a 040a 	adc.w	r4, sl, sl
 8005bc2:	4699      	mov	r9, r3
 8005bc4:	46a2      	mov	sl, r4
 8005bc6:	eb19 0905 	adds.w	r9, r9, r5
 8005bca:	eb4a 0a06 	adc.w	sl, sl, r6
 8005bce:	f04f 0100 	mov.w	r1, #0
 8005bd2:	f04f 0200 	mov.w	r2, #0
 8005bd6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005bda:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005bde:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005be2:	4689      	mov	r9, r1
 8005be4:	4692      	mov	sl, r2
 8005be6:	eb19 0005 	adds.w	r0, r9, r5
 8005bea:	eb4a 0106 	adc.w	r1, sl, r6
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	461d      	mov	r5, r3
 8005bf4:	f04f 0600 	mov.w	r6, #0
 8005bf8:	196b      	adds	r3, r5, r5
 8005bfa:	eb46 0406 	adc.w	r4, r6, r6
 8005bfe:	461a      	mov	r2, r3
 8005c00:	4623      	mov	r3, r4
 8005c02:	f7fa ffbb 	bl	8000b7c <__aeabi_uldivmod>
 8005c06:	4603      	mov	r3, r0
 8005c08:	460c      	mov	r4, r1
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	4b2c      	ldr	r3, [pc, #176]	; (8005cc0 <UART_SetConfig+0x384>)
 8005c0e:	fba3 1302 	umull	r1, r3, r3, r2
 8005c12:	095b      	lsrs	r3, r3, #5
 8005c14:	2164      	movs	r1, #100	; 0x64
 8005c16:	fb01 f303 	mul.w	r3, r1, r3
 8005c1a:	1ad3      	subs	r3, r2, r3
 8005c1c:	00db      	lsls	r3, r3, #3
 8005c1e:	3332      	adds	r3, #50	; 0x32
 8005c20:	4a27      	ldr	r2, [pc, #156]	; (8005cc0 <UART_SetConfig+0x384>)
 8005c22:	fba2 2303 	umull	r2, r3, r2, r3
 8005c26:	095b      	lsrs	r3, r3, #5
 8005c28:	005b      	lsls	r3, r3, #1
 8005c2a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005c2e:	4498      	add	r8, r3
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	461d      	mov	r5, r3
 8005c34:	f04f 0600 	mov.w	r6, #0
 8005c38:	46a9      	mov	r9, r5
 8005c3a:	46b2      	mov	sl, r6
 8005c3c:	eb19 0309 	adds.w	r3, r9, r9
 8005c40:	eb4a 040a 	adc.w	r4, sl, sl
 8005c44:	4699      	mov	r9, r3
 8005c46:	46a2      	mov	sl, r4
 8005c48:	eb19 0905 	adds.w	r9, r9, r5
 8005c4c:	eb4a 0a06 	adc.w	sl, sl, r6
 8005c50:	f04f 0100 	mov.w	r1, #0
 8005c54:	f04f 0200 	mov.w	r2, #0
 8005c58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c5c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005c60:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005c64:	4689      	mov	r9, r1
 8005c66:	4692      	mov	sl, r2
 8005c68:	eb19 0005 	adds.w	r0, r9, r5
 8005c6c:	eb4a 0106 	adc.w	r1, sl, r6
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	461d      	mov	r5, r3
 8005c76:	f04f 0600 	mov.w	r6, #0
 8005c7a:	196b      	adds	r3, r5, r5
 8005c7c:	eb46 0406 	adc.w	r4, r6, r6
 8005c80:	461a      	mov	r2, r3
 8005c82:	4623      	mov	r3, r4
 8005c84:	f7fa ff7a 	bl	8000b7c <__aeabi_uldivmod>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	460c      	mov	r4, r1
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	4b0c      	ldr	r3, [pc, #48]	; (8005cc0 <UART_SetConfig+0x384>)
 8005c90:	fba3 1302 	umull	r1, r3, r3, r2
 8005c94:	095b      	lsrs	r3, r3, #5
 8005c96:	2164      	movs	r1, #100	; 0x64
 8005c98:	fb01 f303 	mul.w	r3, r1, r3
 8005c9c:	1ad3      	subs	r3, r2, r3
 8005c9e:	00db      	lsls	r3, r3, #3
 8005ca0:	3332      	adds	r3, #50	; 0x32
 8005ca2:	4a07      	ldr	r2, [pc, #28]	; (8005cc0 <UART_SetConfig+0x384>)
 8005ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ca8:	095b      	lsrs	r3, r3, #5
 8005caa:	f003 0207 	and.w	r2, r3, #7
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4442      	add	r2, r8
 8005cb4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005cb6:	e1b2      	b.n	800601e <UART_SetConfig+0x6e2>
 8005cb8:	40011000 	.word	0x40011000
 8005cbc:	40011400 	.word	0x40011400
 8005cc0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4ad7      	ldr	r2, [pc, #860]	; (8006028 <UART_SetConfig+0x6ec>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d005      	beq.n	8005cda <UART_SetConfig+0x39e>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4ad6      	ldr	r2, [pc, #856]	; (800602c <UART_SetConfig+0x6f0>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	f040 80d1 	bne.w	8005e7c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005cda:	f7fe fbb5 	bl	8004448 <HAL_RCC_GetPCLK2Freq>
 8005cde:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	469a      	mov	sl, r3
 8005ce4:	f04f 0b00 	mov.w	fp, #0
 8005ce8:	46d0      	mov	r8, sl
 8005cea:	46d9      	mov	r9, fp
 8005cec:	eb18 0308 	adds.w	r3, r8, r8
 8005cf0:	eb49 0409 	adc.w	r4, r9, r9
 8005cf4:	4698      	mov	r8, r3
 8005cf6:	46a1      	mov	r9, r4
 8005cf8:	eb18 080a 	adds.w	r8, r8, sl
 8005cfc:	eb49 090b 	adc.w	r9, r9, fp
 8005d00:	f04f 0100 	mov.w	r1, #0
 8005d04:	f04f 0200 	mov.w	r2, #0
 8005d08:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005d0c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005d10:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005d14:	4688      	mov	r8, r1
 8005d16:	4691      	mov	r9, r2
 8005d18:	eb1a 0508 	adds.w	r5, sl, r8
 8005d1c:	eb4b 0609 	adc.w	r6, fp, r9
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	4619      	mov	r1, r3
 8005d26:	f04f 0200 	mov.w	r2, #0
 8005d2a:	f04f 0300 	mov.w	r3, #0
 8005d2e:	f04f 0400 	mov.w	r4, #0
 8005d32:	0094      	lsls	r4, r2, #2
 8005d34:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005d38:	008b      	lsls	r3, r1, #2
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	4623      	mov	r3, r4
 8005d3e:	4628      	mov	r0, r5
 8005d40:	4631      	mov	r1, r6
 8005d42:	f7fa ff1b 	bl	8000b7c <__aeabi_uldivmod>
 8005d46:	4603      	mov	r3, r0
 8005d48:	460c      	mov	r4, r1
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	4bb8      	ldr	r3, [pc, #736]	; (8006030 <UART_SetConfig+0x6f4>)
 8005d4e:	fba3 2302 	umull	r2, r3, r3, r2
 8005d52:	095b      	lsrs	r3, r3, #5
 8005d54:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	469b      	mov	fp, r3
 8005d5c:	f04f 0c00 	mov.w	ip, #0
 8005d60:	46d9      	mov	r9, fp
 8005d62:	46e2      	mov	sl, ip
 8005d64:	eb19 0309 	adds.w	r3, r9, r9
 8005d68:	eb4a 040a 	adc.w	r4, sl, sl
 8005d6c:	4699      	mov	r9, r3
 8005d6e:	46a2      	mov	sl, r4
 8005d70:	eb19 090b 	adds.w	r9, r9, fp
 8005d74:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005d78:	f04f 0100 	mov.w	r1, #0
 8005d7c:	f04f 0200 	mov.w	r2, #0
 8005d80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d84:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005d88:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005d8c:	4689      	mov	r9, r1
 8005d8e:	4692      	mov	sl, r2
 8005d90:	eb1b 0509 	adds.w	r5, fp, r9
 8005d94:	eb4c 060a 	adc.w	r6, ip, sl
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	4619      	mov	r1, r3
 8005d9e:	f04f 0200 	mov.w	r2, #0
 8005da2:	f04f 0300 	mov.w	r3, #0
 8005da6:	f04f 0400 	mov.w	r4, #0
 8005daa:	0094      	lsls	r4, r2, #2
 8005dac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005db0:	008b      	lsls	r3, r1, #2
 8005db2:	461a      	mov	r2, r3
 8005db4:	4623      	mov	r3, r4
 8005db6:	4628      	mov	r0, r5
 8005db8:	4631      	mov	r1, r6
 8005dba:	f7fa fedf 	bl	8000b7c <__aeabi_uldivmod>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	460c      	mov	r4, r1
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	4b9a      	ldr	r3, [pc, #616]	; (8006030 <UART_SetConfig+0x6f4>)
 8005dc6:	fba3 1302 	umull	r1, r3, r3, r2
 8005dca:	095b      	lsrs	r3, r3, #5
 8005dcc:	2164      	movs	r1, #100	; 0x64
 8005dce:	fb01 f303 	mul.w	r3, r1, r3
 8005dd2:	1ad3      	subs	r3, r2, r3
 8005dd4:	011b      	lsls	r3, r3, #4
 8005dd6:	3332      	adds	r3, #50	; 0x32
 8005dd8:	4a95      	ldr	r2, [pc, #596]	; (8006030 <UART_SetConfig+0x6f4>)
 8005dda:	fba2 2303 	umull	r2, r3, r2, r3
 8005dde:	095b      	lsrs	r3, r3, #5
 8005de0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005de4:	4498      	add	r8, r3
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	469b      	mov	fp, r3
 8005dea:	f04f 0c00 	mov.w	ip, #0
 8005dee:	46d9      	mov	r9, fp
 8005df0:	46e2      	mov	sl, ip
 8005df2:	eb19 0309 	adds.w	r3, r9, r9
 8005df6:	eb4a 040a 	adc.w	r4, sl, sl
 8005dfa:	4699      	mov	r9, r3
 8005dfc:	46a2      	mov	sl, r4
 8005dfe:	eb19 090b 	adds.w	r9, r9, fp
 8005e02:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005e06:	f04f 0100 	mov.w	r1, #0
 8005e0a:	f04f 0200 	mov.w	r2, #0
 8005e0e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e12:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005e16:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005e1a:	4689      	mov	r9, r1
 8005e1c:	4692      	mov	sl, r2
 8005e1e:	eb1b 0509 	adds.w	r5, fp, r9
 8005e22:	eb4c 060a 	adc.w	r6, ip, sl
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	f04f 0200 	mov.w	r2, #0
 8005e30:	f04f 0300 	mov.w	r3, #0
 8005e34:	f04f 0400 	mov.w	r4, #0
 8005e38:	0094      	lsls	r4, r2, #2
 8005e3a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005e3e:	008b      	lsls	r3, r1, #2
 8005e40:	461a      	mov	r2, r3
 8005e42:	4623      	mov	r3, r4
 8005e44:	4628      	mov	r0, r5
 8005e46:	4631      	mov	r1, r6
 8005e48:	f7fa fe98 	bl	8000b7c <__aeabi_uldivmod>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	460c      	mov	r4, r1
 8005e50:	461a      	mov	r2, r3
 8005e52:	4b77      	ldr	r3, [pc, #476]	; (8006030 <UART_SetConfig+0x6f4>)
 8005e54:	fba3 1302 	umull	r1, r3, r3, r2
 8005e58:	095b      	lsrs	r3, r3, #5
 8005e5a:	2164      	movs	r1, #100	; 0x64
 8005e5c:	fb01 f303 	mul.w	r3, r1, r3
 8005e60:	1ad3      	subs	r3, r2, r3
 8005e62:	011b      	lsls	r3, r3, #4
 8005e64:	3332      	adds	r3, #50	; 0x32
 8005e66:	4a72      	ldr	r2, [pc, #456]	; (8006030 <UART_SetConfig+0x6f4>)
 8005e68:	fba2 2303 	umull	r2, r3, r2, r3
 8005e6c:	095b      	lsrs	r3, r3, #5
 8005e6e:	f003 020f 	and.w	r2, r3, #15
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4442      	add	r2, r8
 8005e78:	609a      	str	r2, [r3, #8]
 8005e7a:	e0d0      	b.n	800601e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e7c:	f7fe fad0 	bl	8004420 <HAL_RCC_GetPCLK1Freq>
 8005e80:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	469a      	mov	sl, r3
 8005e86:	f04f 0b00 	mov.w	fp, #0
 8005e8a:	46d0      	mov	r8, sl
 8005e8c:	46d9      	mov	r9, fp
 8005e8e:	eb18 0308 	adds.w	r3, r8, r8
 8005e92:	eb49 0409 	adc.w	r4, r9, r9
 8005e96:	4698      	mov	r8, r3
 8005e98:	46a1      	mov	r9, r4
 8005e9a:	eb18 080a 	adds.w	r8, r8, sl
 8005e9e:	eb49 090b 	adc.w	r9, r9, fp
 8005ea2:	f04f 0100 	mov.w	r1, #0
 8005ea6:	f04f 0200 	mov.w	r2, #0
 8005eaa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005eae:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005eb2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005eb6:	4688      	mov	r8, r1
 8005eb8:	4691      	mov	r9, r2
 8005eba:	eb1a 0508 	adds.w	r5, sl, r8
 8005ebe:	eb4b 0609 	adc.w	r6, fp, r9
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	f04f 0200 	mov.w	r2, #0
 8005ecc:	f04f 0300 	mov.w	r3, #0
 8005ed0:	f04f 0400 	mov.w	r4, #0
 8005ed4:	0094      	lsls	r4, r2, #2
 8005ed6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005eda:	008b      	lsls	r3, r1, #2
 8005edc:	461a      	mov	r2, r3
 8005ede:	4623      	mov	r3, r4
 8005ee0:	4628      	mov	r0, r5
 8005ee2:	4631      	mov	r1, r6
 8005ee4:	f7fa fe4a 	bl	8000b7c <__aeabi_uldivmod>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	460c      	mov	r4, r1
 8005eec:	461a      	mov	r2, r3
 8005eee:	4b50      	ldr	r3, [pc, #320]	; (8006030 <UART_SetConfig+0x6f4>)
 8005ef0:	fba3 2302 	umull	r2, r3, r3, r2
 8005ef4:	095b      	lsrs	r3, r3, #5
 8005ef6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	469b      	mov	fp, r3
 8005efe:	f04f 0c00 	mov.w	ip, #0
 8005f02:	46d9      	mov	r9, fp
 8005f04:	46e2      	mov	sl, ip
 8005f06:	eb19 0309 	adds.w	r3, r9, r9
 8005f0a:	eb4a 040a 	adc.w	r4, sl, sl
 8005f0e:	4699      	mov	r9, r3
 8005f10:	46a2      	mov	sl, r4
 8005f12:	eb19 090b 	adds.w	r9, r9, fp
 8005f16:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005f1a:	f04f 0100 	mov.w	r1, #0
 8005f1e:	f04f 0200 	mov.w	r2, #0
 8005f22:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f26:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005f2a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005f2e:	4689      	mov	r9, r1
 8005f30:	4692      	mov	sl, r2
 8005f32:	eb1b 0509 	adds.w	r5, fp, r9
 8005f36:	eb4c 060a 	adc.w	r6, ip, sl
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	4619      	mov	r1, r3
 8005f40:	f04f 0200 	mov.w	r2, #0
 8005f44:	f04f 0300 	mov.w	r3, #0
 8005f48:	f04f 0400 	mov.w	r4, #0
 8005f4c:	0094      	lsls	r4, r2, #2
 8005f4e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005f52:	008b      	lsls	r3, r1, #2
 8005f54:	461a      	mov	r2, r3
 8005f56:	4623      	mov	r3, r4
 8005f58:	4628      	mov	r0, r5
 8005f5a:	4631      	mov	r1, r6
 8005f5c:	f7fa fe0e 	bl	8000b7c <__aeabi_uldivmod>
 8005f60:	4603      	mov	r3, r0
 8005f62:	460c      	mov	r4, r1
 8005f64:	461a      	mov	r2, r3
 8005f66:	4b32      	ldr	r3, [pc, #200]	; (8006030 <UART_SetConfig+0x6f4>)
 8005f68:	fba3 1302 	umull	r1, r3, r3, r2
 8005f6c:	095b      	lsrs	r3, r3, #5
 8005f6e:	2164      	movs	r1, #100	; 0x64
 8005f70:	fb01 f303 	mul.w	r3, r1, r3
 8005f74:	1ad3      	subs	r3, r2, r3
 8005f76:	011b      	lsls	r3, r3, #4
 8005f78:	3332      	adds	r3, #50	; 0x32
 8005f7a:	4a2d      	ldr	r2, [pc, #180]	; (8006030 <UART_SetConfig+0x6f4>)
 8005f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f80:	095b      	lsrs	r3, r3, #5
 8005f82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f86:	4498      	add	r8, r3
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	469b      	mov	fp, r3
 8005f8c:	f04f 0c00 	mov.w	ip, #0
 8005f90:	46d9      	mov	r9, fp
 8005f92:	46e2      	mov	sl, ip
 8005f94:	eb19 0309 	adds.w	r3, r9, r9
 8005f98:	eb4a 040a 	adc.w	r4, sl, sl
 8005f9c:	4699      	mov	r9, r3
 8005f9e:	46a2      	mov	sl, r4
 8005fa0:	eb19 090b 	adds.w	r9, r9, fp
 8005fa4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005fa8:	f04f 0100 	mov.w	r1, #0
 8005fac:	f04f 0200 	mov.w	r2, #0
 8005fb0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005fb4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005fb8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005fbc:	4689      	mov	r9, r1
 8005fbe:	4692      	mov	sl, r2
 8005fc0:	eb1b 0509 	adds.w	r5, fp, r9
 8005fc4:	eb4c 060a 	adc.w	r6, ip, sl
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	4619      	mov	r1, r3
 8005fce:	f04f 0200 	mov.w	r2, #0
 8005fd2:	f04f 0300 	mov.w	r3, #0
 8005fd6:	f04f 0400 	mov.w	r4, #0
 8005fda:	0094      	lsls	r4, r2, #2
 8005fdc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005fe0:	008b      	lsls	r3, r1, #2
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	4623      	mov	r3, r4
 8005fe6:	4628      	mov	r0, r5
 8005fe8:	4631      	mov	r1, r6
 8005fea:	f7fa fdc7 	bl	8000b7c <__aeabi_uldivmod>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	460c      	mov	r4, r1
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	4b0e      	ldr	r3, [pc, #56]	; (8006030 <UART_SetConfig+0x6f4>)
 8005ff6:	fba3 1302 	umull	r1, r3, r3, r2
 8005ffa:	095b      	lsrs	r3, r3, #5
 8005ffc:	2164      	movs	r1, #100	; 0x64
 8005ffe:	fb01 f303 	mul.w	r3, r1, r3
 8006002:	1ad3      	subs	r3, r2, r3
 8006004:	011b      	lsls	r3, r3, #4
 8006006:	3332      	adds	r3, #50	; 0x32
 8006008:	4a09      	ldr	r2, [pc, #36]	; (8006030 <UART_SetConfig+0x6f4>)
 800600a:	fba2 2303 	umull	r2, r3, r2, r3
 800600e:	095b      	lsrs	r3, r3, #5
 8006010:	f003 020f 	and.w	r2, r3, #15
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4442      	add	r2, r8
 800601a:	609a      	str	r2, [r3, #8]
}
 800601c:	e7ff      	b.n	800601e <UART_SetConfig+0x6e2>
 800601e:	bf00      	nop
 8006020:	3714      	adds	r7, #20
 8006022:	46bd      	mov	sp, r7
 8006024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006028:	40011000 	.word	0x40011000
 800602c:	40011400 	.word	0x40011400
 8006030:	51eb851f 	.word	0x51eb851f

08006034 <__errno>:
 8006034:	4b01      	ldr	r3, [pc, #4]	; (800603c <__errno+0x8>)
 8006036:	6818      	ldr	r0, [r3, #0]
 8006038:	4770      	bx	lr
 800603a:	bf00      	nop
 800603c:	20000034 	.word	0x20000034

08006040 <__libc_init_array>:
 8006040:	b570      	push	{r4, r5, r6, lr}
 8006042:	4e0d      	ldr	r6, [pc, #52]	; (8006078 <__libc_init_array+0x38>)
 8006044:	4c0d      	ldr	r4, [pc, #52]	; (800607c <__libc_init_array+0x3c>)
 8006046:	1ba4      	subs	r4, r4, r6
 8006048:	10a4      	asrs	r4, r4, #2
 800604a:	2500      	movs	r5, #0
 800604c:	42a5      	cmp	r5, r4
 800604e:	d109      	bne.n	8006064 <__libc_init_array+0x24>
 8006050:	4e0b      	ldr	r6, [pc, #44]	; (8006080 <__libc_init_array+0x40>)
 8006052:	4c0c      	ldr	r4, [pc, #48]	; (8006084 <__libc_init_array+0x44>)
 8006054:	f000 fc3a 	bl	80068cc <_init>
 8006058:	1ba4      	subs	r4, r4, r6
 800605a:	10a4      	asrs	r4, r4, #2
 800605c:	2500      	movs	r5, #0
 800605e:	42a5      	cmp	r5, r4
 8006060:	d105      	bne.n	800606e <__libc_init_array+0x2e>
 8006062:	bd70      	pop	{r4, r5, r6, pc}
 8006064:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006068:	4798      	blx	r3
 800606a:	3501      	adds	r5, #1
 800606c:	e7ee      	b.n	800604c <__libc_init_array+0xc>
 800606e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006072:	4798      	blx	r3
 8006074:	3501      	adds	r5, #1
 8006076:	e7f2      	b.n	800605e <__libc_init_array+0x1e>
 8006078:	0800694c 	.word	0x0800694c
 800607c:	0800694c 	.word	0x0800694c
 8006080:	0800694c 	.word	0x0800694c
 8006084:	08006950 	.word	0x08006950

08006088 <memset>:
 8006088:	4402      	add	r2, r0
 800608a:	4603      	mov	r3, r0
 800608c:	4293      	cmp	r3, r2
 800608e:	d100      	bne.n	8006092 <memset+0xa>
 8006090:	4770      	bx	lr
 8006092:	f803 1b01 	strb.w	r1, [r3], #1
 8006096:	e7f9      	b.n	800608c <memset+0x4>

08006098 <sniprintf>:
 8006098:	b40c      	push	{r2, r3}
 800609a:	b530      	push	{r4, r5, lr}
 800609c:	4b17      	ldr	r3, [pc, #92]	; (80060fc <sniprintf+0x64>)
 800609e:	1e0c      	subs	r4, r1, #0
 80060a0:	b09d      	sub	sp, #116	; 0x74
 80060a2:	681d      	ldr	r5, [r3, #0]
 80060a4:	da08      	bge.n	80060b8 <sniprintf+0x20>
 80060a6:	238b      	movs	r3, #139	; 0x8b
 80060a8:	602b      	str	r3, [r5, #0]
 80060aa:	f04f 30ff 	mov.w	r0, #4294967295
 80060ae:	b01d      	add	sp, #116	; 0x74
 80060b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80060b4:	b002      	add	sp, #8
 80060b6:	4770      	bx	lr
 80060b8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80060bc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80060c0:	bf14      	ite	ne
 80060c2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80060c6:	4623      	moveq	r3, r4
 80060c8:	9304      	str	r3, [sp, #16]
 80060ca:	9307      	str	r3, [sp, #28]
 80060cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80060d0:	9002      	str	r0, [sp, #8]
 80060d2:	9006      	str	r0, [sp, #24]
 80060d4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80060d8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80060da:	ab21      	add	r3, sp, #132	; 0x84
 80060dc:	a902      	add	r1, sp, #8
 80060de:	4628      	mov	r0, r5
 80060e0:	9301      	str	r3, [sp, #4]
 80060e2:	f000 f867 	bl	80061b4 <_svfiprintf_r>
 80060e6:	1c43      	adds	r3, r0, #1
 80060e8:	bfbc      	itt	lt
 80060ea:	238b      	movlt	r3, #139	; 0x8b
 80060ec:	602b      	strlt	r3, [r5, #0]
 80060ee:	2c00      	cmp	r4, #0
 80060f0:	d0dd      	beq.n	80060ae <sniprintf+0x16>
 80060f2:	9b02      	ldr	r3, [sp, #8]
 80060f4:	2200      	movs	r2, #0
 80060f6:	701a      	strb	r2, [r3, #0]
 80060f8:	e7d9      	b.n	80060ae <sniprintf+0x16>
 80060fa:	bf00      	nop
 80060fc:	20000034 	.word	0x20000034

08006100 <__ssputs_r>:
 8006100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006104:	688e      	ldr	r6, [r1, #8]
 8006106:	429e      	cmp	r6, r3
 8006108:	4682      	mov	sl, r0
 800610a:	460c      	mov	r4, r1
 800610c:	4690      	mov	r8, r2
 800610e:	4699      	mov	r9, r3
 8006110:	d837      	bhi.n	8006182 <__ssputs_r+0x82>
 8006112:	898a      	ldrh	r2, [r1, #12]
 8006114:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006118:	d031      	beq.n	800617e <__ssputs_r+0x7e>
 800611a:	6825      	ldr	r5, [r4, #0]
 800611c:	6909      	ldr	r1, [r1, #16]
 800611e:	1a6f      	subs	r7, r5, r1
 8006120:	6965      	ldr	r5, [r4, #20]
 8006122:	2302      	movs	r3, #2
 8006124:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006128:	fb95 f5f3 	sdiv	r5, r5, r3
 800612c:	f109 0301 	add.w	r3, r9, #1
 8006130:	443b      	add	r3, r7
 8006132:	429d      	cmp	r5, r3
 8006134:	bf38      	it	cc
 8006136:	461d      	movcc	r5, r3
 8006138:	0553      	lsls	r3, r2, #21
 800613a:	d530      	bpl.n	800619e <__ssputs_r+0x9e>
 800613c:	4629      	mov	r1, r5
 800613e:	f000 fb2b 	bl	8006798 <_malloc_r>
 8006142:	4606      	mov	r6, r0
 8006144:	b950      	cbnz	r0, 800615c <__ssputs_r+0x5c>
 8006146:	230c      	movs	r3, #12
 8006148:	f8ca 3000 	str.w	r3, [sl]
 800614c:	89a3      	ldrh	r3, [r4, #12]
 800614e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006152:	81a3      	strh	r3, [r4, #12]
 8006154:	f04f 30ff 	mov.w	r0, #4294967295
 8006158:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800615c:	463a      	mov	r2, r7
 800615e:	6921      	ldr	r1, [r4, #16]
 8006160:	f000 faa8 	bl	80066b4 <memcpy>
 8006164:	89a3      	ldrh	r3, [r4, #12]
 8006166:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800616a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800616e:	81a3      	strh	r3, [r4, #12]
 8006170:	6126      	str	r6, [r4, #16]
 8006172:	6165      	str	r5, [r4, #20]
 8006174:	443e      	add	r6, r7
 8006176:	1bed      	subs	r5, r5, r7
 8006178:	6026      	str	r6, [r4, #0]
 800617a:	60a5      	str	r5, [r4, #8]
 800617c:	464e      	mov	r6, r9
 800617e:	454e      	cmp	r6, r9
 8006180:	d900      	bls.n	8006184 <__ssputs_r+0x84>
 8006182:	464e      	mov	r6, r9
 8006184:	4632      	mov	r2, r6
 8006186:	4641      	mov	r1, r8
 8006188:	6820      	ldr	r0, [r4, #0]
 800618a:	f000 fa9e 	bl	80066ca <memmove>
 800618e:	68a3      	ldr	r3, [r4, #8]
 8006190:	1b9b      	subs	r3, r3, r6
 8006192:	60a3      	str	r3, [r4, #8]
 8006194:	6823      	ldr	r3, [r4, #0]
 8006196:	441e      	add	r6, r3
 8006198:	6026      	str	r6, [r4, #0]
 800619a:	2000      	movs	r0, #0
 800619c:	e7dc      	b.n	8006158 <__ssputs_r+0x58>
 800619e:	462a      	mov	r2, r5
 80061a0:	f000 fb54 	bl	800684c <_realloc_r>
 80061a4:	4606      	mov	r6, r0
 80061a6:	2800      	cmp	r0, #0
 80061a8:	d1e2      	bne.n	8006170 <__ssputs_r+0x70>
 80061aa:	6921      	ldr	r1, [r4, #16]
 80061ac:	4650      	mov	r0, sl
 80061ae:	f000 faa5 	bl	80066fc <_free_r>
 80061b2:	e7c8      	b.n	8006146 <__ssputs_r+0x46>

080061b4 <_svfiprintf_r>:
 80061b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061b8:	461d      	mov	r5, r3
 80061ba:	898b      	ldrh	r3, [r1, #12]
 80061bc:	061f      	lsls	r7, r3, #24
 80061be:	b09d      	sub	sp, #116	; 0x74
 80061c0:	4680      	mov	r8, r0
 80061c2:	460c      	mov	r4, r1
 80061c4:	4616      	mov	r6, r2
 80061c6:	d50f      	bpl.n	80061e8 <_svfiprintf_r+0x34>
 80061c8:	690b      	ldr	r3, [r1, #16]
 80061ca:	b96b      	cbnz	r3, 80061e8 <_svfiprintf_r+0x34>
 80061cc:	2140      	movs	r1, #64	; 0x40
 80061ce:	f000 fae3 	bl	8006798 <_malloc_r>
 80061d2:	6020      	str	r0, [r4, #0]
 80061d4:	6120      	str	r0, [r4, #16]
 80061d6:	b928      	cbnz	r0, 80061e4 <_svfiprintf_r+0x30>
 80061d8:	230c      	movs	r3, #12
 80061da:	f8c8 3000 	str.w	r3, [r8]
 80061de:	f04f 30ff 	mov.w	r0, #4294967295
 80061e2:	e0c8      	b.n	8006376 <_svfiprintf_r+0x1c2>
 80061e4:	2340      	movs	r3, #64	; 0x40
 80061e6:	6163      	str	r3, [r4, #20]
 80061e8:	2300      	movs	r3, #0
 80061ea:	9309      	str	r3, [sp, #36]	; 0x24
 80061ec:	2320      	movs	r3, #32
 80061ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80061f2:	2330      	movs	r3, #48	; 0x30
 80061f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80061f8:	9503      	str	r5, [sp, #12]
 80061fa:	f04f 0b01 	mov.w	fp, #1
 80061fe:	4637      	mov	r7, r6
 8006200:	463d      	mov	r5, r7
 8006202:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006206:	b10b      	cbz	r3, 800620c <_svfiprintf_r+0x58>
 8006208:	2b25      	cmp	r3, #37	; 0x25
 800620a:	d13e      	bne.n	800628a <_svfiprintf_r+0xd6>
 800620c:	ebb7 0a06 	subs.w	sl, r7, r6
 8006210:	d00b      	beq.n	800622a <_svfiprintf_r+0x76>
 8006212:	4653      	mov	r3, sl
 8006214:	4632      	mov	r2, r6
 8006216:	4621      	mov	r1, r4
 8006218:	4640      	mov	r0, r8
 800621a:	f7ff ff71 	bl	8006100 <__ssputs_r>
 800621e:	3001      	adds	r0, #1
 8006220:	f000 80a4 	beq.w	800636c <_svfiprintf_r+0x1b8>
 8006224:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006226:	4453      	add	r3, sl
 8006228:	9309      	str	r3, [sp, #36]	; 0x24
 800622a:	783b      	ldrb	r3, [r7, #0]
 800622c:	2b00      	cmp	r3, #0
 800622e:	f000 809d 	beq.w	800636c <_svfiprintf_r+0x1b8>
 8006232:	2300      	movs	r3, #0
 8006234:	f04f 32ff 	mov.w	r2, #4294967295
 8006238:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800623c:	9304      	str	r3, [sp, #16]
 800623e:	9307      	str	r3, [sp, #28]
 8006240:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006244:	931a      	str	r3, [sp, #104]	; 0x68
 8006246:	462f      	mov	r7, r5
 8006248:	2205      	movs	r2, #5
 800624a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800624e:	4850      	ldr	r0, [pc, #320]	; (8006390 <_svfiprintf_r+0x1dc>)
 8006250:	f7f9 ffc6 	bl	80001e0 <memchr>
 8006254:	9b04      	ldr	r3, [sp, #16]
 8006256:	b9d0      	cbnz	r0, 800628e <_svfiprintf_r+0xda>
 8006258:	06d9      	lsls	r1, r3, #27
 800625a:	bf44      	itt	mi
 800625c:	2220      	movmi	r2, #32
 800625e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006262:	071a      	lsls	r2, r3, #28
 8006264:	bf44      	itt	mi
 8006266:	222b      	movmi	r2, #43	; 0x2b
 8006268:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800626c:	782a      	ldrb	r2, [r5, #0]
 800626e:	2a2a      	cmp	r2, #42	; 0x2a
 8006270:	d015      	beq.n	800629e <_svfiprintf_r+0xea>
 8006272:	9a07      	ldr	r2, [sp, #28]
 8006274:	462f      	mov	r7, r5
 8006276:	2000      	movs	r0, #0
 8006278:	250a      	movs	r5, #10
 800627a:	4639      	mov	r1, r7
 800627c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006280:	3b30      	subs	r3, #48	; 0x30
 8006282:	2b09      	cmp	r3, #9
 8006284:	d94d      	bls.n	8006322 <_svfiprintf_r+0x16e>
 8006286:	b1b8      	cbz	r0, 80062b8 <_svfiprintf_r+0x104>
 8006288:	e00f      	b.n	80062aa <_svfiprintf_r+0xf6>
 800628a:	462f      	mov	r7, r5
 800628c:	e7b8      	b.n	8006200 <_svfiprintf_r+0x4c>
 800628e:	4a40      	ldr	r2, [pc, #256]	; (8006390 <_svfiprintf_r+0x1dc>)
 8006290:	1a80      	subs	r0, r0, r2
 8006292:	fa0b f000 	lsl.w	r0, fp, r0
 8006296:	4318      	orrs	r0, r3
 8006298:	9004      	str	r0, [sp, #16]
 800629a:	463d      	mov	r5, r7
 800629c:	e7d3      	b.n	8006246 <_svfiprintf_r+0x92>
 800629e:	9a03      	ldr	r2, [sp, #12]
 80062a0:	1d11      	adds	r1, r2, #4
 80062a2:	6812      	ldr	r2, [r2, #0]
 80062a4:	9103      	str	r1, [sp, #12]
 80062a6:	2a00      	cmp	r2, #0
 80062a8:	db01      	blt.n	80062ae <_svfiprintf_r+0xfa>
 80062aa:	9207      	str	r2, [sp, #28]
 80062ac:	e004      	b.n	80062b8 <_svfiprintf_r+0x104>
 80062ae:	4252      	negs	r2, r2
 80062b0:	f043 0302 	orr.w	r3, r3, #2
 80062b4:	9207      	str	r2, [sp, #28]
 80062b6:	9304      	str	r3, [sp, #16]
 80062b8:	783b      	ldrb	r3, [r7, #0]
 80062ba:	2b2e      	cmp	r3, #46	; 0x2e
 80062bc:	d10c      	bne.n	80062d8 <_svfiprintf_r+0x124>
 80062be:	787b      	ldrb	r3, [r7, #1]
 80062c0:	2b2a      	cmp	r3, #42	; 0x2a
 80062c2:	d133      	bne.n	800632c <_svfiprintf_r+0x178>
 80062c4:	9b03      	ldr	r3, [sp, #12]
 80062c6:	1d1a      	adds	r2, r3, #4
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	9203      	str	r2, [sp, #12]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	bfb8      	it	lt
 80062d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80062d4:	3702      	adds	r7, #2
 80062d6:	9305      	str	r3, [sp, #20]
 80062d8:	4d2e      	ldr	r5, [pc, #184]	; (8006394 <_svfiprintf_r+0x1e0>)
 80062da:	7839      	ldrb	r1, [r7, #0]
 80062dc:	2203      	movs	r2, #3
 80062de:	4628      	mov	r0, r5
 80062e0:	f7f9 ff7e 	bl	80001e0 <memchr>
 80062e4:	b138      	cbz	r0, 80062f6 <_svfiprintf_r+0x142>
 80062e6:	2340      	movs	r3, #64	; 0x40
 80062e8:	1b40      	subs	r0, r0, r5
 80062ea:	fa03 f000 	lsl.w	r0, r3, r0
 80062ee:	9b04      	ldr	r3, [sp, #16]
 80062f0:	4303      	orrs	r3, r0
 80062f2:	3701      	adds	r7, #1
 80062f4:	9304      	str	r3, [sp, #16]
 80062f6:	7839      	ldrb	r1, [r7, #0]
 80062f8:	4827      	ldr	r0, [pc, #156]	; (8006398 <_svfiprintf_r+0x1e4>)
 80062fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80062fe:	2206      	movs	r2, #6
 8006300:	1c7e      	adds	r6, r7, #1
 8006302:	f7f9 ff6d 	bl	80001e0 <memchr>
 8006306:	2800      	cmp	r0, #0
 8006308:	d038      	beq.n	800637c <_svfiprintf_r+0x1c8>
 800630a:	4b24      	ldr	r3, [pc, #144]	; (800639c <_svfiprintf_r+0x1e8>)
 800630c:	bb13      	cbnz	r3, 8006354 <_svfiprintf_r+0x1a0>
 800630e:	9b03      	ldr	r3, [sp, #12]
 8006310:	3307      	adds	r3, #7
 8006312:	f023 0307 	bic.w	r3, r3, #7
 8006316:	3308      	adds	r3, #8
 8006318:	9303      	str	r3, [sp, #12]
 800631a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800631c:	444b      	add	r3, r9
 800631e:	9309      	str	r3, [sp, #36]	; 0x24
 8006320:	e76d      	b.n	80061fe <_svfiprintf_r+0x4a>
 8006322:	fb05 3202 	mla	r2, r5, r2, r3
 8006326:	2001      	movs	r0, #1
 8006328:	460f      	mov	r7, r1
 800632a:	e7a6      	b.n	800627a <_svfiprintf_r+0xc6>
 800632c:	2300      	movs	r3, #0
 800632e:	3701      	adds	r7, #1
 8006330:	9305      	str	r3, [sp, #20]
 8006332:	4619      	mov	r1, r3
 8006334:	250a      	movs	r5, #10
 8006336:	4638      	mov	r0, r7
 8006338:	f810 2b01 	ldrb.w	r2, [r0], #1
 800633c:	3a30      	subs	r2, #48	; 0x30
 800633e:	2a09      	cmp	r2, #9
 8006340:	d903      	bls.n	800634a <_svfiprintf_r+0x196>
 8006342:	2b00      	cmp	r3, #0
 8006344:	d0c8      	beq.n	80062d8 <_svfiprintf_r+0x124>
 8006346:	9105      	str	r1, [sp, #20]
 8006348:	e7c6      	b.n	80062d8 <_svfiprintf_r+0x124>
 800634a:	fb05 2101 	mla	r1, r5, r1, r2
 800634e:	2301      	movs	r3, #1
 8006350:	4607      	mov	r7, r0
 8006352:	e7f0      	b.n	8006336 <_svfiprintf_r+0x182>
 8006354:	ab03      	add	r3, sp, #12
 8006356:	9300      	str	r3, [sp, #0]
 8006358:	4622      	mov	r2, r4
 800635a:	4b11      	ldr	r3, [pc, #68]	; (80063a0 <_svfiprintf_r+0x1ec>)
 800635c:	a904      	add	r1, sp, #16
 800635e:	4640      	mov	r0, r8
 8006360:	f3af 8000 	nop.w
 8006364:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006368:	4681      	mov	r9, r0
 800636a:	d1d6      	bne.n	800631a <_svfiprintf_r+0x166>
 800636c:	89a3      	ldrh	r3, [r4, #12]
 800636e:	065b      	lsls	r3, r3, #25
 8006370:	f53f af35 	bmi.w	80061de <_svfiprintf_r+0x2a>
 8006374:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006376:	b01d      	add	sp, #116	; 0x74
 8006378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800637c:	ab03      	add	r3, sp, #12
 800637e:	9300      	str	r3, [sp, #0]
 8006380:	4622      	mov	r2, r4
 8006382:	4b07      	ldr	r3, [pc, #28]	; (80063a0 <_svfiprintf_r+0x1ec>)
 8006384:	a904      	add	r1, sp, #16
 8006386:	4640      	mov	r0, r8
 8006388:	f000 f882 	bl	8006490 <_printf_i>
 800638c:	e7ea      	b.n	8006364 <_svfiprintf_r+0x1b0>
 800638e:	bf00      	nop
 8006390:	08006910 	.word	0x08006910
 8006394:	08006916 	.word	0x08006916
 8006398:	0800691a 	.word	0x0800691a
 800639c:	00000000 	.word	0x00000000
 80063a0:	08006101 	.word	0x08006101

080063a4 <_printf_common>:
 80063a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063a8:	4691      	mov	r9, r2
 80063aa:	461f      	mov	r7, r3
 80063ac:	688a      	ldr	r2, [r1, #8]
 80063ae:	690b      	ldr	r3, [r1, #16]
 80063b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80063b4:	4293      	cmp	r3, r2
 80063b6:	bfb8      	it	lt
 80063b8:	4613      	movlt	r3, r2
 80063ba:	f8c9 3000 	str.w	r3, [r9]
 80063be:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80063c2:	4606      	mov	r6, r0
 80063c4:	460c      	mov	r4, r1
 80063c6:	b112      	cbz	r2, 80063ce <_printf_common+0x2a>
 80063c8:	3301      	adds	r3, #1
 80063ca:	f8c9 3000 	str.w	r3, [r9]
 80063ce:	6823      	ldr	r3, [r4, #0]
 80063d0:	0699      	lsls	r1, r3, #26
 80063d2:	bf42      	ittt	mi
 80063d4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80063d8:	3302      	addmi	r3, #2
 80063da:	f8c9 3000 	strmi.w	r3, [r9]
 80063de:	6825      	ldr	r5, [r4, #0]
 80063e0:	f015 0506 	ands.w	r5, r5, #6
 80063e4:	d107      	bne.n	80063f6 <_printf_common+0x52>
 80063e6:	f104 0a19 	add.w	sl, r4, #25
 80063ea:	68e3      	ldr	r3, [r4, #12]
 80063ec:	f8d9 2000 	ldr.w	r2, [r9]
 80063f0:	1a9b      	subs	r3, r3, r2
 80063f2:	42ab      	cmp	r3, r5
 80063f4:	dc28      	bgt.n	8006448 <_printf_common+0xa4>
 80063f6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80063fa:	6822      	ldr	r2, [r4, #0]
 80063fc:	3300      	adds	r3, #0
 80063fe:	bf18      	it	ne
 8006400:	2301      	movne	r3, #1
 8006402:	0692      	lsls	r2, r2, #26
 8006404:	d42d      	bmi.n	8006462 <_printf_common+0xbe>
 8006406:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800640a:	4639      	mov	r1, r7
 800640c:	4630      	mov	r0, r6
 800640e:	47c0      	blx	r8
 8006410:	3001      	adds	r0, #1
 8006412:	d020      	beq.n	8006456 <_printf_common+0xb2>
 8006414:	6823      	ldr	r3, [r4, #0]
 8006416:	68e5      	ldr	r5, [r4, #12]
 8006418:	f8d9 2000 	ldr.w	r2, [r9]
 800641c:	f003 0306 	and.w	r3, r3, #6
 8006420:	2b04      	cmp	r3, #4
 8006422:	bf08      	it	eq
 8006424:	1aad      	subeq	r5, r5, r2
 8006426:	68a3      	ldr	r3, [r4, #8]
 8006428:	6922      	ldr	r2, [r4, #16]
 800642a:	bf0c      	ite	eq
 800642c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006430:	2500      	movne	r5, #0
 8006432:	4293      	cmp	r3, r2
 8006434:	bfc4      	itt	gt
 8006436:	1a9b      	subgt	r3, r3, r2
 8006438:	18ed      	addgt	r5, r5, r3
 800643a:	f04f 0900 	mov.w	r9, #0
 800643e:	341a      	adds	r4, #26
 8006440:	454d      	cmp	r5, r9
 8006442:	d11a      	bne.n	800647a <_printf_common+0xd6>
 8006444:	2000      	movs	r0, #0
 8006446:	e008      	b.n	800645a <_printf_common+0xb6>
 8006448:	2301      	movs	r3, #1
 800644a:	4652      	mov	r2, sl
 800644c:	4639      	mov	r1, r7
 800644e:	4630      	mov	r0, r6
 8006450:	47c0      	blx	r8
 8006452:	3001      	adds	r0, #1
 8006454:	d103      	bne.n	800645e <_printf_common+0xba>
 8006456:	f04f 30ff 	mov.w	r0, #4294967295
 800645a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800645e:	3501      	adds	r5, #1
 8006460:	e7c3      	b.n	80063ea <_printf_common+0x46>
 8006462:	18e1      	adds	r1, r4, r3
 8006464:	1c5a      	adds	r2, r3, #1
 8006466:	2030      	movs	r0, #48	; 0x30
 8006468:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800646c:	4422      	add	r2, r4
 800646e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006472:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006476:	3302      	adds	r3, #2
 8006478:	e7c5      	b.n	8006406 <_printf_common+0x62>
 800647a:	2301      	movs	r3, #1
 800647c:	4622      	mov	r2, r4
 800647e:	4639      	mov	r1, r7
 8006480:	4630      	mov	r0, r6
 8006482:	47c0      	blx	r8
 8006484:	3001      	adds	r0, #1
 8006486:	d0e6      	beq.n	8006456 <_printf_common+0xb2>
 8006488:	f109 0901 	add.w	r9, r9, #1
 800648c:	e7d8      	b.n	8006440 <_printf_common+0x9c>
	...

08006490 <_printf_i>:
 8006490:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006494:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006498:	460c      	mov	r4, r1
 800649a:	7e09      	ldrb	r1, [r1, #24]
 800649c:	b085      	sub	sp, #20
 800649e:	296e      	cmp	r1, #110	; 0x6e
 80064a0:	4617      	mov	r7, r2
 80064a2:	4606      	mov	r6, r0
 80064a4:	4698      	mov	r8, r3
 80064a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80064a8:	f000 80b3 	beq.w	8006612 <_printf_i+0x182>
 80064ac:	d822      	bhi.n	80064f4 <_printf_i+0x64>
 80064ae:	2963      	cmp	r1, #99	; 0x63
 80064b0:	d036      	beq.n	8006520 <_printf_i+0x90>
 80064b2:	d80a      	bhi.n	80064ca <_printf_i+0x3a>
 80064b4:	2900      	cmp	r1, #0
 80064b6:	f000 80b9 	beq.w	800662c <_printf_i+0x19c>
 80064ba:	2958      	cmp	r1, #88	; 0x58
 80064bc:	f000 8083 	beq.w	80065c6 <_printf_i+0x136>
 80064c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064c4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80064c8:	e032      	b.n	8006530 <_printf_i+0xa0>
 80064ca:	2964      	cmp	r1, #100	; 0x64
 80064cc:	d001      	beq.n	80064d2 <_printf_i+0x42>
 80064ce:	2969      	cmp	r1, #105	; 0x69
 80064d0:	d1f6      	bne.n	80064c0 <_printf_i+0x30>
 80064d2:	6820      	ldr	r0, [r4, #0]
 80064d4:	6813      	ldr	r3, [r2, #0]
 80064d6:	0605      	lsls	r5, r0, #24
 80064d8:	f103 0104 	add.w	r1, r3, #4
 80064dc:	d52a      	bpl.n	8006534 <_printf_i+0xa4>
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	6011      	str	r1, [r2, #0]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	da03      	bge.n	80064ee <_printf_i+0x5e>
 80064e6:	222d      	movs	r2, #45	; 0x2d
 80064e8:	425b      	negs	r3, r3
 80064ea:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80064ee:	486f      	ldr	r0, [pc, #444]	; (80066ac <_printf_i+0x21c>)
 80064f0:	220a      	movs	r2, #10
 80064f2:	e039      	b.n	8006568 <_printf_i+0xd8>
 80064f4:	2973      	cmp	r1, #115	; 0x73
 80064f6:	f000 809d 	beq.w	8006634 <_printf_i+0x1a4>
 80064fa:	d808      	bhi.n	800650e <_printf_i+0x7e>
 80064fc:	296f      	cmp	r1, #111	; 0x6f
 80064fe:	d020      	beq.n	8006542 <_printf_i+0xb2>
 8006500:	2970      	cmp	r1, #112	; 0x70
 8006502:	d1dd      	bne.n	80064c0 <_printf_i+0x30>
 8006504:	6823      	ldr	r3, [r4, #0]
 8006506:	f043 0320 	orr.w	r3, r3, #32
 800650a:	6023      	str	r3, [r4, #0]
 800650c:	e003      	b.n	8006516 <_printf_i+0x86>
 800650e:	2975      	cmp	r1, #117	; 0x75
 8006510:	d017      	beq.n	8006542 <_printf_i+0xb2>
 8006512:	2978      	cmp	r1, #120	; 0x78
 8006514:	d1d4      	bne.n	80064c0 <_printf_i+0x30>
 8006516:	2378      	movs	r3, #120	; 0x78
 8006518:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800651c:	4864      	ldr	r0, [pc, #400]	; (80066b0 <_printf_i+0x220>)
 800651e:	e055      	b.n	80065cc <_printf_i+0x13c>
 8006520:	6813      	ldr	r3, [r2, #0]
 8006522:	1d19      	adds	r1, r3, #4
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	6011      	str	r1, [r2, #0]
 8006528:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800652c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006530:	2301      	movs	r3, #1
 8006532:	e08c      	b.n	800664e <_printf_i+0x1be>
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	6011      	str	r1, [r2, #0]
 8006538:	f010 0f40 	tst.w	r0, #64	; 0x40
 800653c:	bf18      	it	ne
 800653e:	b21b      	sxthne	r3, r3
 8006540:	e7cf      	b.n	80064e2 <_printf_i+0x52>
 8006542:	6813      	ldr	r3, [r2, #0]
 8006544:	6825      	ldr	r5, [r4, #0]
 8006546:	1d18      	adds	r0, r3, #4
 8006548:	6010      	str	r0, [r2, #0]
 800654a:	0628      	lsls	r0, r5, #24
 800654c:	d501      	bpl.n	8006552 <_printf_i+0xc2>
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	e002      	b.n	8006558 <_printf_i+0xc8>
 8006552:	0668      	lsls	r0, r5, #25
 8006554:	d5fb      	bpl.n	800654e <_printf_i+0xbe>
 8006556:	881b      	ldrh	r3, [r3, #0]
 8006558:	4854      	ldr	r0, [pc, #336]	; (80066ac <_printf_i+0x21c>)
 800655a:	296f      	cmp	r1, #111	; 0x6f
 800655c:	bf14      	ite	ne
 800655e:	220a      	movne	r2, #10
 8006560:	2208      	moveq	r2, #8
 8006562:	2100      	movs	r1, #0
 8006564:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006568:	6865      	ldr	r5, [r4, #4]
 800656a:	60a5      	str	r5, [r4, #8]
 800656c:	2d00      	cmp	r5, #0
 800656e:	f2c0 8095 	blt.w	800669c <_printf_i+0x20c>
 8006572:	6821      	ldr	r1, [r4, #0]
 8006574:	f021 0104 	bic.w	r1, r1, #4
 8006578:	6021      	str	r1, [r4, #0]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d13d      	bne.n	80065fa <_printf_i+0x16a>
 800657e:	2d00      	cmp	r5, #0
 8006580:	f040 808e 	bne.w	80066a0 <_printf_i+0x210>
 8006584:	4665      	mov	r5, ip
 8006586:	2a08      	cmp	r2, #8
 8006588:	d10b      	bne.n	80065a2 <_printf_i+0x112>
 800658a:	6823      	ldr	r3, [r4, #0]
 800658c:	07db      	lsls	r3, r3, #31
 800658e:	d508      	bpl.n	80065a2 <_printf_i+0x112>
 8006590:	6923      	ldr	r3, [r4, #16]
 8006592:	6862      	ldr	r2, [r4, #4]
 8006594:	429a      	cmp	r2, r3
 8006596:	bfde      	ittt	le
 8006598:	2330      	movle	r3, #48	; 0x30
 800659a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800659e:	f105 35ff 	addle.w	r5, r5, #4294967295
 80065a2:	ebac 0305 	sub.w	r3, ip, r5
 80065a6:	6123      	str	r3, [r4, #16]
 80065a8:	f8cd 8000 	str.w	r8, [sp]
 80065ac:	463b      	mov	r3, r7
 80065ae:	aa03      	add	r2, sp, #12
 80065b0:	4621      	mov	r1, r4
 80065b2:	4630      	mov	r0, r6
 80065b4:	f7ff fef6 	bl	80063a4 <_printf_common>
 80065b8:	3001      	adds	r0, #1
 80065ba:	d14d      	bne.n	8006658 <_printf_i+0x1c8>
 80065bc:	f04f 30ff 	mov.w	r0, #4294967295
 80065c0:	b005      	add	sp, #20
 80065c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80065c6:	4839      	ldr	r0, [pc, #228]	; (80066ac <_printf_i+0x21c>)
 80065c8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80065cc:	6813      	ldr	r3, [r2, #0]
 80065ce:	6821      	ldr	r1, [r4, #0]
 80065d0:	1d1d      	adds	r5, r3, #4
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	6015      	str	r5, [r2, #0]
 80065d6:	060a      	lsls	r2, r1, #24
 80065d8:	d50b      	bpl.n	80065f2 <_printf_i+0x162>
 80065da:	07ca      	lsls	r2, r1, #31
 80065dc:	bf44      	itt	mi
 80065de:	f041 0120 	orrmi.w	r1, r1, #32
 80065e2:	6021      	strmi	r1, [r4, #0]
 80065e4:	b91b      	cbnz	r3, 80065ee <_printf_i+0x15e>
 80065e6:	6822      	ldr	r2, [r4, #0]
 80065e8:	f022 0220 	bic.w	r2, r2, #32
 80065ec:	6022      	str	r2, [r4, #0]
 80065ee:	2210      	movs	r2, #16
 80065f0:	e7b7      	b.n	8006562 <_printf_i+0xd2>
 80065f2:	064d      	lsls	r5, r1, #25
 80065f4:	bf48      	it	mi
 80065f6:	b29b      	uxthmi	r3, r3
 80065f8:	e7ef      	b.n	80065da <_printf_i+0x14a>
 80065fa:	4665      	mov	r5, ip
 80065fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8006600:	fb02 3311 	mls	r3, r2, r1, r3
 8006604:	5cc3      	ldrb	r3, [r0, r3]
 8006606:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800660a:	460b      	mov	r3, r1
 800660c:	2900      	cmp	r1, #0
 800660e:	d1f5      	bne.n	80065fc <_printf_i+0x16c>
 8006610:	e7b9      	b.n	8006586 <_printf_i+0xf6>
 8006612:	6813      	ldr	r3, [r2, #0]
 8006614:	6825      	ldr	r5, [r4, #0]
 8006616:	6961      	ldr	r1, [r4, #20]
 8006618:	1d18      	adds	r0, r3, #4
 800661a:	6010      	str	r0, [r2, #0]
 800661c:	0628      	lsls	r0, r5, #24
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	d501      	bpl.n	8006626 <_printf_i+0x196>
 8006622:	6019      	str	r1, [r3, #0]
 8006624:	e002      	b.n	800662c <_printf_i+0x19c>
 8006626:	066a      	lsls	r2, r5, #25
 8006628:	d5fb      	bpl.n	8006622 <_printf_i+0x192>
 800662a:	8019      	strh	r1, [r3, #0]
 800662c:	2300      	movs	r3, #0
 800662e:	6123      	str	r3, [r4, #16]
 8006630:	4665      	mov	r5, ip
 8006632:	e7b9      	b.n	80065a8 <_printf_i+0x118>
 8006634:	6813      	ldr	r3, [r2, #0]
 8006636:	1d19      	adds	r1, r3, #4
 8006638:	6011      	str	r1, [r2, #0]
 800663a:	681d      	ldr	r5, [r3, #0]
 800663c:	6862      	ldr	r2, [r4, #4]
 800663e:	2100      	movs	r1, #0
 8006640:	4628      	mov	r0, r5
 8006642:	f7f9 fdcd 	bl	80001e0 <memchr>
 8006646:	b108      	cbz	r0, 800664c <_printf_i+0x1bc>
 8006648:	1b40      	subs	r0, r0, r5
 800664a:	6060      	str	r0, [r4, #4]
 800664c:	6863      	ldr	r3, [r4, #4]
 800664e:	6123      	str	r3, [r4, #16]
 8006650:	2300      	movs	r3, #0
 8006652:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006656:	e7a7      	b.n	80065a8 <_printf_i+0x118>
 8006658:	6923      	ldr	r3, [r4, #16]
 800665a:	462a      	mov	r2, r5
 800665c:	4639      	mov	r1, r7
 800665e:	4630      	mov	r0, r6
 8006660:	47c0      	blx	r8
 8006662:	3001      	adds	r0, #1
 8006664:	d0aa      	beq.n	80065bc <_printf_i+0x12c>
 8006666:	6823      	ldr	r3, [r4, #0]
 8006668:	079b      	lsls	r3, r3, #30
 800666a:	d413      	bmi.n	8006694 <_printf_i+0x204>
 800666c:	68e0      	ldr	r0, [r4, #12]
 800666e:	9b03      	ldr	r3, [sp, #12]
 8006670:	4298      	cmp	r0, r3
 8006672:	bfb8      	it	lt
 8006674:	4618      	movlt	r0, r3
 8006676:	e7a3      	b.n	80065c0 <_printf_i+0x130>
 8006678:	2301      	movs	r3, #1
 800667a:	464a      	mov	r2, r9
 800667c:	4639      	mov	r1, r7
 800667e:	4630      	mov	r0, r6
 8006680:	47c0      	blx	r8
 8006682:	3001      	adds	r0, #1
 8006684:	d09a      	beq.n	80065bc <_printf_i+0x12c>
 8006686:	3501      	adds	r5, #1
 8006688:	68e3      	ldr	r3, [r4, #12]
 800668a:	9a03      	ldr	r2, [sp, #12]
 800668c:	1a9b      	subs	r3, r3, r2
 800668e:	42ab      	cmp	r3, r5
 8006690:	dcf2      	bgt.n	8006678 <_printf_i+0x1e8>
 8006692:	e7eb      	b.n	800666c <_printf_i+0x1dc>
 8006694:	2500      	movs	r5, #0
 8006696:	f104 0919 	add.w	r9, r4, #25
 800669a:	e7f5      	b.n	8006688 <_printf_i+0x1f8>
 800669c:	2b00      	cmp	r3, #0
 800669e:	d1ac      	bne.n	80065fa <_printf_i+0x16a>
 80066a0:	7803      	ldrb	r3, [r0, #0]
 80066a2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80066a6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066aa:	e76c      	b.n	8006586 <_printf_i+0xf6>
 80066ac:	08006921 	.word	0x08006921
 80066b0:	08006932 	.word	0x08006932

080066b4 <memcpy>:
 80066b4:	b510      	push	{r4, lr}
 80066b6:	1e43      	subs	r3, r0, #1
 80066b8:	440a      	add	r2, r1
 80066ba:	4291      	cmp	r1, r2
 80066bc:	d100      	bne.n	80066c0 <memcpy+0xc>
 80066be:	bd10      	pop	{r4, pc}
 80066c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066c8:	e7f7      	b.n	80066ba <memcpy+0x6>

080066ca <memmove>:
 80066ca:	4288      	cmp	r0, r1
 80066cc:	b510      	push	{r4, lr}
 80066ce:	eb01 0302 	add.w	r3, r1, r2
 80066d2:	d807      	bhi.n	80066e4 <memmove+0x1a>
 80066d4:	1e42      	subs	r2, r0, #1
 80066d6:	4299      	cmp	r1, r3
 80066d8:	d00a      	beq.n	80066f0 <memmove+0x26>
 80066da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066de:	f802 4f01 	strb.w	r4, [r2, #1]!
 80066e2:	e7f8      	b.n	80066d6 <memmove+0xc>
 80066e4:	4283      	cmp	r3, r0
 80066e6:	d9f5      	bls.n	80066d4 <memmove+0xa>
 80066e8:	1881      	adds	r1, r0, r2
 80066ea:	1ad2      	subs	r2, r2, r3
 80066ec:	42d3      	cmn	r3, r2
 80066ee:	d100      	bne.n	80066f2 <memmove+0x28>
 80066f0:	bd10      	pop	{r4, pc}
 80066f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80066f6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80066fa:	e7f7      	b.n	80066ec <memmove+0x22>

080066fc <_free_r>:
 80066fc:	b538      	push	{r3, r4, r5, lr}
 80066fe:	4605      	mov	r5, r0
 8006700:	2900      	cmp	r1, #0
 8006702:	d045      	beq.n	8006790 <_free_r+0x94>
 8006704:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006708:	1f0c      	subs	r4, r1, #4
 800670a:	2b00      	cmp	r3, #0
 800670c:	bfb8      	it	lt
 800670e:	18e4      	addlt	r4, r4, r3
 8006710:	f000 f8d2 	bl	80068b8 <__malloc_lock>
 8006714:	4a1f      	ldr	r2, [pc, #124]	; (8006794 <_free_r+0x98>)
 8006716:	6813      	ldr	r3, [r2, #0]
 8006718:	4610      	mov	r0, r2
 800671a:	b933      	cbnz	r3, 800672a <_free_r+0x2e>
 800671c:	6063      	str	r3, [r4, #4]
 800671e:	6014      	str	r4, [r2, #0]
 8006720:	4628      	mov	r0, r5
 8006722:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006726:	f000 b8c8 	b.w	80068ba <__malloc_unlock>
 800672a:	42a3      	cmp	r3, r4
 800672c:	d90c      	bls.n	8006748 <_free_r+0x4c>
 800672e:	6821      	ldr	r1, [r4, #0]
 8006730:	1862      	adds	r2, r4, r1
 8006732:	4293      	cmp	r3, r2
 8006734:	bf04      	itt	eq
 8006736:	681a      	ldreq	r2, [r3, #0]
 8006738:	685b      	ldreq	r3, [r3, #4]
 800673a:	6063      	str	r3, [r4, #4]
 800673c:	bf04      	itt	eq
 800673e:	1852      	addeq	r2, r2, r1
 8006740:	6022      	streq	r2, [r4, #0]
 8006742:	6004      	str	r4, [r0, #0]
 8006744:	e7ec      	b.n	8006720 <_free_r+0x24>
 8006746:	4613      	mov	r3, r2
 8006748:	685a      	ldr	r2, [r3, #4]
 800674a:	b10a      	cbz	r2, 8006750 <_free_r+0x54>
 800674c:	42a2      	cmp	r2, r4
 800674e:	d9fa      	bls.n	8006746 <_free_r+0x4a>
 8006750:	6819      	ldr	r1, [r3, #0]
 8006752:	1858      	adds	r0, r3, r1
 8006754:	42a0      	cmp	r0, r4
 8006756:	d10b      	bne.n	8006770 <_free_r+0x74>
 8006758:	6820      	ldr	r0, [r4, #0]
 800675a:	4401      	add	r1, r0
 800675c:	1858      	adds	r0, r3, r1
 800675e:	4282      	cmp	r2, r0
 8006760:	6019      	str	r1, [r3, #0]
 8006762:	d1dd      	bne.n	8006720 <_free_r+0x24>
 8006764:	6810      	ldr	r0, [r2, #0]
 8006766:	6852      	ldr	r2, [r2, #4]
 8006768:	605a      	str	r2, [r3, #4]
 800676a:	4401      	add	r1, r0
 800676c:	6019      	str	r1, [r3, #0]
 800676e:	e7d7      	b.n	8006720 <_free_r+0x24>
 8006770:	d902      	bls.n	8006778 <_free_r+0x7c>
 8006772:	230c      	movs	r3, #12
 8006774:	602b      	str	r3, [r5, #0]
 8006776:	e7d3      	b.n	8006720 <_free_r+0x24>
 8006778:	6820      	ldr	r0, [r4, #0]
 800677a:	1821      	adds	r1, r4, r0
 800677c:	428a      	cmp	r2, r1
 800677e:	bf04      	itt	eq
 8006780:	6811      	ldreq	r1, [r2, #0]
 8006782:	6852      	ldreq	r2, [r2, #4]
 8006784:	6062      	str	r2, [r4, #4]
 8006786:	bf04      	itt	eq
 8006788:	1809      	addeq	r1, r1, r0
 800678a:	6021      	streq	r1, [r4, #0]
 800678c:	605c      	str	r4, [r3, #4]
 800678e:	e7c7      	b.n	8006720 <_free_r+0x24>
 8006790:	bd38      	pop	{r3, r4, r5, pc}
 8006792:	bf00      	nop
 8006794:	200000c4 	.word	0x200000c4

08006798 <_malloc_r>:
 8006798:	b570      	push	{r4, r5, r6, lr}
 800679a:	1ccd      	adds	r5, r1, #3
 800679c:	f025 0503 	bic.w	r5, r5, #3
 80067a0:	3508      	adds	r5, #8
 80067a2:	2d0c      	cmp	r5, #12
 80067a4:	bf38      	it	cc
 80067a6:	250c      	movcc	r5, #12
 80067a8:	2d00      	cmp	r5, #0
 80067aa:	4606      	mov	r6, r0
 80067ac:	db01      	blt.n	80067b2 <_malloc_r+0x1a>
 80067ae:	42a9      	cmp	r1, r5
 80067b0:	d903      	bls.n	80067ba <_malloc_r+0x22>
 80067b2:	230c      	movs	r3, #12
 80067b4:	6033      	str	r3, [r6, #0]
 80067b6:	2000      	movs	r0, #0
 80067b8:	bd70      	pop	{r4, r5, r6, pc}
 80067ba:	f000 f87d 	bl	80068b8 <__malloc_lock>
 80067be:	4a21      	ldr	r2, [pc, #132]	; (8006844 <_malloc_r+0xac>)
 80067c0:	6814      	ldr	r4, [r2, #0]
 80067c2:	4621      	mov	r1, r4
 80067c4:	b991      	cbnz	r1, 80067ec <_malloc_r+0x54>
 80067c6:	4c20      	ldr	r4, [pc, #128]	; (8006848 <_malloc_r+0xb0>)
 80067c8:	6823      	ldr	r3, [r4, #0]
 80067ca:	b91b      	cbnz	r3, 80067d4 <_malloc_r+0x3c>
 80067cc:	4630      	mov	r0, r6
 80067ce:	f000 f863 	bl	8006898 <_sbrk_r>
 80067d2:	6020      	str	r0, [r4, #0]
 80067d4:	4629      	mov	r1, r5
 80067d6:	4630      	mov	r0, r6
 80067d8:	f000 f85e 	bl	8006898 <_sbrk_r>
 80067dc:	1c43      	adds	r3, r0, #1
 80067de:	d124      	bne.n	800682a <_malloc_r+0x92>
 80067e0:	230c      	movs	r3, #12
 80067e2:	6033      	str	r3, [r6, #0]
 80067e4:	4630      	mov	r0, r6
 80067e6:	f000 f868 	bl	80068ba <__malloc_unlock>
 80067ea:	e7e4      	b.n	80067b6 <_malloc_r+0x1e>
 80067ec:	680b      	ldr	r3, [r1, #0]
 80067ee:	1b5b      	subs	r3, r3, r5
 80067f0:	d418      	bmi.n	8006824 <_malloc_r+0x8c>
 80067f2:	2b0b      	cmp	r3, #11
 80067f4:	d90f      	bls.n	8006816 <_malloc_r+0x7e>
 80067f6:	600b      	str	r3, [r1, #0]
 80067f8:	50cd      	str	r5, [r1, r3]
 80067fa:	18cc      	adds	r4, r1, r3
 80067fc:	4630      	mov	r0, r6
 80067fe:	f000 f85c 	bl	80068ba <__malloc_unlock>
 8006802:	f104 000b 	add.w	r0, r4, #11
 8006806:	1d23      	adds	r3, r4, #4
 8006808:	f020 0007 	bic.w	r0, r0, #7
 800680c:	1ac3      	subs	r3, r0, r3
 800680e:	d0d3      	beq.n	80067b8 <_malloc_r+0x20>
 8006810:	425a      	negs	r2, r3
 8006812:	50e2      	str	r2, [r4, r3]
 8006814:	e7d0      	b.n	80067b8 <_malloc_r+0x20>
 8006816:	428c      	cmp	r4, r1
 8006818:	684b      	ldr	r3, [r1, #4]
 800681a:	bf16      	itet	ne
 800681c:	6063      	strne	r3, [r4, #4]
 800681e:	6013      	streq	r3, [r2, #0]
 8006820:	460c      	movne	r4, r1
 8006822:	e7eb      	b.n	80067fc <_malloc_r+0x64>
 8006824:	460c      	mov	r4, r1
 8006826:	6849      	ldr	r1, [r1, #4]
 8006828:	e7cc      	b.n	80067c4 <_malloc_r+0x2c>
 800682a:	1cc4      	adds	r4, r0, #3
 800682c:	f024 0403 	bic.w	r4, r4, #3
 8006830:	42a0      	cmp	r0, r4
 8006832:	d005      	beq.n	8006840 <_malloc_r+0xa8>
 8006834:	1a21      	subs	r1, r4, r0
 8006836:	4630      	mov	r0, r6
 8006838:	f000 f82e 	bl	8006898 <_sbrk_r>
 800683c:	3001      	adds	r0, #1
 800683e:	d0cf      	beq.n	80067e0 <_malloc_r+0x48>
 8006840:	6025      	str	r5, [r4, #0]
 8006842:	e7db      	b.n	80067fc <_malloc_r+0x64>
 8006844:	200000c4 	.word	0x200000c4
 8006848:	200000c8 	.word	0x200000c8

0800684c <_realloc_r>:
 800684c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800684e:	4607      	mov	r7, r0
 8006850:	4614      	mov	r4, r2
 8006852:	460e      	mov	r6, r1
 8006854:	b921      	cbnz	r1, 8006860 <_realloc_r+0x14>
 8006856:	4611      	mov	r1, r2
 8006858:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800685c:	f7ff bf9c 	b.w	8006798 <_malloc_r>
 8006860:	b922      	cbnz	r2, 800686c <_realloc_r+0x20>
 8006862:	f7ff ff4b 	bl	80066fc <_free_r>
 8006866:	4625      	mov	r5, r4
 8006868:	4628      	mov	r0, r5
 800686a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800686c:	f000 f826 	bl	80068bc <_malloc_usable_size_r>
 8006870:	42a0      	cmp	r0, r4
 8006872:	d20f      	bcs.n	8006894 <_realloc_r+0x48>
 8006874:	4621      	mov	r1, r4
 8006876:	4638      	mov	r0, r7
 8006878:	f7ff ff8e 	bl	8006798 <_malloc_r>
 800687c:	4605      	mov	r5, r0
 800687e:	2800      	cmp	r0, #0
 8006880:	d0f2      	beq.n	8006868 <_realloc_r+0x1c>
 8006882:	4631      	mov	r1, r6
 8006884:	4622      	mov	r2, r4
 8006886:	f7ff ff15 	bl	80066b4 <memcpy>
 800688a:	4631      	mov	r1, r6
 800688c:	4638      	mov	r0, r7
 800688e:	f7ff ff35 	bl	80066fc <_free_r>
 8006892:	e7e9      	b.n	8006868 <_realloc_r+0x1c>
 8006894:	4635      	mov	r5, r6
 8006896:	e7e7      	b.n	8006868 <_realloc_r+0x1c>

08006898 <_sbrk_r>:
 8006898:	b538      	push	{r3, r4, r5, lr}
 800689a:	4c06      	ldr	r4, [pc, #24]	; (80068b4 <_sbrk_r+0x1c>)
 800689c:	2300      	movs	r3, #0
 800689e:	4605      	mov	r5, r0
 80068a0:	4608      	mov	r0, r1
 80068a2:	6023      	str	r3, [r4, #0]
 80068a4:	f7fb fe5e 	bl	8002564 <_sbrk>
 80068a8:	1c43      	adds	r3, r0, #1
 80068aa:	d102      	bne.n	80068b2 <_sbrk_r+0x1a>
 80068ac:	6823      	ldr	r3, [r4, #0]
 80068ae:	b103      	cbz	r3, 80068b2 <_sbrk_r+0x1a>
 80068b0:	602b      	str	r3, [r5, #0]
 80068b2:	bd38      	pop	{r3, r4, r5, pc}
 80068b4:	200002e8 	.word	0x200002e8

080068b8 <__malloc_lock>:
 80068b8:	4770      	bx	lr

080068ba <__malloc_unlock>:
 80068ba:	4770      	bx	lr

080068bc <_malloc_usable_size_r>:
 80068bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068c0:	1f18      	subs	r0, r3, #4
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	bfbc      	itt	lt
 80068c6:	580b      	ldrlt	r3, [r1, r0]
 80068c8:	18c0      	addlt	r0, r0, r3
 80068ca:	4770      	bx	lr

080068cc <_init>:
 80068cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ce:	bf00      	nop
 80068d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068d2:	bc08      	pop	{r3}
 80068d4:	469e      	mov	lr, r3
 80068d6:	4770      	bx	lr

080068d8 <_fini>:
 80068d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068da:	bf00      	nop
 80068dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068de:	bc08      	pop	{r3}
 80068e0:	469e      	mov	lr, r3
 80068e2:	4770      	bx	lr
